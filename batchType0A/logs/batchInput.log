2023-04-15 11:52:41,646 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 11:52:41,744 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 11:52:42,109 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 14524 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 11:52:42,112 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 11:52:42,648 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 11:52:42,654 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 11:52:42,680 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 17 ms. Found 0 JDBC repository interfaces.
2023-04-15 11:52:42,693 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 11:52:42,695 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 11:52:42,704 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 3 ms. Found 0 JPA repository interfaces.
2023-04-15 11:52:43,087 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 11:52:44,526 ERROR com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Exception during pool initialization.
java.sql.SQLSyntaxErrorException: Unknown database 'batch'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:824)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:444)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:237)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:198)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:159)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:117)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:80)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:336)
	at org.springframework.boot.jdbc.DatabaseDriver.fromDataSource(DatabaseDriver.java:321)
	at org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver.getDatabaseDriver(PlatformPlaceholderDatabaseDriverResolver.java:137)
	at org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver.determinePlatform(PlatformPlaceholderDatabaseDriverResolver.java:131)
	at org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver.lambda$resolveAll$0(PlatformPlaceholderDatabaseDriverResolver.java:96)
	at org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver.resolveAll(PlatformPlaceholderDatabaseDriverResolver.java:121)
	at org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver.resolveAll(PlatformPlaceholderDatabaseDriverResolver.java:96)
	at org.springframework.boot.autoconfigure.batch.BatchDataSourceScriptDatabaseInitializer.resolveSchemaLocations(BatchDataSourceScriptDatabaseInitializer.java:83)
	at org.springframework.boot.autoconfigure.batch.BatchDataSourceScriptDatabaseInitializer.getSettings(BatchDataSourceScriptDatabaseInitializer.java:72)
	at org.springframework.boot.autoconfigure.batch.BatchDataSourceScriptDatabaseInitializer.<init>(BatchDataSourceScriptDatabaseInitializer.java:47)
	at org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration$DataSourceInitializerConfiguration.batchDataSourceInitializer(BatchAutoConfiguration.java:158)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:139)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:645)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1132)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:907)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:310)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
2023-04-15 11:52:44,530 WARN org.springframework.web.context.support.GenericWebApplicationContext [main] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'batchDataSourceInitializer' defined in class path resource [org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration$DataSourceInitializerConfiguration.class]: Failed to instantiate [org.springframework.boot.autoconfigure.batch.BatchDataSourceScriptDatabaseInitializer]: Factory method 'batchDataSourceInitializer' threw exception with message: Unable to detect database type
2023-04-15 11:52:44,537 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLogger [main] 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2023-04-15 11:52:44,551 ERROR org.springframework.boot.SpringApplication [main] Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'batchDataSourceInitializer' defined in class path resource [org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration$DataSourceInitializerConfiguration.class]: Failed to instantiate [org.springframework.boot.autoconfigure.batch.BatchDataSourceScriptDatabaseInitializer]: Factory method 'batchDataSourceInitializer' threw exception with message: Unable to detect database type
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:657)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:645)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1132)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:907)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:310)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.autoconfigure.batch.BatchDataSourceScriptDatabaseInitializer]: Factory method 'batchDataSourceInitializer' threw exception with message: Unable to detect database type
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:171)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	... 93 common frames omitted
Caused by: java.lang.IllegalStateException: Unable to detect database type
	at org.springframework.util.Assert.state(Assert.java:76)
	at org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver.determinePlatform(PlatformPlaceholderDatabaseDriverResolver.java:132)
	at org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver.lambda$resolveAll$0(PlatformPlaceholderDatabaseDriverResolver.java:96)
	at org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver.resolveAll(PlatformPlaceholderDatabaseDriverResolver.java:121)
	at org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver.resolveAll(PlatformPlaceholderDatabaseDriverResolver.java:96)
	at org.springframework.boot.autoconfigure.batch.BatchDataSourceScriptDatabaseInitializer.resolveSchemaLocations(BatchDataSourceScriptDatabaseInitializer.java:83)
	at org.springframework.boot.autoconfigure.batch.BatchDataSourceScriptDatabaseInitializer.getSettings(BatchDataSourceScriptDatabaseInitializer.java:72)
	at org.springframework.boot.autoconfigure.batch.BatchDataSourceScriptDatabaseInitializer.<init>(BatchDataSourceScriptDatabaseInitializer.java:47)
	at org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration$DataSourceInitializerConfiguration.batchDataSourceInitializer(BatchAutoConfiguration.java:158)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:139)
	... 94 common frames omitted
2023-04-15 11:52:44,558 ERROR org.springframework.test.context.TestContextManager [main] Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener] to prepare test instance [com.yuripe.batchType0A.BatchType0AApplicationTests@2cccf134]
java.lang.IllegalStateException: Failed to load ApplicationContext for [WebMergedContextConfiguration@272778ae testClass = com.yuripe.batchType0A.BatchType0AApplicationTests, locations = [], classes = [com.yuripe.batchType0A.BatchType0AApplication], contextInitializerClasses = [], activeProfiles = [], propertySourceLocations = [], propertySourceProperties = ["org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@2974f221, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@4044fb95, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@6eeade6c, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@9da1, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@45efc20d, org.springframework.boot.test.context.SpringBootTestAnnotation@26acbb8b], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:142)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'batchDataSourceInitializer' defined in class path resource [org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration$DataSourceInitializerConfiguration.class]: Failed to instantiate [org.springframework.boot.autoconfigure.batch.BatchDataSourceScriptDatabaseInitializer]: Factory method 'batchDataSourceInitializer' threw exception with message: Unable to detect database type
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:657)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:645)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1132)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:907)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:310)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	... 67 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.autoconfigure.batch.BatchDataSourceScriptDatabaseInitializer]: Factory method 'batchDataSourceInitializer' threw exception with message: Unable to detect database type
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:171)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	... 93 common frames omitted
Caused by: java.lang.IllegalStateException: Unable to detect database type
	at org.springframework.util.Assert.state(Assert.java:76)
	at org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver.determinePlatform(PlatformPlaceholderDatabaseDriverResolver.java:132)
	at org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver.lambda$resolveAll$0(PlatformPlaceholderDatabaseDriverResolver.java:96)
	at org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver.resolveAll(PlatformPlaceholderDatabaseDriverResolver.java:121)
	at org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver.resolveAll(PlatformPlaceholderDatabaseDriverResolver.java:96)
	at org.springframework.boot.autoconfigure.batch.BatchDataSourceScriptDatabaseInitializer.resolveSchemaLocations(BatchDataSourceScriptDatabaseInitializer.java:83)
	at org.springframework.boot.autoconfigure.batch.BatchDataSourceScriptDatabaseInitializer.getSettings(BatchDataSourceScriptDatabaseInitializer.java:72)
	at org.springframework.boot.autoconfigure.batch.BatchDataSourceScriptDatabaseInitializer.<init>(BatchDataSourceScriptDatabaseInitializer.java:47)
	at org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration$DataSourceInitializerConfiguration.batchDataSourceInitializer(BatchAutoConfiguration.java:158)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:139)
	... 94 common frames omitted
2023-04-15 11:53:59,185 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 11:53:59,251 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 11:53:59,534 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 1368 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 11:53:59,535 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 11:54:00,058 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 11:54:00,060 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 11:54:00,078 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 13 ms. Found 0 JDBC repository interfaces.
2023-04-15 11:54:00,087 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 11:54:00,088 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 11:54:00,094 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 11:54:00,374 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 11:54:00,740 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@fddd7ae
2023-04-15 11:54:00,742 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 11:54:01,031 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 11:54:01,111 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 11:54:01,375 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 11:54:01,390 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@4afcae7
2023-04-15 11:54:01,390 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@4afcae7
2023-04-15 11:54:01,391 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@4afcae7
2023-04-15 11:54:01,391 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@6cd2cb2
2023-04-15 11:54:01,391 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@6cd2cb2
2023-04-15 11:54:01,392 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@3a2bb026
2023-04-15 11:54:01,392 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@3a2bb026
2023-04-15 11:54:01,393 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@7645e64
2023-04-15 11:54:01,393 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@7645e64
2023-04-15 11:54:01,393 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@7de6549d
2023-04-15 11:54:01,393 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@7de6549d
2023-04-15 11:54:01,394 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@7de6549d
2023-04-15 11:54:01,394 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@12214f2f
2023-04-15 11:54:01,395 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@12214f2f
2023-04-15 11:54:01,395 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@12214f2f
2023-04-15 11:54:01,395 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@1fd37440
2023-04-15 11:54:01,395 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@1fd37440
2023-04-15 11:54:01,395 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@1fd37440
2023-04-15 11:54:01,396 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@1fd37440
2023-04-15 11:54:01,396 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@79308a2
2023-04-15 11:54:01,396 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@11574592
2023-04-15 11:54:01,396 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@11574592
2023-04-15 11:54:01,397 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@352e5a82
2023-04-15 11:54:01,397 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@315b5913
2023-04-15 11:54:01,397 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@2e929182
2023-04-15 11:54:01,397 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@2e929182
2023-04-15 11:54:01,397 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@2e929182
2023-04-15 11:54:01,397 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@5423a17
2023-04-15 11:54:01,397 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@5423a17
2023-04-15 11:54:01,398 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@5423a17
2023-04-15 11:54:01,398 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@42ff9a77
2023-04-15 11:54:01,399 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@42ff9a77
2023-04-15 11:54:01,399 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@42ff9a77
2023-04-15 11:54:01,399 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@2987d0fa
2023-04-15 11:54:01,399 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@2987d0fa
2023-04-15 11:54:01,399 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@2987d0fa
2023-04-15 11:54:01,400 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@13234ac9
2023-04-15 11:54:01,400 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@13234ac9
2023-04-15 11:54:01,404 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@13234ac9
2023-04-15 11:54:01,404 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@7254838
2023-04-15 11:54:01,404 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@7254838
2023-04-15 11:54:01,404 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@39374689
2023-04-15 11:54:01,404 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@39374689
2023-04-15 11:54:01,404 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@2e204155
2023-04-15 11:54:01,405 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@2e204155
2023-04-15 11:54:01,405 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@2e204155
2023-04-15 11:54:01,405 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@27dc335a
2023-04-15 11:54:01,405 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@a95cb11
2023-04-15 11:54:01,405 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@a95cb11
2023-04-15 11:54:01,405 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@915d7c4
2023-04-15 11:54:01,405 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@2513155a
2023-04-15 11:54:01,406 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@2513155a
2023-04-15 11:54:01,406 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@2513155a
2023-04-15 11:54:01,406 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@6313b441
2023-04-15 11:54:01,406 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@6313b441
2023-04-15 11:54:01,406 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@6313b441
2023-04-15 11:54:01,407 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@47fa3671
2023-04-15 11:54:01,407 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@60f662bd
2023-04-15 11:54:01,407 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@5df2023c
2023-04-15 11:54:01,407 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@5df2023c
2023-04-15 11:54:01,407 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@23bd047f
2023-04-15 11:54:01,409 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@23bd047f
2023-04-15 11:54:01,409 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@3562e7c7
2023-04-15 11:54:01,409 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@66d2885c
2023-04-15 11:54:01,409 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@2bfc8558
2023-04-15 11:54:01,410 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@6029f2a4
2023-04-15 11:54:01,410 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@42576db9
2023-04-15 11:54:01,410 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@30358dc7
2023-04-15 11:54:01,410 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@7fac18dc
2023-04-15 11:54:01,410 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@7fac18dc
2023-04-15 11:54:01,410 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@50bf795f
2023-04-15 11:54:01,411 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@50bf795f
2023-04-15 11:54:01,411 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@29fcfc54
2023-04-15 11:54:01,411 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@29fcfc54
2023-04-15 11:54:01,411 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@353b0719
2023-04-15 11:54:01,412 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@353b0719
2023-04-15 11:54:01,412 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@2a4e939a
2023-04-15 11:54:01,412 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@2a4e939a
2023-04-15 11:54:01,412 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@110620d
2023-04-15 11:54:01,412 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@4f402027
2023-04-15 11:54:01,412 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@22aee519
2023-04-15 11:54:01,413 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@22aee519
2023-04-15 11:54:01,413 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@7c226095
2023-04-15 11:54:01,413 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@7c226095
2023-04-15 11:54:01,413 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7ea07516
2023-04-15 11:54:01,413 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@30af23fd
2023-04-15 11:54:01,413 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@65fc8edc
2023-04-15 11:54:01,414 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@65fc8edc
2023-04-15 11:54:01,414 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@a357c3e
2023-04-15 11:54:01,414 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@a357c3e
2023-04-15 11:54:01,414 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@7740b0ab
2023-04-15 11:54:01,414 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@7740b0ab
2023-04-15 11:54:01,414 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@7740b0ab
2023-04-15 11:54:01,414 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@3eb9c575
2023-04-15 11:54:01,415 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@3eb9c575
2023-04-15 11:54:01,415 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@3eb9c575
2023-04-15 11:54:01,415 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@3f322610
2023-04-15 11:54:01,415 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@1e477944
2023-04-15 11:54:01,415 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@6cf047cf
2023-04-15 11:54:01,415 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@6cf047cf
2023-04-15 11:54:01,416 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 11:54:01,416 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 11:54:01,416 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 11:54:01,416 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 11:54:01,417 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 11:54:01,417 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 11:54:01,417 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 11:54:01,417 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 11:54:01,417 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 11:54:01,417 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 11:54:01,417 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 11:54:01,419 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 11:54:01,419 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 11:54:01,419 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 11:54:01,419 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 11:54:01,419 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 11:54:01,419 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 11:54:01,419 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 11:54:01,420 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 11:54:01,420 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 11:54:01,420 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 11:54:01,425 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@5a8dcfbb
2023-04-15 11:54:01,426 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@5a8dcfbb
2023-04-15 11:54:01,428 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@29d3d0fb
2023-04-15 11:54:01,429 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@29d3d0fb
2023-04-15 11:54:01,430 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@278de2b2
2023-04-15 11:54:01,430 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1fc1c7e
2023-04-15 11:54:01,432 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@75cacb3e
2023-04-15 11:54:01,432 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@61957d9c
2023-04-15 11:54:01,432 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@29c59b6e
2023-04-15 11:54:01,432 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@483b7dc4
2023-04-15 11:54:01,432 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@6b8bdcc6
2023-04-15 11:54:01,432 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@213835b6
2023-04-15 11:54:01,432 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@24a3d414
2023-04-15 11:54:01,481 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 11:54:01,482 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 11:54:01,498 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@652b3733) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7b598d05)
2023-04-15 11:54:01,499 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6cc8c13c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@371cd2fc)
2023-04-15 11:54:01,499 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@b32e983) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3c346c45)
2023-04-15 11:54:01,499 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@16df9bde) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@478530cb)
2023-04-15 11:54:01,499 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5be7b749) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@44aeae34)
2023-04-15 11:54:01,499 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2ec5cc14) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@40a8a26f)
2023-04-15 11:54:01,500 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@269308cc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@177ddd24)
2023-04-15 11:54:01,500 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@17d816b3) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@126675fd)
2023-04-15 11:54:01,500 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2c0dca15) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5560b64d)
2023-04-15 11:54:01,502 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 11:54:01,502 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 11:54:01,503 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 11:54:01,504 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 11:54:01,504 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 11:54:01,505 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@16e07bae
2023-04-15 11:54:01,505 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@278de2b2`
2023-04-15 11:54:01,508 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 11:54:01,508 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 11:54:01,509 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 11:54:01,509 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 11:54:01,509 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 11:54:01,509 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 11:54:01,510 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@356341c9] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@3a70575]
2023-04-15 11:54:01,863 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@356341c9] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@3e0855b0]
2023-04-15 11:54:02,160 DEBUG org.hibernate.SQL [main] 
    
    drop table if exists policy
2023-04-15 11:54:02,177 DEBUG org.hibernate.SQL [main] 
    
    create table policy (
       policy_id bigint not null auto_increment,
        contractor_customer_code varchar(255),
        effective_date datetime(6),
        expire_date datetime(6),
        insured_customer_code varchar(255),
        policy_number varchar(255),
        state varchar(255),
        primary key (policy_id)
    ) engine=InnoDB
2023-04-15 11:54:02,192 DEBUG org.hibernate.SQL [main] 
    
    alter table policy 
       add constraint UKpwdbfish9akv2pufab9vybg19 unique (policy_number)
2023-04-15 11:54:02,207 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 11:54:02,214 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@3e0855b0] for TypeConfiguration
2023-04-15 11:54:02,216 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 11:54:02,225 WARN org.springframework.web.context.support.GenericWebApplicationContext [main] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'batchConfiguration': Unsatisfied dependency expressed through field 'failureListener': No qualifying bean of type 'com.yuripe.batchType0A.Listener.ItemFailureLoggerListener' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2023-04-15 11:54:02,226 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 11:54:02,228 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@3e0855b0] for TypeConfiguration
2023-04-15 11:54:02,229 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@7d0df326] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@3e0855b0]
2023-04-15 11:54:02,231 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown initiated...
2023-04-15 11:54:02,241 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown completed.
2023-04-15 11:54:02,251 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLogger [main] 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2023-04-15 11:54:02,270 ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter [main] 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field failureListener in com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration required a bean of type 'com.yuripe.batchType0A.Listener.ItemFailureLoggerListener' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'com.yuripe.batchType0A.Listener.ItemFailureLoggerListener' in your configuration.

2023-04-15 11:54:02,275 ERROR org.springframework.test.context.TestContextManager [main] Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener] to prepare test instance [com.yuripe.batchType0A.BatchType0AApplicationTests@5020e5ab]
java.lang.IllegalStateException: Failed to load ApplicationContext for [WebMergedContextConfiguration@19f99aaf testClass = com.yuripe.batchType0A.BatchType0AApplicationTests, locations = [], classes = [com.yuripe.batchType0A.BatchType0AApplication], contextInitializerClasses = [], activeProfiles = [], propertySourceLocations = [], propertySourceProperties = ["org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5e81e5ac, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@6035b93b, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@4c398c80, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@9da1, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@4febb875, org.springframework.boot.test.context.SpringBootTestAnnotation@26acbb8b], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:142)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'batchConfiguration': Unsatisfied dependency expressed through field 'failureListener': No qualifying bean of type 'com.yuripe.batchType0A.Listener.ItemFailureLoggerListener' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:713)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:693)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:133)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:482)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1416)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:597)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:917)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:310)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	... 67 common frames omitted
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.yuripe.batchType0A.Listener.ItemFailureLoggerListener' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1824)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1383)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1337)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:710)
	... 92 common frames omitted
2023-04-15 11:58:11,315 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 11:58:11,385 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 11:58:11,664 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 12000 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 11:58:11,665 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 11:58:12,150 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 11:58:12,151 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 11:58:12,166 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 12 ms. Found 0 JDBC repository interfaces.
2023-04-15 11:58:12,174 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 11:58:12,175 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 11:58:12,181 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 11:58:12,467 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 11:58:12,810 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5d7dd549
2023-04-15 11:58:12,813 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 11:58:12,900 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 11:58:12,963 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 11:58:13,213 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 11:58:13,225 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@30af23fd
2023-04-15 11:58:13,226 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@30af23fd
2023-04-15 11:58:13,226 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@30af23fd
2023-04-15 11:58:13,227 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@65fc8edc
2023-04-15 11:58:13,227 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@65fc8edc
2023-04-15 11:58:13,228 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@a357c3e
2023-04-15 11:58:13,228 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@a357c3e
2023-04-15 11:58:13,228 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@7740b0ab
2023-04-15 11:58:13,228 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@7740b0ab
2023-04-15 11:58:13,229 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@3eb9c575
2023-04-15 11:58:13,229 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@3eb9c575
2023-04-15 11:58:13,229 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@3eb9c575
2023-04-15 11:58:13,230 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@3f322610
2023-04-15 11:58:13,230 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@3f322610
2023-04-15 11:58:13,230 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@3f322610
2023-04-15 11:58:13,231 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 11:58:13,231 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 11:58:13,231 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 11:58:13,231 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 11:58:13,231 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 11:58:13,232 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 11:58:13,232 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 11:58:13,232 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 11:58:13,232 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 11:58:13,232 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 11:58:13,233 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 11:58:13,233 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 11:58:13,234 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 11:58:13,234 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 11:58:13,234 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 11:58:13,234 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 11:58:13,235 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 11:58:13,235 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 11:58:13,235 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 11:58:13,235 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 11:58:13,235 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 11:58:13,235 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 11:58:13,236 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 11:58:13,236 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 11:58:13,237 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 11:58:13,237 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 11:58:13,237 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 11:58:13,237 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 11:58:13,237 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 11:58:13,237 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 11:58:13,237 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 11:58:13,238 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 11:58:13,239 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 11:58:13,239 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 11:58:13,239 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 11:58:13,239 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 11:58:13,239 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 11:58:13,239 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 11:58:13,240 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 11:58:13,240 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 11:58:13,240 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 11:58:13,240 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 11:58:13,240 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 11:58:13,240 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 11:58:13,240 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 11:58:13,241 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 11:58:13,241 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 11:58:13,241 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 11:58:13,241 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 11:58:13,242 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 11:58:13,242 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 11:58:13,242 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 11:58:13,242 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 11:58:13,243 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 11:58:13,243 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 11:58:13,243 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 11:58:13,243 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 11:58:13,243 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 11:58:13,244 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 11:58:13,244 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 11:58:13,244 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 11:58:13,244 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 11:58:13,245 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 11:58:13,245 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 11:58:13,245 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 11:58:13,245 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 11:58:13,245 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 11:58:13,246 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 11:58:13,246 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 11:58:13,246 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 11:58:13,247 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 11:58:13,247 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 11:58:13,247 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 11:58:13,247 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 11:58:13,248 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 11:58:13,249 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 11:58:13,249 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 11:58:13,249 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 11:58:13,249 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 11:58:13,249 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 11:58:13,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 11:58:13,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 11:58:13,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 11:58:13,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 11:58:13,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 11:58:13,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 11:58:13,251 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 11:58:13,251 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 11:58:13,251 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 11:58:13,251 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 11:58:13,251 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 11:58:13,252 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 11:58:13,252 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 11:58:13,252 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 11:58:13,252 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 11:58:13,252 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 11:58:13,253 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 11:58:13,253 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 11:58:13,253 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 11:58:13,253 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 11:58:13,254 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 11:58:13,254 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 11:58:13,254 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 11:58:13,254 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 11:58:13,254 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 11:58:13,255 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 11:58:13,262 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@55638165
2023-04-15 11:58:13,262 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@55638165
2023-04-15 11:58:13,264 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@e97f115
2023-04-15 11:58:13,265 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@e97f115
2023-04-15 11:58:13,266 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@3cf4dec7
2023-04-15 11:58:13,266 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1b94c789
2023-04-15 11:58:13,267 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@299fc582
2023-04-15 11:58:13,267 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@305aaedf
2023-04-15 11:58:13,267 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@2a425cf5
2023-04-15 11:58:13,267 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@17d76ebb
2023-04-15 11:58:13,267 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@40b31a16
2023-04-15 11:58:13,267 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@25fa6889
2023-04-15 11:58:13,268 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@1de73d37
2023-04-15 11:58:13,305 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 11:58:13,307 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 11:58:13,327 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1e606f64) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@581918f6)
2023-04-15 11:58:13,327 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1958c0d9) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@d8e4250)
2023-04-15 11:58:13,327 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@100807ca) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@c67395)
2023-04-15 11:58:13,328 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5fc7255c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@20a47036)
2023-04-15 11:58:13,328 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@70c205bf) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@43ab9ae9)
2023-04-15 11:58:13,328 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2520aa05) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@26865b57)
2023-04-15 11:58:13,328 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@46894dc5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@596afb2f)
2023-04-15 11:58:13,328 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@79ba0285) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6df2a206)
2023-04-15 11:58:13,329 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@61993d18) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6f240187)
2023-04-15 11:58:13,330 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 11:58:13,330 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 11:58:13,331 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 11:58:13,332 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 11:58:13,333 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 11:58:13,335 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@3e2c4d4b
2023-04-15 11:58:13,335 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@3cf4dec7`
2023-04-15 11:58:13,339 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 11:58:13,340 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 11:58:13,340 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 11:58:13,340 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 11:58:13,341 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 11:58:13,341 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 11:58:13,343 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@2976ca51] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@6b091a92]
2023-04-15 11:58:13,595 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@2976ca51] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@c83ed77]
2023-04-15 11:58:13,887 DEBUG org.hibernate.SQL [main] 
    
    drop table if exists policy
2023-04-15 11:58:13,898 DEBUG org.hibernate.SQL [main] 
    
    create table policy (
       policy_id bigint not null auto_increment,
        contractor_customer_code varchar(255),
        effective_date datetime(6),
        expire_date datetime(6),
        insured_customer_code varchar(255),
        policy_number varchar(255),
        state varchar(255),
        primary key (policy_id)
    ) engine=InnoDB
2023-04-15 11:58:13,912 DEBUG org.hibernate.SQL [main] 
    
    alter table policy 
       add constraint UKpwdbfish9akv2pufab9vybg19 unique (policy_number)
2023-04-15 11:58:13,924 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 11:58:13,930 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@c83ed77] for TypeConfiguration
2023-04-15 11:58:13,931 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 11:58:14,170 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 11:58:14,635 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 3.119 seconds (process running for 3.974)
2023-04-15 11:58:14,637 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 11:58:14,793 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=1, type=class java.lang.Long, identifying=true}'}]
2023-04-15 11:58:14,834 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 11:58:14,872 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 11:58:14,872 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 11:58:14,873 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 11:58:14,873 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 11:58:14,873 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 11:58:14,889 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 55ms
2023-04-15 11:58:14,928 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=1, type=class java.lang.Long, identifying=true}'}] and the following status: [COMPLETED] in 116ms
2023-04-15 11:58:15,094 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 11:58:15,095 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@c83ed77] for TypeConfiguration
2023-04-15 11:58:15,095 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@102074ed] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@c83ed77]
2023-04-15 11:58:15,099 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 11:58:15,112 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 11:58:37,413 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 11:58:37,492 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 11:58:37,778 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 4184 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 11:58:37,778 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 11:58:38,273 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 11:58:38,274 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 11:58:38,290 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 11 ms. Found 0 JDBC repository interfaces.
2023-04-15 11:58:38,296 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 11:58:38,298 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 11:58:38,303 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 11:58:38,599 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 11:58:38,967 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5d7dd549
2023-04-15 11:58:38,969 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 11:58:39,052 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 11:58:39,105 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 11:58:39,362 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 11:58:39,371 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@30af23fd
2023-04-15 11:58:39,372 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@30af23fd
2023-04-15 11:58:39,372 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@30af23fd
2023-04-15 11:58:39,372 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@65fc8edc
2023-04-15 11:58:39,373 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@65fc8edc
2023-04-15 11:58:39,373 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@a357c3e
2023-04-15 11:58:39,373 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@a357c3e
2023-04-15 11:58:39,373 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@7740b0ab
2023-04-15 11:58:39,373 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@7740b0ab
2023-04-15 11:58:39,374 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@3eb9c575
2023-04-15 11:58:39,374 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@3eb9c575
2023-04-15 11:58:39,374 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@3eb9c575
2023-04-15 11:58:39,374 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@3f322610
2023-04-15 11:58:39,374 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@3f322610
2023-04-15 11:58:39,375 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@3f322610
2023-04-15 11:58:39,375 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 11:58:39,375 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 11:58:39,375 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 11:58:39,376 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 11:58:39,376 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 11:58:39,376 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 11:58:39,377 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 11:58:39,377 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 11:58:39,377 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 11:58:39,378 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 11:58:39,378 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 11:58:39,378 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 11:58:39,378 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 11:58:39,378 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 11:58:39,379 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 11:58:39,379 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 11:58:39,379 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 11:58:39,379 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 11:58:39,379 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 11:58:39,380 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 11:58:39,380 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 11:58:39,380 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 11:58:39,380 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 11:58:39,380 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 11:58:39,381 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 11:58:39,381 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 11:58:39,381 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 11:58:39,381 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 11:58:39,381 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 11:58:39,383 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 11:58:39,383 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 11:58:39,383 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 11:58:39,383 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 11:58:39,383 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 11:58:39,384 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 11:58:39,384 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 11:58:39,384 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 11:58:39,384 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 11:58:39,384 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 11:58:39,385 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 11:58:39,385 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 11:58:39,385 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 11:58:39,385 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 11:58:39,385 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 11:58:39,385 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 11:58:39,385 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 11:58:39,386 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 11:58:39,386 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 11:58:39,386 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 11:58:39,386 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 11:58:39,386 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 11:58:39,387 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 11:58:39,387 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 11:58:39,388 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 11:58:39,388 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 11:58:39,388 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 11:58:39,388 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 11:58:39,388 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 11:58:39,389 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 11:58:39,389 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 11:58:39,389 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 11:58:39,389 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 11:58:39,390 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 11:58:39,390 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 11:58:39,390 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 11:58:39,390 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 11:58:39,390 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 11:58:39,392 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 11:58:39,392 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 11:58:39,392 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 11:58:39,392 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 11:58:39,392 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 11:58:39,393 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 11:58:39,393 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 11:58:39,393 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 11:58:39,393 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 11:58:39,394 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 11:58:39,394 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 11:58:39,394 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 11:58:39,394 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 11:58:39,394 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 11:58:39,394 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 11:58:39,395 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 11:58:39,395 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 11:58:39,395 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 11:58:39,395 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 11:58:39,395 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 11:58:39,395 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 11:58:39,396 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 11:58:39,396 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 11:58:39,396 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 11:58:39,396 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 11:58:39,396 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 11:58:39,397 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 11:58:39,397 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 11:58:39,398 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 11:58:39,398 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 11:58:39,399 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 11:58:39,399 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 11:58:39,399 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 11:58:39,399 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 11:58:39,399 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 11:58:39,400 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 11:58:39,400 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 11:58:39,400 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 11:58:39,400 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 11:58:39,406 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@55638165
2023-04-15 11:58:39,408 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@55638165
2023-04-15 11:58:39,410 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@e97f115
2023-04-15 11:58:39,410 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@e97f115
2023-04-15 11:58:39,411 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@3cf4dec7
2023-04-15 11:58:39,411 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1b94c789
2023-04-15 11:58:39,411 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@299fc582
2023-04-15 11:58:39,412 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@305aaedf
2023-04-15 11:58:39,412 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@2a425cf5
2023-04-15 11:58:39,412 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@17d76ebb
2023-04-15 11:58:39,412 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@40b31a16
2023-04-15 11:58:39,412 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@25fa6889
2023-04-15 11:58:39,412 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@1de73d37
2023-04-15 11:58:39,454 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 11:58:39,455 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 11:58:39,470 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1e606f64) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@581918f6)
2023-04-15 11:58:39,470 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1958c0d9) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@d8e4250)
2023-04-15 11:58:39,471 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@100807ca) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@c67395)
2023-04-15 11:58:39,471 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5fc7255c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@20a47036)
2023-04-15 11:58:39,471 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@70c205bf) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@43ab9ae9)
2023-04-15 11:58:39,471 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2520aa05) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@26865b57)
2023-04-15 11:58:39,471 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@46894dc5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@596afb2f)
2023-04-15 11:58:39,471 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@79ba0285) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6df2a206)
2023-04-15 11:58:39,472 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@61993d18) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6f240187)
2023-04-15 11:58:39,473 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 11:58:39,473 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 11:58:39,474 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 11:58:39,475 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 11:58:39,476 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 11:58:39,479 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@3e2c4d4b
2023-04-15 11:58:39,479 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@3cf4dec7`
2023-04-15 11:58:39,483 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 11:58:39,483 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 11:58:39,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 11:58:39,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 11:58:39,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 11:58:39,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 11:58:39,486 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@2976ca51] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@6b091a92]
2023-04-15 11:58:39,758 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@2976ca51] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@c83ed77]
2023-04-15 11:58:40,092 DEBUG org.hibernate.SQL [main] 
    
    drop table if exists policy
2023-04-15 11:58:40,106 DEBUG org.hibernate.SQL [main] 
    
    create table policy (
       policy_id bigint not null auto_increment,
        contractor_customer_code varchar(255),
        effective_date datetime(6),
        expire_date datetime(6),
        insured_customer_code varchar(255),
        policy_number varchar(255),
        state varchar(255),
        primary key (policy_id)
    ) engine=InnoDB
2023-04-15 11:58:40,119 DEBUG org.hibernate.SQL [main] 
    
    alter table policy 
       add constraint UKpwdbfish9akv2pufab9vybg19 unique (policy_number)
2023-04-15 11:58:40,130 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 11:58:40,136 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@c83ed77] for TypeConfiguration
2023-04-15 11:58:40,138 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 11:58:40,397 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 11:58:40,803 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 3.174 seconds (process running for 4.042)
2023-04-15 11:58:40,805 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 11:58:40,929 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=2, type=class java.lang.Long, identifying=true}'}]
2023-04-15 11:58:40,963 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 11:58:40,993 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 11:58:40,993 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 11:58:40,994 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 11:58:40,994 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 11:58:40,994 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 11:58:41,010 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 47ms
2023-04-15 11:58:41,028 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=2, type=class java.lang.Long, identifying=true}'}] and the following status: [COMPLETED] in 81ms
2023-04-15 11:58:41,211 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 11:58:41,213 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@c83ed77] for TypeConfiguration
2023-04-15 11:58:41,213 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@551954f9] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@c83ed77]
2023-04-15 11:58:41,216 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 11:58:41,226 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 11:59:25,852 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 11:59:25,922 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 11:59:26,195 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 8488 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 11:59:26,196 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 11:59:26,668 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 11:59:26,670 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 11:59:26,686 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 12 ms. Found 0 JDBC repository interfaces.
2023-04-15 11:59:26,693 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 11:59:26,694 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 11:59:26,700 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 11:59:26,962 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 11:59:27,323 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6ac45c0c
2023-04-15 11:59:27,326 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 11:59:27,416 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 11:59:27,480 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 11:59:27,719 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 11:59:27,737 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 11:59:27,738 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 11:59:27,738 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 11:59:27,738 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 11:59:27,738 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 11:59:27,739 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 11:59:27,739 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 11:59:27,739 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 11:59:27,740 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 11:59:27,740 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 11:59:27,740 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 11:59:27,740 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 11:59:27,741 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 11:59:27,742 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 11:59:27,742 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 11:59:27,743 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 11:59:27,744 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 11:59:27,745 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 11:59:27,745 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 11:59:27,745 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 11:59:27,746 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 11:59:27,746 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 11:59:27,746 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 11:59:27,746 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 11:59:27,747 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 11:59:27,747 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 11:59:27,747 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 11:59:27,748 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 11:59:27,748 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 11:59:27,748 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 11:59:27,748 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 11:59:27,749 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 11:59:27,750 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 11:59:27,750 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 11:59:27,750 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 11:59:27,751 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 11:59:27,751 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 11:59:27,751 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 11:59:27,751 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 11:59:27,751 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 11:59:27,752 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 11:59:27,752 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 11:59:27,752 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 11:59:27,753 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 11:59:27,753 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 11:59:27,753 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 11:59:27,753 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 11:59:27,753 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 11:59:27,754 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 11:59:27,754 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 11:59:27,754 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 11:59:27,754 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 11:59:27,755 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 11:59:27,755 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 11:59:27,755 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 11:59:27,756 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 11:59:27,756 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 11:59:27,756 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 11:59:27,757 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 11:59:27,757 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 11:59:27,757 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 11:59:27,758 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 11:59:27,758 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 11:59:27,758 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 11:59:27,758 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 11:59:27,758 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 11:59:27,758 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 11:59:27,759 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 11:59:27,759 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 11:59:27,759 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 11:59:27,759 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 11:59:27,759 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 11:59:27,760 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 11:59:27,760 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 11:59:27,760 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 11:59:27,760 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 11:59:27,760 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 11:59:27,761 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 11:59:27,761 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 11:59:27,761 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 11:59:27,761 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 11:59:27,762 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 11:59:27,762 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 11:59:27,762 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 11:59:27,762 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 11:59:27,762 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 11:59:27,763 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 11:59:27,763 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 11:59:27,763 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 11:59:27,763 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 11:59:27,764 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 11:59:27,764 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 11:59:27,764 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 11:59:27,764 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 11:59:27,764 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 11:59:27,764 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 11:59:27,765 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 11:59:27,765 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 11:59:27,765 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 11:59:27,765 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 11:59:27,766 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 11:59:27,768 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 11:59:27,769 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 11:59:27,769 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 11:59:27,769 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 11:59:27,769 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 11:59:27,769 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 11:59:27,769 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 11:59:27,770 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 11:59:27,770 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 11:59:27,770 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 11:59:27,770 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 11:59:27,770 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 11:59:27,770 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 11:59:27,770 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@d85b399
2023-04-15 11:59:27,771 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@d85b399
2023-04-15 11:59:27,771 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@674aa626
2023-04-15 11:59:27,771 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@674aa626
2023-04-15 11:59:27,771 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@4dd1d2bb
2023-04-15 11:59:27,771 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@4dd1d2bb
2023-04-15 11:59:27,772 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@47198524
2023-04-15 11:59:27,778 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@2a5c6b76
2023-04-15 11:59:27,778 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@2a5c6b76
2023-04-15 11:59:27,780 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@6fced25c
2023-04-15 11:59:27,780 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@6fced25c
2023-04-15 11:59:27,780 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@69d2e517
2023-04-15 11:59:27,781 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 11:59:27,781 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 11:59:27,781 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 11:59:27,781 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 11:59:27,781 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 11:59:27,781 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 11:59:27,781 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 11:59:27,782 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 11:59:27,818 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 11:59:27,821 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 11:59:27,838 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2520aa05) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@26865b57)
2023-04-15 11:59:27,838 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@46894dc5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@596afb2f)
2023-04-15 11:59:27,838 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@79ba0285) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6df2a206)
2023-04-15 11:59:27,838 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@61993d18) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6f240187)
2023-04-15 11:59:27,839 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@46a388cc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3e39f08c)
2023-04-15 11:59:27,839 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@16e07bae) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@598778cc)
2023-04-15 11:59:27,839 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3386ed8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@727453a3)
2023-04-15 11:59:27,839 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@67dc6b48) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@57f2e67)
2023-04-15 11:59:27,839 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4571cebe) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@154864f8)
2023-04-15 11:59:27,840 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 11:59:27,842 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 11:59:27,842 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 11:59:27,843 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 11:59:27,844 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 11:59:27,847 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@144e36ae
2023-04-15 11:59:27,847 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@69d2e517`
2023-04-15 11:59:27,852 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 11:59:27,852 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 11:59:27,852 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 11:59:27,852 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 11:59:27,853 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 11:59:27,853 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 11:59:27,854 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@43b6cb1c] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@3bf5911d]
2023-04-15 11:59:28,114 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@43b6cb1c] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@78861d9e]
2023-04-15 11:59:28,446 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 11:59:28,454 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@78861d9e] for TypeConfiguration
2023-04-15 11:59:28,455 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 11:59:28,698 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 11:59:29,090 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 3.045 seconds (process running for 3.865)
2023-04-15 11:59:29,093 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 11:59:29,203 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=3, type=class java.lang.Long, identifying=true}'}]
2023-04-15 11:59:29,234 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 11:59:29,262 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 11:59:29,262 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 11:59:29,262 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 11:59:29,262 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 11:59:29,263 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 11:59:29,276 ERROR org.springframework.batch.core.step.AbstractStep [main] Encountered an error executing step step1 in job importUserJob
org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [INSERT INTO BATCH.policy (contractor_customer_code, effective_date, expire_date, insured_customer_code, policy_number, state) VALUES (?, ?, ?, ?, ?, ?)]; Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:103)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1538)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:667)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:691)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1034)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:373)
	at org.springframework.batch.item.database.JdbcBatchItemWriter.write(JdbcBatchItemWriter.java:190)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.writeItems(SimpleChunkProcessor.java:203)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.doWrite(SimpleChunkProcessor.java:170)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.write(SimpleChunkProcessor.java:297)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.process(SimpleChunkProcessor.java:227)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:75)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:389)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:313)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:256)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:362)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:206)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:139)
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:241)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:227)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:178)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:166)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:161)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:156)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:760)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.sql.BatchUpdateException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at com.mysql.cj.util.Util.handleNewInstance(Util.java:192)
	at com.mysql.cj.util.Util.getInstance(Util.java:167)
	at com.mysql.cj.util.Util.getInstance(Util.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLError.createBatchUpdateException(SQLError.java:224)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:816)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchInternal(ClientPreparedStatement.java:418)
	at com.mysql.cj.jdbc.StatementImpl.executeBatch(StatementImpl.java:795)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1047)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:651)
	... 114 common frames omitted
Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:795)
	... 120 common frames omitted
2023-04-15 11:59:29,281 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 46ms
2023-04-15 11:59:29,299 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=3, type=class java.lang.Long, identifying=true}'}] and the following status: [FAILED] in 82ms
2023-04-15 11:59:29,464 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 11:59:29,465 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@78861d9e] for TypeConfiguration
2023-04-15 11:59:29,465 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@6a684f38] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@78861d9e]
2023-04-15 11:59:29,470 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 11:59:29,482 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 12:01:20,801 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 12:01:20,867 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 12:01:21,141 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 14960 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 12:01:21,142 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 12:01:21,614 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:01:21,615 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 12:01:21,633 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 14 ms. Found 0 JDBC repository interfaces.
2023-04-15 12:01:21,639 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:01:21,641 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 12:01:21,646 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 1 ms. Found 0 JPA repository interfaces.
2023-04-15 12:01:21,914 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 12:01:22,257 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@342ee097
2023-04-15 12:01:22,259 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 12:01:22,341 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 12:01:22,384 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 12:01:22,628 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 12:01:22,641 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 12:01:22,642 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 12:01:22,642 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 12:01:22,643 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 12:01:22,643 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 12:01:22,643 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 12:01:22,643 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 12:01:22,643 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 12:01:22,643 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 12:01:22,644 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 12:01:22,644 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 12:01:22,644 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 12:01:22,645 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 12:01:22,645 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 12:01:22,645 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 12:01:22,646 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 12:01:22,646 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 12:01:22,646 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 12:01:22,646 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 12:01:22,647 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 12:01:22,647 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 12:01:22,647 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 12:01:22,647 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 12:01:22,649 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 12:01:22,649 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 12:01:22,652 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 12:01:22,652 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 12:01:22,653 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 12:01:22,653 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 12:01:22,653 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 12:01:22,653 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 12:01:22,654 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 12:01:22,654 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 12:01:22,654 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 12:01:22,654 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 12:01:22,654 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 12:01:22,656 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 12:01:22,656 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 12:01:22,656 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 12:01:22,656 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 12:01:22,656 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 12:01:22,656 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 12:01:22,656 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 12:01:22,657 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 12:01:22,657 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 12:01:22,658 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 12:01:22,658 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 12:01:22,658 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 12:01:22,658 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 12:01:22,658 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 12:01:22,658 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 12:01:22,658 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 12:01:22,658 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 12:01:22,659 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 12:01:22,659 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 12:01:22,659 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 12:01:22,659 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 12:01:22,659 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 12:01:22,659 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 12:01:22,660 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 12:01:22,660 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 12:01:22,660 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 12:01:22,660 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 12:01:22,660 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 12:01:22,660 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 12:01:22,660 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 12:01:22,660 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 12:01:22,662 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 12:01:22,662 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 12:01:22,662 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 12:01:22,662 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 12:01:22,662 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 12:01:22,663 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 12:01:22,663 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 12:01:22,663 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 12:01:22,663 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 12:01:22,663 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 12:01:22,664 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 12:01:22,664 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 12:01:22,664 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 12:01:22,664 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 12:01:22,664 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 12:01:22,664 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 12:01:22,664 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 12:01:22,665 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 12:01:22,665 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 12:01:22,665 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 12:01:22,665 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 12:01:22,665 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 12:01:22,665 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 12:01:22,665 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 12:01:22,665 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 12:01:22,665 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 12:01:22,665 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 12:01:22,667 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 12:01:22,667 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 12:01:22,667 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 12:01:22,667 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 12:01:22,667 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 12:01:22,667 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 12:01:22,667 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 12:01:22,668 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 12:01:22,668 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 12:01:22,668 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 12:01:22,668 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 12:01:22,669 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 12:01:22,669 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 12:01:22,669 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 12:01:22,669 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 12:01:22,669 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 12:01:22,669 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 12:01:22,669 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 12:01:22,670 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 12:01:22,670 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 12:01:22,670 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 12:01:22,670 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 12:01:22,670 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@d85b399
2023-04-15 12:01:22,671 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@d85b399
2023-04-15 12:01:22,671 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@674aa626
2023-04-15 12:01:22,671 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@674aa626
2023-04-15 12:01:22,671 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@4dd1d2bb
2023-04-15 12:01:22,678 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@7019d619
2023-04-15 12:01:22,678 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@7019d619
2023-04-15 12:01:22,681 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@4bbf20d1
2023-04-15 12:01:22,681 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@4bbf20d1
2023-04-15 12:01:22,682 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@31693a86
2023-04-15 12:01:22,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:01:22,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:01:22,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 12:01:22,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:01:22,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:01:22,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:01:22,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 12:01:22,684 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 12:01:22,732 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 12:01:22,734 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 12:01:22,753 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@43ab9ae9) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2520aa05)
2023-04-15 12:01:22,754 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@26865b57) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@46894dc5)
2023-04-15 12:01:22,754 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@596afb2f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@79ba0285)
2023-04-15 12:01:22,754 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6df2a206) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@61993d18)
2023-04-15 12:01:22,755 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6f240187) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@46a388cc)
2023-04-15 12:01:22,755 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3e39f08c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@16e07bae)
2023-04-15 12:01:22,755 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@598778cc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3386ed8)
2023-04-15 12:01:22,755 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@727453a3) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@67dc6b48)
2023-04-15 12:01:22,755 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@57f2e67) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4571cebe)
2023-04-15 12:01:22,757 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 12:01:22,758 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 12:01:22,758 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 12:01:22,759 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:01:22,759 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:01:22,762 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@7d7b4e04
2023-04-15 12:01:22,762 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@31693a86`
2023-04-15 12:01:22,767 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:01:22,767 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:01:22,767 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:01:22,767 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:01:22,768 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:01:22,768 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:01:22,769 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@35e689a0] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@43b6cb1c]
2023-04-15 12:01:23,010 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@35e689a0] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@257b3561]
2023-04-15 12:01:23,371 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 12:01:23,377 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@257b3561] for TypeConfiguration
2023-04-15 12:01:23,379 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:01:23,597 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 12:01:23,989 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 3.0 seconds (process running for 3.81)
2023-04-15 12:01:23,990 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 12:01:24,108 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=4, type=class java.lang.Long, identifying=true}'}]
2023-04-15 12:01:24,142 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 12:01:24,177 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:01:24,177 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:01:24,177 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:01:24,178 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:01:24,178 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:01:24,192 ERROR org.springframework.batch.core.step.AbstractStep [main] Encountered an error executing step step1 in job importUserJob
org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [INSERT INTO BATCH.policy (contractor_customer_code, effective_date, expire_date, insured_customer_code, policy_number, state) VALUES (?, ?, ?, ?, ?, ?)]; Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:103)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1538)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:667)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:691)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1034)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:373)
	at org.springframework.batch.item.database.JdbcBatchItemWriter.write(JdbcBatchItemWriter.java:190)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.writeItems(SimpleChunkProcessor.java:203)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.doWrite(SimpleChunkProcessor.java:170)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.write(SimpleChunkProcessor.java:297)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.process(SimpleChunkProcessor.java:227)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:75)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:389)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:313)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:256)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:362)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:206)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:139)
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:241)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:227)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:178)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:166)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:161)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:156)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:760)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.sql.BatchUpdateException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at com.mysql.cj.util.Util.handleNewInstance(Util.java:192)
	at com.mysql.cj.util.Util.getInstance(Util.java:167)
	at com.mysql.cj.util.Util.getInstance(Util.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLError.createBatchUpdateException(SQLError.java:224)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:816)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchInternal(ClientPreparedStatement.java:418)
	at com.mysql.cj.jdbc.StatementImpl.executeBatch(StatementImpl.java:795)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1047)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:651)
	... 114 common frames omitted
Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:795)
	... 120 common frames omitted
2023-04-15 12:01:24,197 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 53ms
2023-04-15 12:01:24,216 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=4, type=class java.lang.Long, identifying=true}'}] and the following status: [FAILED] in 94ms
2023-04-15 12:01:24,359 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:01:24,360 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@257b3561] for TypeConfiguration
2023-04-15 12:01:24,360 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@6a684f38] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@257b3561]
2023-04-15 12:01:24,362 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 12:01:24,373 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 12:08:43,503 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 12:08:43,582 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 12:08:43,870 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 10892 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 12:08:43,871 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 12:08:44,371 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:08:44,373 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 12:08:44,388 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 12 ms. Found 0 JDBC repository interfaces.
2023-04-15 12:08:44,395 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:08:44,396 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 12:08:44,402 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 12:08:44,683 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 12:08:45,049 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@342ee097
2023-04-15 12:08:45,052 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 12:08:45,136 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 12:08:45,196 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 12:08:45,443 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 12:08:45,459 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 12:08:45,460 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 12:08:45,460 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 12:08:45,460 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 12:08:45,460 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 12:08:45,461 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 12:08:45,461 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 12:08:45,461 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 12:08:45,461 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 12:08:45,461 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 12:08:45,461 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 12:08:45,462 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 12:08:45,462 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 12:08:45,462 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 12:08:45,464 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 12:08:45,464 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 12:08:45,464 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 12:08:45,464 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 12:08:45,464 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 12:08:45,465 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 12:08:45,465 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 12:08:45,465 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 12:08:45,465 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 12:08:45,466 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 12:08:45,466 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 12:08:45,466 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 12:08:45,466 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 12:08:45,466 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 12:08:45,466 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 12:08:45,467 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 12:08:45,467 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 12:08:45,467 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 12:08:45,467 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 12:08:45,467 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 12:08:45,468 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 12:08:45,468 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 12:08:45,469 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 12:08:45,469 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 12:08:45,469 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 12:08:45,469 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 12:08:45,469 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 12:08:45,469 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 12:08:45,470 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 12:08:45,470 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 12:08:45,470 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 12:08:45,470 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 12:08:45,470 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 12:08:45,471 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 12:08:45,471 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 12:08:45,471 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 12:08:45,471 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 12:08:45,471 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 12:08:45,472 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 12:08:45,472 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 12:08:45,472 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 12:08:45,472 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 12:08:45,472 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 12:08:45,472 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 12:08:45,472 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 12:08:45,472 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 12:08:45,474 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 12:08:45,474 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 12:08:45,474 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 12:08:45,474 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 12:08:45,474 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 12:08:45,475 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 12:08:45,475 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 12:08:45,475 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 12:08:45,475 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 12:08:45,475 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 12:08:45,475 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 12:08:45,475 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 12:08:45,476 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 12:08:45,476 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 12:08:45,476 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 12:08:45,477 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 12:08:45,478 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 12:08:45,478 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 12:08:45,478 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 12:08:45,478 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 12:08:45,479 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 12:08:45,479 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 12:08:45,479 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 12:08:45,480 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 12:08:45,480 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 12:08:45,480 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 12:08:45,480 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 12:08:45,480 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 12:08:45,481 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 12:08:45,481 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 12:08:45,481 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 12:08:45,481 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 12:08:45,481 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 12:08:45,482 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 12:08:45,482 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 12:08:45,482 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 12:08:45,482 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 12:08:45,482 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 12:08:45,483 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 12:08:45,483 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 12:08:45,483 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 12:08:45,483 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 12:08:45,483 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 12:08:45,484 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 12:08:45,484 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 12:08:45,484 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 12:08:45,484 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 12:08:45,484 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 12:08:45,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 12:08:45,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 12:08:45,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 12:08:45,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 12:08:45,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 12:08:45,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 12:08:45,486 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 12:08:45,486 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 12:08:45,486 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@d85b399
2023-04-15 12:08:45,486 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@d85b399
2023-04-15 12:08:45,486 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@674aa626
2023-04-15 12:08:45,486 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@674aa626
2023-04-15 12:08:45,487 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@4dd1d2bb
2023-04-15 12:08:45,494 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@7019d619
2023-04-15 12:08:45,495 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@7019d619
2023-04-15 12:08:45,496 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@4bbf20d1
2023-04-15 12:08:45,497 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@4bbf20d1
2023-04-15 12:08:45,499 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@31693a86
2023-04-15 12:08:45,499 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:08:45,500 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:08:45,500 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 12:08:45,500 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:08:45,500 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:08:45,500 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:08:45,500 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 12:08:45,501 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 12:08:45,545 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 12:08:45,547 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 12:08:45,562 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@43ab9ae9) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2520aa05)
2023-04-15 12:08:45,563 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@26865b57) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@46894dc5)
2023-04-15 12:08:45,563 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@596afb2f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@79ba0285)
2023-04-15 12:08:45,563 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6df2a206) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@61993d18)
2023-04-15 12:08:45,563 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6f240187) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@46a388cc)
2023-04-15 12:08:45,563 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3e39f08c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@16e07bae)
2023-04-15 12:08:45,564 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@598778cc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3386ed8)
2023-04-15 12:08:45,564 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@727453a3) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@67dc6b48)
2023-04-15 12:08:45,564 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@57f2e67) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4571cebe)
2023-04-15 12:08:45,565 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 12:08:45,565 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 12:08:45,565 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 12:08:45,567 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:08:45,568 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:08:45,571 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@7d7b4e04
2023-04-15 12:08:45,572 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@31693a86`
2023-04-15 12:08:45,577 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:08:45,577 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:08:45,578 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:08:45,578 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:08:45,578 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:08:45,578 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:08:45,579 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@35e689a0] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@43b6cb1c]
2023-04-15 12:08:45,842 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@35e689a0] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@257b3561]
2023-04-15 12:08:46,194 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 12:08:46,201 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@257b3561] for TypeConfiguration
2023-04-15 12:08:46,204 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:08:46,429 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 12:08:46,866 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 3.147 seconds (process running for 4.022)
2023-04-15 12:08:46,869 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 12:08:46,984 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=5, type=class java.lang.Long, identifying=true}'}]
2023-04-15 12:08:47,015 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 12:08:47,046 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:08:47,046 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:08:47,047 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:08:47,047 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:08:47,047 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:08:47,062 ERROR org.springframework.batch.core.step.AbstractStep [main] Encountered an error executing step step1 in job importUserJob
org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [INSERT INTO BATCH.policy (contractor_customer_code, effective_date, expire_date, insured_customer_code, policy_number, state) VALUES (?, ?, ?, ?, ?, ?)]; Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:103)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1538)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:667)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:691)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1034)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:373)
	at org.springframework.batch.item.database.JdbcBatchItemWriter.write(JdbcBatchItemWriter.java:190)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.writeItems(SimpleChunkProcessor.java:203)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.doWrite(SimpleChunkProcessor.java:170)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.write(SimpleChunkProcessor.java:297)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.process(SimpleChunkProcessor.java:227)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:75)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:389)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:313)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:256)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:362)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:206)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:139)
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:241)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:227)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:178)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:166)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:161)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:156)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:760)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.sql.BatchUpdateException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at com.mysql.cj.util.Util.handleNewInstance(Util.java:192)
	at com.mysql.cj.util.Util.getInstance(Util.java:167)
	at com.mysql.cj.util.Util.getInstance(Util.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLError.createBatchUpdateException(SQLError.java:224)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:816)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchInternal(ClientPreparedStatement.java:418)
	at com.mysql.cj.jdbc.StatementImpl.executeBatch(StatementImpl.java:795)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1047)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:651)
	... 114 common frames omitted
Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:795)
	... 120 common frames omitted
2023-04-15 12:08:47,066 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 51ms
2023-04-15 12:08:47,083 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=5, type=class java.lang.Long, identifying=true}'}] and the following status: [FAILED] in 85ms
2023-04-15 12:08:47,237 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:08:47,238 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@257b3561] for TypeConfiguration
2023-04-15 12:08:47,239 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@3f271e85] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@257b3561]
2023-04-15 12:08:47,241 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 12:08:47,249 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 12:09:49,937 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 12:09:50,015 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 12:09:50,287 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 17652 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 12:09:50,288 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 12:09:50,755 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:09:50,757 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 12:09:50,773 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 12 ms. Found 0 JDBC repository interfaces.
2023-04-15 12:09:50,781 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:09:50,782 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 12:09:50,788 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 12:09:51,065 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 12:09:51,444 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@476fde05
2023-04-15 12:09:51,445 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 12:09:51,531 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 12:09:51,585 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 12:09:51,854 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 12:09:51,865 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@7740b0ab
2023-04-15 12:09:51,866 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@7740b0ab
2023-04-15 12:09:51,866 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@7740b0ab
2023-04-15 12:09:51,866 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3eb9c575
2023-04-15 12:09:51,866 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3eb9c575
2023-04-15 12:09:51,866 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@3f322610
2023-04-15 12:09:51,866 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@3f322610
2023-04-15 12:09:51,867 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@1e477944
2023-04-15 12:09:51,867 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@1e477944
2023-04-15 12:09:51,868 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@6cf047cf
2023-04-15 12:09:51,868 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@6cf047cf
2023-04-15 12:09:51,868 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@6cf047cf
2023-04-15 12:09:51,868 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 12:09:51,868 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 12:09:51,869 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 12:09:51,869 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 12:09:51,869 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 12:09:51,869 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 12:09:51,870 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 12:09:51,870 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 12:09:51,870 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 12:09:51,870 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 12:09:51,870 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 12:09:51,871 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 12:09:51,871 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 12:09:51,871 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 12:09:51,871 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 12:09:51,871 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 12:09:51,871 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 12:09:51,871 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 12:09:51,871 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 12:09:51,873 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 12:09:51,873 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 12:09:51,873 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 12:09:51,873 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 12:09:51,873 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 12:09:51,874 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 12:09:51,874 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 12:09:51,874 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 12:09:51,874 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 12:09:51,874 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 12:09:51,874 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 12:09:51,875 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 12:09:51,875 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 12:09:51,875 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 12:09:51,875 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 12:09:51,875 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 12:09:51,875 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 12:09:51,876 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 12:09:51,876 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 12:09:51,879 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 12:09:51,880 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 12:09:51,880 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 12:09:51,880 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 12:09:51,880 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 12:09:51,880 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 12:09:51,880 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 12:09:51,882 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 12:09:51,882 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 12:09:51,882 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 12:09:51,882 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 12:09:51,882 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 12:09:51,882 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 12:09:51,883 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 12:09:51,883 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 12:09:51,883 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 12:09:51,883 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 12:09:51,883 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 12:09:51,884 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 12:09:51,884 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 12:09:51,884 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 12:09:51,884 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 12:09:51,884 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 12:09:51,885 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 12:09:51,885 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 12:09:51,885 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 12:09:51,885 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 12:09:51,885 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 12:09:51,885 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 12:09:51,885 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 12:09:51,885 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 12:09:51,886 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 12:09:51,886 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 12:09:51,886 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 12:09:51,886 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 12:09:51,886 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 12:09:51,887 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 12:09:51,888 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 12:09:51,888 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 12:09:51,888 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 12:09:51,888 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 12:09:51,888 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 12:09:51,888 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 12:09:51,889 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 12:09:51,889 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 12:09:51,889 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 12:09:51,889 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 12:09:51,889 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 12:09:51,889 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 12:09:51,889 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 12:09:51,889 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 12:09:51,889 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 12:09:51,890 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 12:09:51,890 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 12:09:51,890 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 12:09:51,890 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 12:09:51,891 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 12:09:51,891 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 12:09:51,893 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 12:09:51,893 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 12:09:51,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 12:09:51,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 12:09:51,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 12:09:51,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 12:09:51,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 12:09:51,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 12:09:51,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 12:09:51,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 12:09:51,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 12:09:51,895 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 12:09:51,895 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 12:09:51,899 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@1d7f2f0a
2023-04-15 12:09:51,899 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@1d7f2f0a
2023-04-15 12:09:51,901 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@370225c7
2023-04-15 12:09:51,902 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@370225c7
2023-04-15 12:09:51,903 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@305aaedf
2023-04-15 12:09:51,903 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@2a425cf5
2023-04-15 12:09:51,903 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@17d76ebb
2023-04-15 12:09:51,903 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@40b31a16
2023-04-15 12:09:51,903 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@25fa6889
2023-04-15 12:09:51,904 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@1de73d37
2023-04-15 12:09:51,904 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@31693a86
2023-04-15 12:09:51,904 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:09:51,904 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:09:51,944 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 12:09:51,945 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 12:09:51,962 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@d8e4250) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@100807ca)
2023-04-15 12:09:51,963 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@c67395) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5fc7255c)
2023-04-15 12:09:51,963 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@20a47036) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@70c205bf)
2023-04-15 12:09:51,963 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@43ab9ae9) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2520aa05)
2023-04-15 12:09:51,963 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@26865b57) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@46894dc5)
2023-04-15 12:09:51,963 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@596afb2f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@79ba0285)
2023-04-15 12:09:51,965 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6df2a206) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@61993d18)
2023-04-15 12:09:51,965 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6f240187) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@46a388cc)
2023-04-15 12:09:51,965 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3e39f08c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@16e07bae)
2023-04-15 12:09:51,966 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 12:09:51,966 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 12:09:51,966 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 12:09:51,967 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:09:51,967 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:09:51,970 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@4d825dbe
2023-04-15 12:09:51,970 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@305aaedf`
2023-04-15 12:09:51,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:09:51,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:09:51,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:09:51,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:09:51,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:09:51,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:09:51,977 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1de08775] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@2dbf2da]
2023-04-15 12:09:52,275 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1de08775] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@409395b9]
2023-04-15 12:09:52,627 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 12:09:52,633 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@409395b9] for TypeConfiguration
2023-04-15 12:09:52,635 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:09:52,871 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 12:09:53,242 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 3.107 seconds (process running for 3.977)
2023-04-15 12:09:53,245 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 12:09:53,354 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=6, type=class java.lang.Long, identifying=true}'}]
2023-04-15 12:09:53,389 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 12:09:53,419 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:09:53,420 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:09:53,420 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:09:53,421 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:09:53,421 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:09:53,434 ERROR org.springframework.batch.core.step.AbstractStep [main] Encountered an error executing step step1 in job importUserJob
org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [INSERT INTO BATCH.policy (contractor_customer_code, effective_date, expire_date, insured_customer_code, policy_number, state) VALUES (?, ?, ?, ?, ?, ?)]; Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:103)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1538)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:667)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:691)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1034)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:373)
	at org.springframework.batch.item.database.JdbcBatchItemWriter.write(JdbcBatchItemWriter.java:190)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.writeItems(SimpleChunkProcessor.java:203)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.doWrite(SimpleChunkProcessor.java:170)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.write(SimpleChunkProcessor.java:297)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.process(SimpleChunkProcessor.java:227)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:75)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:389)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:313)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:256)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:362)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:206)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:139)
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:241)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:227)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:178)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:166)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:161)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:156)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:760)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.sql.BatchUpdateException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at com.mysql.cj.util.Util.handleNewInstance(Util.java:192)
	at com.mysql.cj.util.Util.getInstance(Util.java:167)
	at com.mysql.cj.util.Util.getInstance(Util.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLError.createBatchUpdateException(SQLError.java:224)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:816)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchInternal(ClientPreparedStatement.java:418)
	at com.mysql.cj.jdbc.StatementImpl.executeBatch(StatementImpl.java:795)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1047)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:651)
	... 114 common frames omitted
Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:795)
	... 120 common frames omitted
2023-04-15 12:09:53,440 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 49ms
2023-04-15 12:09:53,461 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=6, type=class java.lang.Long, identifying=true}'}] and the following status: [FAILED] in 89ms
2023-04-15 12:09:53,610 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:09:53,611 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@409395b9] for TypeConfiguration
2023-04-15 12:09:53,612 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@56d92cc0] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@409395b9]
2023-04-15 12:09:53,614 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 12:09:53,625 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 12:17:10,290 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 12:17:10,354 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 12:17:10,640 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 15504 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 12:17:10,641 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 12:17:11,155 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:17:11,158 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 12:17:11,172 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 11 ms. Found 0 JDBC repository interfaces.
2023-04-15 12:17:11,180 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:17:11,182 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 12:17:11,187 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 12:17:11,515 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 12:17:11,943 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@342ee097
2023-04-15 12:17:11,945 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 12:17:12,062 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 12:17:12,140 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 12:17:12,412 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 12:17:12,425 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 12:17:12,425 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 12:17:12,425 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 12:17:12,426 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 12:17:12,426 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 12:17:12,426 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 12:17:12,426 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 12:17:12,427 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 12:17:12,427 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 12:17:12,428 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 12:17:12,429 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 12:17:12,430 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 12:17:12,430 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 12:17:12,430 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 12:17:12,431 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 12:17:12,431 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 12:17:12,431 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 12:17:12,431 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 12:17:12,432 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 12:17:12,432 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 12:17:12,433 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 12:17:12,433 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 12:17:12,433 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 12:17:12,433 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 12:17:12,433 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 12:17:12,434 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 12:17:12,434 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 12:17:12,434 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 12:17:12,434 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 12:17:12,435 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 12:17:12,435 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 12:17:12,435 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 12:17:12,435 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 12:17:12,436 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 12:17:12,436 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 12:17:12,436 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 12:17:12,436 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 12:17:12,436 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 12:17:12,437 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 12:17:12,438 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 12:17:12,438 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 12:17:12,438 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 12:17:12,438 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 12:17:12,439 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 12:17:12,439 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 12:17:12,439 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 12:17:12,439 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 12:17:12,439 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 12:17:12,440 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 12:17:12,440 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 12:17:12,440 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 12:17:12,440 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 12:17:12,441 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 12:17:12,441 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 12:17:12,441 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 12:17:12,441 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 12:17:12,442 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 12:17:12,442 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 12:17:12,442 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 12:17:12,442 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 12:17:12,443 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 12:17:12,443 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 12:17:12,444 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 12:17:12,444 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 12:17:12,444 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 12:17:12,444 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 12:17:12,444 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 12:17:12,445 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 12:17:12,445 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 12:17:12,445 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 12:17:12,445 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 12:17:12,445 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 12:17:12,446 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 12:17:12,446 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 12:17:12,446 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 12:17:12,446 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 12:17:12,446 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 12:17:12,446 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 12:17:12,446 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 12:17:12,447 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 12:17:12,447 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 12:17:12,448 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 12:17:12,448 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 12:17:12,448 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 12:17:12,448 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 12:17:12,448 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 12:17:12,449 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 12:17:12,449 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 12:17:12,449 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 12:17:12,449 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 12:17:12,449 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 12:17:12,449 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 12:17:12,453 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 12:17:12,454 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 12:17:12,454 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 12:17:12,454 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 12:17:12,454 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 12:17:12,455 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 12:17:12,455 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 12:17:12,455 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 12:17:12,455 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 12:17:12,455 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 12:17:12,456 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 12:17:12,456 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 12:17:12,456 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 12:17:12,456 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 12:17:12,456 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 12:17:12,456 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 12:17:12,457 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 12:17:12,457 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 12:17:12,458 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 12:17:12,458 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 12:17:12,458 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 12:17:12,458 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 12:17:12,458 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 12:17:12,459 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 12:17:12,459 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@d85b399
2023-04-15 12:17:12,459 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@d85b399
2023-04-15 12:17:12,459 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@674aa626
2023-04-15 12:17:12,459 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@674aa626
2023-04-15 12:17:12,459 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@4dd1d2bb
2023-04-15 12:17:12,466 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@7019d619
2023-04-15 12:17:12,467 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@7019d619
2023-04-15 12:17:12,468 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@4bbf20d1
2023-04-15 12:17:12,468 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@4bbf20d1
2023-04-15 12:17:12,469 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@31693a86
2023-04-15 12:17:12,470 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:17:12,470 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:17:12,470 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 12:17:12,470 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:17:12,470 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:17:12,470 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:17:12,471 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 12:17:12,471 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 12:17:12,524 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 12:17:12,525 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 12:17:12,548 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@43ab9ae9) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2520aa05)
2023-04-15 12:17:12,549 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@26865b57) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@46894dc5)
2023-04-15 12:17:12,549 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@596afb2f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@79ba0285)
2023-04-15 12:17:12,549 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6df2a206) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@61993d18)
2023-04-15 12:17:12,549 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6f240187) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@46a388cc)
2023-04-15 12:17:12,550 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3e39f08c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@16e07bae)
2023-04-15 12:17:12,550 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@598778cc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3386ed8)
2023-04-15 12:17:12,550 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@727453a3) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@67dc6b48)
2023-04-15 12:17:12,551 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@57f2e67) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4571cebe)
2023-04-15 12:17:12,553 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 12:17:12,553 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 12:17:12,553 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 12:17:12,555 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:17:12,555 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:17:12,558 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@7d7b4e04
2023-04-15 12:17:12,558 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@31693a86`
2023-04-15 12:17:12,563 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:17:12,564 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:17:12,564 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:17:12,564 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:17:12,564 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:17:12,564 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:17:12,566 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@35e689a0] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@43b6cb1c]
2023-04-15 12:17:12,810 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@35e689a0] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@257b3561]
2023-04-15 12:17:13,207 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 12:17:13,215 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@257b3561] for TypeConfiguration
2023-04-15 12:17:13,216 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:17:13,485 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 12:17:13,908 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 3.425 seconds (process running for 4.26)
2023-04-15 12:17:13,910 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 12:17:14,045 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=7, type=class java.lang.Long, identifying=true}'}]
2023-04-15 12:17:14,085 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 12:17:14,127 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:17:14,127 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:17:14,127 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:17:14,128 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:17:14,128 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:17:14,147 ERROR org.springframework.batch.core.step.AbstractStep [main] Encountered an error executing step step1 in job importUserJob
org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [INSERT INTO BATCH.policy (contractor_customer_code, effective_date, expire_date, insured_customer_code, policy_number, state) VALUES (?, ?, ?, ?, ?, ?)]; Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:103)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1538)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:667)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:691)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1034)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:373)
	at org.springframework.batch.item.database.JdbcBatchItemWriter.write(JdbcBatchItemWriter.java:190)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.writeItems(SimpleChunkProcessor.java:203)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.doWrite(SimpleChunkProcessor.java:170)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.write(SimpleChunkProcessor.java:297)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.process(SimpleChunkProcessor.java:227)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:75)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:389)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:313)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:256)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:362)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:206)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:139)
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:241)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:227)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:178)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:166)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:161)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:156)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:760)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.sql.BatchUpdateException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at com.mysql.cj.util.Util.handleNewInstance(Util.java:192)
	at com.mysql.cj.util.Util.getInstance(Util.java:167)
	at com.mysql.cj.util.Util.getInstance(Util.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLError.createBatchUpdateException(SQLError.java:224)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:816)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchInternal(ClientPreparedStatement.java:418)
	at com.mysql.cj.jdbc.StatementImpl.executeBatch(StatementImpl.java:795)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1047)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:651)
	... 114 common frames omitted
Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:795)
	... 120 common frames omitted
2023-04-15 12:17:14,153 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 66ms
2023-04-15 12:17:14,175 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=7, type=class java.lang.Long, identifying=true}'}] and the following status: [FAILED] in 112ms
2023-04-15 12:17:14,360 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:17:14,361 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@257b3561] for TypeConfiguration
2023-04-15 12:17:14,361 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@2fbf7ea4] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@257b3561]
2023-04-15 12:17:14,364 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 12:17:14,374 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 12:20:09,844 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 12:20:09,908 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 12:20:10,180 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 4900 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 12:20:10,181 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 12:20:10,663 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:20:10,664 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 12:20:10,679 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 11 ms. Found 0 JDBC repository interfaces.
2023-04-15 12:20:10,686 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:20:10,687 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 12:20:10,693 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 12:20:10,941 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 12:20:11,343 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6b70d1fb
2023-04-15 12:20:11,345 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 12:20:11,426 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 12:20:11,470 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 12:20:11,708 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 12:20:11,718 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 12:20:11,719 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 12:20:11,719 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 12:20:11,719 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 12:20:11,720 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 12:20:11,720 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 12:20:11,720 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 12:20:11,720 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 12:20:11,720 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 12:20:11,722 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 12:20:11,722 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 12:20:11,722 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 12:20:11,723 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 12:20:11,723 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 12:20:11,723 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 12:20:11,724 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 12:20:11,724 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 12:20:11,724 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 12:20:11,724 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 12:20:11,725 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 12:20:11,725 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 12:20:11,725 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 12:20:11,725 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 12:20:11,725 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 12:20:11,725 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 12:20:11,725 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 12:20:11,726 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 12:20:11,726 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 12:20:11,726 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 12:20:11,726 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 12:20:11,727 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 12:20:11,731 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 12:20:11,731 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 12:20:11,731 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 12:20:11,731 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 12:20:11,731 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 12:20:11,731 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 12:20:11,732 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 12:20:11,732 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 12:20:11,732 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 12:20:11,732 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 12:20:11,732 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 12:20:11,733 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 12:20:11,733 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 12:20:11,733 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 12:20:11,733 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 12:20:11,733 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 12:20:11,735 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 12:20:11,735 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 12:20:11,736 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 12:20:11,736 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 12:20:11,736 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 12:20:11,736 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 12:20:11,737 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 12:20:11,737 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 12:20:11,737 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 12:20:11,737 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 12:20:11,737 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 12:20:11,738 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 12:20:11,738 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 12:20:11,738 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 12:20:11,738 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 12:20:11,739 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 12:20:11,739 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 12:20:11,739 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 12:20:11,739 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 12:20:11,739 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 12:20:11,740 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 12:20:11,740 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 12:20:11,740 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 12:20:11,740 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 12:20:11,740 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 12:20:11,740 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 12:20:11,740 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 12:20:11,741 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 12:20:11,741 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 12:20:11,741 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 12:20:11,742 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 12:20:11,742 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 12:20:11,742 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 12:20:11,743 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 12:20:11,743 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 12:20:11,743 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 12:20:11,744 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 12:20:11,744 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 12:20:11,744 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 12:20:11,744 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 12:20:11,744 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 12:20:11,745 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 12:20:11,745 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 12:20:11,745 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 12:20:11,745 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 12:20:11,745 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 12:20:11,745 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 12:20:11,745 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 12:20:11,745 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 12:20:11,747 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 12:20:11,747 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 12:20:11,747 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 12:20:11,747 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 12:20:11,748 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 12:20:11,748 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 12:20:11,748 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 12:20:11,748 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 12:20:11,748 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 12:20:11,748 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 12:20:11,749 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 12:20:11,749 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 12:20:11,749 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 12:20:11,749 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 12:20:11,749 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 12:20:11,750 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 12:20:11,750 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 12:20:11,750 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 12:20:11,750 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@d85b399
2023-04-15 12:20:11,751 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@d85b399
2023-04-15 12:20:11,751 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@674aa626
2023-04-15 12:20:11,751 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@674aa626
2023-04-15 12:20:11,751 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@4dd1d2bb
2023-04-15 12:20:11,751 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@4dd1d2bb
2023-04-15 12:20:11,752 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@47198524
2023-04-15 12:20:11,758 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@2a5c6b76
2023-04-15 12:20:11,759 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@2a5c6b76
2023-04-15 12:20:11,761 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@6fced25c
2023-04-15 12:20:11,761 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@6fced25c
2023-04-15 12:20:11,762 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@69d2e517
2023-04-15 12:20:11,762 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:20:11,762 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 12:20:11,763 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:20:11,763 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:20:11,763 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:20:11,763 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 12:20:11,763 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 12:20:11,763 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:20:11,810 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 12:20:11,811 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 12:20:11,825 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2520aa05) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@26865b57)
2023-04-15 12:20:11,826 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@46894dc5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@596afb2f)
2023-04-15 12:20:11,826 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@79ba0285) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6df2a206)
2023-04-15 12:20:11,826 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@61993d18) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6f240187)
2023-04-15 12:20:11,826 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@46a388cc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3e39f08c)
2023-04-15 12:20:11,826 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@16e07bae) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@598778cc)
2023-04-15 12:20:11,826 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3386ed8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@727453a3)
2023-04-15 12:20:11,827 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@67dc6b48) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@57f2e67)
2023-04-15 12:20:11,827 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4571cebe) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@154864f8)
2023-04-15 12:20:11,829 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 12:20:11,830 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 12:20:11,830 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 12:20:11,832 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:20:11,832 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:20:11,834 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@144e36ae
2023-04-15 12:20:11,835 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@69d2e517`
2023-04-15 12:20:11,839 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:20:11,839 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:20:11,840 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:20:11,840 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:20:11,840 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:20:11,840 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:20:11,842 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@43b6cb1c] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@3bf5911d]
2023-04-15 12:20:12,065 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@43b6cb1c] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@78861d9e]
2023-04-15 12:20:12,413 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 12:20:12,420 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@78861d9e] for TypeConfiguration
2023-04-15 12:20:12,422 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:20:12,501 WARN org.springframework.web.context.support.GenericWebApplicationContext [main] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'batchController': Unsatisfied dependency expressed through field 'importUserJob': Error creating bean with name 'importUserJob' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'importUserJob' parameter 2: Error creating bean with name 'step1' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'step1' parameter 2: No qualifying bean of type 'org.springframework.batch.item.database.JdbcBatchItemWriter<com.yuripe.batchType0A.batchprocessing.Model.InsurancePolicy>' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
2023-04-15 12:20:12,501 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:20:12,502 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@78861d9e] for TypeConfiguration
2023-04-15 12:20:12,502 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@6219006a] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@78861d9e]
2023-04-15 12:20:12,505 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown initiated...
2023-04-15 12:20:12,513 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown completed.
2023-04-15 12:20:12,520 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLogger [main] 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2023-04-15 12:20:12,536 ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter [main] 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 2 of method step1 in com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration required a bean of type 'org.springframework.batch.item.database.JdbcBatchItemWriter' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'org.springframework.batch.item.database.JdbcBatchItemWriter' in your configuration.

2023-04-15 12:20:12,542 ERROR org.springframework.test.context.TestContextManager [main] Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener] to prepare test instance [com.yuripe.batchType0A.BatchType0AApplicationTests@584fb03d]
java.lang.IllegalStateException: Failed to load ApplicationContext for [WebMergedContextConfiguration@6a4f7c17 testClass = com.yuripe.batchType0A.BatchType0AApplicationTests, locations = [], classes = [com.yuripe.batchType0A.BatchType0AApplication], contextInitializerClasses = [], activeProfiles = [], propertySourceLocations = [], propertySourceProperties = ["org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5e81e5ac, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@6035b93b, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@4c398c80, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@9da1, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@4febb875, org.springframework.boot.test.context.SpringBootTestAnnotation@26acbb8b], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:142)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'batchController': Unsatisfied dependency expressed through field 'importUserJob': Error creating bean with name 'importUserJob' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'importUserJob' parameter 2: Error creating bean with name 'step1' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'step1' parameter 2: No qualifying bean of type 'org.springframework.batch.item.database.JdbcBatchItemWriter<com.yuripe.batchType0A.batchprocessing.Model.InsurancePolicy>' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:713)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:693)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:133)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:482)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1416)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:597)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:917)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:310)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	... 67 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'importUserJob' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'importUserJob' parameter 2: Error creating bean with name 'step1' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'step1' parameter 2: No qualifying bean of type 'org.springframework.batch.item.database.JdbcBatchItemWriter<com.yuripe.batchType0A.batchprocessing.Model.InsurancePolicy>' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:548)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1417)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1337)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:710)
	... 92 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'step1' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'step1' parameter 2: No qualifying bean of type 'org.springframework.batch.item.database.JdbcBatchItemWriter<com.yuripe.batchType0A.batchprocessing.Model.InsurancePolicy>' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:548)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1417)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1337)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:885)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	... 105 common frames omitted
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.batch.item.database.JdbcBatchItemWriter<com.yuripe.batchType0A.batchprocessing.Model.InsurancePolicy>' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1824)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1383)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1337)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:885)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	... 119 common frames omitted
2023-04-15 12:20:35,053 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 12:20:35,119 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 12:20:35,395 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 15420 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 12:20:35,396 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 12:20:35,870 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:20:35,871 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 12:20:35,888 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 12 ms. Found 0 JDBC repository interfaces.
2023-04-15 12:20:35,895 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:20:35,895 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 12:20:35,900 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 12:20:36,163 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 12:20:36,562 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@476fde05
2023-04-15 12:20:36,564 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 12:20:36,654 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 12:20:36,708 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 12:20:36,947 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 12:20:36,959 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@30af23fd
2023-04-15 12:20:36,959 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@30af23fd
2023-04-15 12:20:36,959 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@30af23fd
2023-04-15 12:20:36,960 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@65fc8edc
2023-04-15 12:20:36,960 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@65fc8edc
2023-04-15 12:20:36,960 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@a357c3e
2023-04-15 12:20:36,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@a357c3e
2023-04-15 12:20:36,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@7740b0ab
2023-04-15 12:20:36,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@7740b0ab
2023-04-15 12:20:36,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@3eb9c575
2023-04-15 12:20:36,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@3eb9c575
2023-04-15 12:20:36,962 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@3eb9c575
2023-04-15 12:20:36,962 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@3f322610
2023-04-15 12:20:36,963 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@3f322610
2023-04-15 12:20:36,963 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@3f322610
2023-04-15 12:20:36,963 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 12:20:36,963 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 12:20:36,963 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 12:20:36,963 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 12:20:36,964 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 12:20:36,964 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 12:20:36,964 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 12:20:36,964 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 12:20:36,964 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 12:20:36,965 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 12:20:36,965 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 12:20:36,965 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 12:20:36,965 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 12:20:36,966 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 12:20:36,966 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 12:20:36,966 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 12:20:36,966 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 12:20:36,967 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 12:20:36,967 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 12:20:36,967 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 12:20:36,967 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 12:20:36,967 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 12:20:36,967 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 12:20:36,969 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 12:20:36,969 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 12:20:36,969 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 12:20:36,970 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 12:20:36,970 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 12:20:36,970 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 12:20:36,970 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 12:20:36,970 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 12:20:36,970 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 12:20:36,970 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 12:20:36,971 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 12:20:36,971 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 12:20:36,971 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 12:20:36,971 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 12:20:36,971 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 12:20:36,971 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 12:20:36,972 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 12:20:36,972 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 12:20:36,972 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 12:20:36,972 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 12:20:36,972 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 12:20:36,972 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 12:20:36,972 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 12:20:36,973 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 12:20:36,973 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 12:20:36,973 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 12:20:36,973 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 12:20:36,973 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 12:20:36,973 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 12:20:36,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 12:20:36,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 12:20:36,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 12:20:36,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 12:20:36,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 12:20:36,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 12:20:36,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 12:20:36,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 12:20:36,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 12:20:36,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 12:20:36,976 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 12:20:36,976 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 12:20:36,977 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 12:20:36,977 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 12:20:36,977 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 12:20:36,977 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 12:20:36,977 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 12:20:36,977 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 12:20:36,977 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 12:20:36,977 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 12:20:36,978 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 12:20:36,981 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 12:20:36,982 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 12:20:36,982 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 12:20:36,982 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 12:20:36,982 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 12:20:36,982 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 12:20:36,982 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 12:20:36,982 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 12:20:36,982 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 12:20:36,982 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 12:20:36,984 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 12:20:36,984 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 12:20:36,984 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 12:20:36,984 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 12:20:36,984 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 12:20:36,984 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 12:20:36,984 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 12:20:36,985 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 12:20:36,985 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 12:20:36,985 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 12:20:36,985 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 12:20:36,985 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 12:20:36,985 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 12:20:36,985 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 12:20:36,985 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 12:20:36,985 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 12:20:36,986 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 12:20:36,986 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 12:20:36,986 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 12:20:36,986 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 12:20:36,986 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 12:20:36,986 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 12:20:36,987 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 12:20:36,992 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@55638165
2023-04-15 12:20:36,992 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@55638165
2023-04-15 12:20:36,993 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@e97f115
2023-04-15 12:20:36,994 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@e97f115
2023-04-15 12:20:36,995 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@3cf4dec7
2023-04-15 12:20:36,995 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1b94c789
2023-04-15 12:20:36,995 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@299fc582
2023-04-15 12:20:36,995 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@305aaedf
2023-04-15 12:20:36,995 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@2a425cf5
2023-04-15 12:20:36,995 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@17d76ebb
2023-04-15 12:20:36,995 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@40b31a16
2023-04-15 12:20:36,995 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@25fa6889
2023-04-15 12:20:36,995 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@1de73d37
2023-04-15 12:20:37,037 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 12:20:37,039 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 12:20:37,053 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1e606f64) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@581918f6)
2023-04-15 12:20:37,053 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1958c0d9) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@d8e4250)
2023-04-15 12:20:37,053 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@100807ca) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@c67395)
2023-04-15 12:20:37,053 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5fc7255c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@20a47036)
2023-04-15 12:20:37,054 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@70c205bf) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@43ab9ae9)
2023-04-15 12:20:37,054 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2520aa05) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@26865b57)
2023-04-15 12:20:37,054 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@46894dc5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@596afb2f)
2023-04-15 12:20:37,054 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@79ba0285) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6df2a206)
2023-04-15 12:20:37,054 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@61993d18) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6f240187)
2023-04-15 12:20:37,056 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 12:20:37,056 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 12:20:37,057 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 12:20:37,059 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:20:37,059 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:20:37,061 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@3e2c4d4b
2023-04-15 12:20:37,061 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@3cf4dec7`
2023-04-15 12:20:37,065 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:20:37,066 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:20:37,066 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:20:37,067 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:20:37,067 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:20:37,067 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:20:37,069 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@2976ca51] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@6b091a92]
2023-04-15 12:20:37,306 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@2976ca51] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@c83ed77]
2023-04-15 12:20:37,622 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 12:20:37,629 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@c83ed77] for TypeConfiguration
2023-04-15 12:20:37,630 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:20:37,857 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 12:20:38,272 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 3.027 seconds (process running for 3.849)
2023-04-15 12:20:38,274 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 12:20:38,383 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=8, type=class java.lang.Long, identifying=true}'}]
2023-04-15 12:20:38,419 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 12:20:38,449 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:20:38,450 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:20:38,450 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:20:38,450 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:20:38,451 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:20:38,464 ERROR org.springframework.batch.core.step.AbstractStep [main] Encountered an error executing step step1 in job importUserJob
org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [INSERT INTO BATCH.policy (contractor_customer_code, effective_date, expire_date, insured_customer_code, policy_number, state) VALUES (?, ?, ?, ?, ?, ?)]; Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:103)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1538)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:667)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:691)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1034)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:373)
	at org.springframework.batch.item.database.JdbcBatchItemWriter.write(JdbcBatchItemWriter.java:190)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.writeItems(SimpleChunkProcessor.java:203)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.doWrite(SimpleChunkProcessor.java:170)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.write(SimpleChunkProcessor.java:297)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.process(SimpleChunkProcessor.java:227)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:75)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:389)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:313)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:256)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:362)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:206)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:139)
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:241)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:227)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:178)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:166)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:161)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:156)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:760)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.sql.BatchUpdateException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at com.mysql.cj.util.Util.handleNewInstance(Util.java:192)
	at com.mysql.cj.util.Util.getInstance(Util.java:167)
	at com.mysql.cj.util.Util.getInstance(Util.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLError.createBatchUpdateException(SQLError.java:224)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:816)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchInternal(ClientPreparedStatement.java:418)
	at com.mysql.cj.jdbc.StatementImpl.executeBatch(StatementImpl.java:795)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1047)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:651)
	... 114 common frames omitted
Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:795)
	... 120 common frames omitted
2023-04-15 12:20:38,469 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 49ms
2023-04-15 12:20:38,488 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=8, type=class java.lang.Long, identifying=true}'}] and the following status: [FAILED] in 88ms
2023-04-15 12:20:38,657 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:20:38,658 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@c83ed77] for TypeConfiguration
2023-04-15 12:20:38,659 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@5306ce5] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@c83ed77]
2023-04-15 12:20:38,662 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 12:20:38,671 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 12:23:28,970 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 12:23:29,047 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 12:23:29,322 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 17424 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 12:23:29,323 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 12:23:29,851 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:23:29,853 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 12:23:29,871 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 14 ms. Found 0 JDBC repository interfaces.
2023-04-15 12:23:29,881 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:23:29,882 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 12:23:29,889 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 12:23:30,153 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 12:23:30,540 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@342ee097
2023-04-15 12:23:30,542 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 12:23:30,632 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 12:23:30,687 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 12:23:30,944 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 12:23:30,957 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 12:23:30,957 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 12:23:30,958 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 12:23:30,958 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 12:23:30,958 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 12:23:30,958 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 12:23:30,959 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 12:23:30,959 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 12:23:30,959 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 12:23:30,959 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 12:23:30,959 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 12:23:30,960 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 12:23:30,960 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 12:23:30,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 12:23:30,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 12:23:30,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 12:23:30,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 12:23:30,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 12:23:30,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 12:23:30,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 12:23:30,963 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 12:23:30,963 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 12:23:30,963 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 12:23:30,963 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 12:23:30,963 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 12:23:30,963 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 12:23:30,963 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 12:23:30,964 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 12:23:30,964 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 12:23:30,964 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 12:23:30,964 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 12:23:30,965 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 12:23:30,965 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 12:23:30,965 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 12:23:30,965 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 12:23:30,965 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 12:23:30,966 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 12:23:30,966 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 12:23:30,966 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 12:23:30,967 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 12:23:30,967 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 12:23:30,967 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 12:23:30,967 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 12:23:30,968 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 12:23:30,968 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 12:23:30,968 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 12:23:30,968 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 12:23:30,968 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 12:23:30,968 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 12:23:30,968 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 12:23:30,968 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 12:23:30,970 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 12:23:30,970 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 12:23:30,970 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 12:23:30,970 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 12:23:30,970 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 12:23:30,970 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 12:23:30,970 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 12:23:30,971 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 12:23:30,971 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 12:23:30,971 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 12:23:30,971 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 12:23:30,971 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 12:23:30,971 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 12:23:30,971 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 12:23:30,971 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 12:23:30,971 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 12:23:30,972 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 12:23:30,972 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 12:23:30,972 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 12:23:30,972 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 12:23:30,972 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 12:23:30,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 12:23:30,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 12:23:30,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 12:23:30,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 12:23:30,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 12:23:30,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 12:23:30,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 12:23:30,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 12:23:30,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 12:23:30,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 12:23:30,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 12:23:30,976 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 12:23:30,976 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 12:23:30,976 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 12:23:30,976 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 12:23:30,976 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 12:23:30,976 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 12:23:30,976 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 12:23:30,977 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 12:23:30,977 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 12:23:30,978 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 12:23:30,978 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 12:23:30,978 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 12:23:30,978 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 12:23:30,978 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 12:23:30,979 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 12:23:30,979 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 12:23:30,979 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 12:23:30,979 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 12:23:30,979 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 12:23:30,980 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 12:23:30,980 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 12:23:30,980 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 12:23:30,980 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 12:23:30,980 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 12:23:30,980 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 12:23:30,980 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 12:23:30,981 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 12:23:30,981 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 12:23:30,981 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 12:23:30,981 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 12:23:30,981 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 12:23:30,981 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 12:23:30,982 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 12:23:30,982 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@d85b399
2023-04-15 12:23:30,982 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@d85b399
2023-04-15 12:23:30,982 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@674aa626
2023-04-15 12:23:30,982 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@674aa626
2023-04-15 12:23:30,982 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@4dd1d2bb
2023-04-15 12:23:30,988 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@7019d619
2023-04-15 12:23:30,989 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@7019d619
2023-04-15 12:23:30,990 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@4bbf20d1
2023-04-15 12:23:30,991 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@4bbf20d1
2023-04-15 12:23:30,991 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@31693a86
2023-04-15 12:23:30,993 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:23:30,993 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:23:30,993 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 12:23:30,993 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:23:30,993 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:23:30,994 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:23:30,994 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 12:23:30,994 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 12:23:31,031 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 12:23:31,033 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 12:23:31,046 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@43ab9ae9) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2520aa05)
2023-04-15 12:23:31,047 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@26865b57) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@46894dc5)
2023-04-15 12:23:31,047 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@596afb2f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@79ba0285)
2023-04-15 12:23:31,047 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6df2a206) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@61993d18)
2023-04-15 12:23:31,047 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6f240187) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@46a388cc)
2023-04-15 12:23:31,048 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3e39f08c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@16e07bae)
2023-04-15 12:23:31,048 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@598778cc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3386ed8)
2023-04-15 12:23:31,048 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@727453a3) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@67dc6b48)
2023-04-15 12:23:31,048 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@57f2e67) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4571cebe)
2023-04-15 12:23:31,051 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 12:23:31,051 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 12:23:31,051 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 12:23:31,053 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:23:31,053 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:23:31,056 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@7d7b4e04
2023-04-15 12:23:31,057 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@31693a86`
2023-04-15 12:23:31,060 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:23:31,061 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:23:31,061 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:23:31,061 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:23:31,062 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:23:31,062 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:23:31,063 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@35e689a0] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@43b6cb1c]
2023-04-15 12:23:31,345 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@35e689a0] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@257b3561]
2023-04-15 12:23:31,680 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 12:23:31,687 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@257b3561] for TypeConfiguration
2023-04-15 12:23:31,688 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:23:31,931 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 12:23:32,365 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 3.19 seconds (process running for 4.012)
2023-04-15 12:23:32,367 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 12:23:32,463 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=9, type=class java.lang.Long, identifying=true}'}]
2023-04-15 12:23:32,493 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 12:23:32,532 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:23:32,532 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:23:32,533 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:23:32,533 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:23:32,533 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:23:32,546 ERROR org.springframework.batch.core.step.AbstractStep [main] Encountered an error executing step step1 in job importUserJob
org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [INSERT INTO BATCH.policy (contractor_customer_code, effective_date, expire_date, insured_customer_code, policy_number, state) VALUES (?, ?, ?, ?, ?, ?)]; Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:103)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1538)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:667)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:691)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1034)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:373)
	at org.springframework.batch.item.database.JdbcBatchItemWriter.write(JdbcBatchItemWriter.java:190)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.writeItems(SimpleChunkProcessor.java:203)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.doWrite(SimpleChunkProcessor.java:170)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.write(SimpleChunkProcessor.java:297)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.process(SimpleChunkProcessor.java:227)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:75)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:389)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:313)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:256)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:362)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:206)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:139)
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:241)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:227)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:178)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:166)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:161)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:156)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:760)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.sql.BatchUpdateException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at com.mysql.cj.util.Util.handleNewInstance(Util.java:192)
	at com.mysql.cj.util.Util.getInstance(Util.java:167)
	at com.mysql.cj.util.Util.getInstance(Util.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLError.createBatchUpdateException(SQLError.java:224)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:816)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchInternal(ClientPreparedStatement.java:418)
	at com.mysql.cj.jdbc.StatementImpl.executeBatch(StatementImpl.java:795)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1047)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:651)
	... 114 common frames omitted
Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:795)
	... 120 common frames omitted
2023-04-15 12:23:32,551 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 58ms
2023-04-15 12:23:32,570 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=9, type=class java.lang.Long, identifying=true}'}] and the following status: [FAILED] in 91ms
2023-04-15 12:23:32,729 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:23:32,731 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@257b3561] for TypeConfiguration
2023-04-15 12:23:32,732 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@4329a1cc] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@257b3561]
2023-04-15 12:23:32,735 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 12:23:32,747 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 12:24:00,611 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 12:24:00,686 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 12:24:00,966 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 12440 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 12:24:00,967 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 12:24:01,471 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:24:01,472 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 12:24:01,490 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 12 ms. Found 0 JDBC repository interfaces.
2023-04-15 12:24:01,500 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:24:01,501 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 12:24:01,507 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 3 ms. Found 0 JPA repository interfaces.
2023-04-15 12:24:01,780 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 12:24:02,151 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6075b369
2023-04-15 12:24:02,153 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 12:24:02,249 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 12:24:02,303 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 12:24:02,559 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 12:24:02,568 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 12:24:02,568 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 12:24:02,569 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 12:24:02,569 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 12:24:02,569 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 12:24:02,569 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 12:24:02,569 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 12:24:02,569 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 12:24:02,569 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 12:24:02,570 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 12:24:02,570 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 12:24:02,570 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 12:24:02,571 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 12:24:02,571 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 12:24:02,571 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 12:24:02,571 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 12:24:02,571 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 12:24:02,571 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 12:24:02,572 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 12:24:02,572 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 12:24:02,572 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 12:24:02,572 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 12:24:02,572 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 12:24:02,572 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 12:24:02,572 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 12:24:02,572 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 12:24:02,574 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 12:24:02,574 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 12:24:02,574 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 12:24:02,574 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 12:24:02,574 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 12:24:02,574 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 12:24:02,575 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 12:24:02,575 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 12:24:02,575 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 12:24:02,575 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 12:24:02,575 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 12:24:02,575 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 12:24:02,575 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 12:24:02,576 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 12:24:02,576 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 12:24:02,576 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 12:24:02,576 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 12:24:02,576 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 12:24:02,577 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 12:24:02,577 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 12:24:02,577 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 12:24:02,577 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 12:24:02,577 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 12:24:02,577 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 12:24:02,577 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 12:24:02,579 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 12:24:02,579 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 12:24:02,579 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 12:24:02,579 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 12:24:02,579 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 12:24:02,579 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 12:24:02,580 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 12:24:02,580 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 12:24:02,580 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 12:24:02,580 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 12:24:02,581 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 12:24:02,581 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 12:24:02,581 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 12:24:02,582 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 12:24:02,582 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 12:24:02,582 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 12:24:02,582 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 12:24:02,582 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 12:24:02,583 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 12:24:02,583 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 12:24:02,583 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 12:24:02,583 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 12:24:02,584 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 12:24:02,584 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 12:24:02,584 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 12:24:02,584 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 12:24:02,585 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 12:24:02,585 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 12:24:02,585 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 12:24:02,585 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 12:24:02,585 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 12:24:02,585 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 12:24:02,585 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 12:24:02,585 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 12:24:02,585 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 12:24:02,590 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 12:24:02,590 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 12:24:02,590 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 12:24:02,591 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 12:24:02,591 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 12:24:02,591 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 12:24:02,593 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 12:24:02,593 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 12:24:02,593 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 12:24:02,593 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 12:24:02,594 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 12:24:02,594 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 12:24:02,594 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 12:24:02,594 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 12:24:02,594 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 12:24:02,594 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 12:24:02,595 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 12:24:02,595 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 12:24:02,595 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 12:24:02,595 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 12:24:02,595 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 12:24:02,595 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 12:24:02,596 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 12:24:02,596 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 12:24:02,596 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 12:24:02,596 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 12:24:02,596 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@d85b399
2023-04-15 12:24:02,597 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@d85b399
2023-04-15 12:24:02,597 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@674aa626
2023-04-15 12:24:02,597 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@674aa626
2023-04-15 12:24:02,597 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@4dd1d2bb
2023-04-15 12:24:02,597 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@4dd1d2bb
2023-04-15 12:24:02,597 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@47198524
2023-04-15 12:24:02,597 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@47198524
2023-04-15 12:24:02,599 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@67a0ff25
2023-04-15 12:24:02,604 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@ff1f465
2023-04-15 12:24:02,605 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@ff1f465
2023-04-15 12:24:02,606 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@3cf4dec7
2023-04-15 12:24:02,607 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@3cf4dec7
2023-04-15 12:24:02,608 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@1f9a7684
2023-04-15 12:24:02,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 12:24:02,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:24:02,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:24:02,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:24:02,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 12:24:02,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 12:24:02,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:24:02,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 12:24:02,656 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 12:24:02,659 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 12:24:02,677 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@26865b57) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@46894dc5)
2023-04-15 12:24:02,677 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@596afb2f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@79ba0285)
2023-04-15 12:24:02,677 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6df2a206) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@61993d18)
2023-04-15 12:24:02,678 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6f240187) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@46a388cc)
2023-04-15 12:24:02,678 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3e39f08c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@16e07bae)
2023-04-15 12:24:02,678 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@598778cc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3386ed8)
2023-04-15 12:24:02,678 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@727453a3) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@67dc6b48)
2023-04-15 12:24:02,678 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@57f2e67) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4571cebe)
2023-04-15 12:24:02,678 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@154864f8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@11cadb32)
2023-04-15 12:24:02,680 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 12:24:02,680 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 12:24:02,681 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 12:24:02,684 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:24:02,685 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:24:02,687 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@24615687
2023-04-15 12:24:02,688 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@1f9a7684`
2023-04-15 12:24:02,692 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:24:02,692 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:24:02,693 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:24:02,693 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:24:02,693 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:24:02,693 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:24:02,694 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@3bf5911d] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@1de30c31]
2023-04-15 12:24:02,947 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@3bf5911d] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@6a878778]
2023-04-15 12:24:03,297 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 12:24:03,308 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@6a878778] for TypeConfiguration
2023-04-15 12:24:03,308 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:24:03,548 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 12:24:03,967 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 3.155 seconds (process running for 4.0)
2023-04-15 12:24:03,967 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 12:24:04,077 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=10, type=class java.lang.Long, identifying=true}'}]
2023-04-15 12:24:04,107 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 12:24:04,137 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:24:04,137 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:24:04,137 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:24:04,137 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:24:04,137 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:24:04,157 ERROR org.springframework.batch.core.step.AbstractStep [main] Encountered an error executing step step1 in job importUserJob
org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [INSERT INTO BATCH.policy (contractor_customer_code, effective_date, expire_date, insured_customer_code, policy_number, state) VALUES (?, ?, ?, ?, ?, ?)]; Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:103)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1538)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:667)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:691)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1034)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:373)
	at org.springframework.batch.item.database.JdbcBatchItemWriter.write(JdbcBatchItemWriter.java:190)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.writeItems(SimpleChunkProcessor.java:203)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.doWrite(SimpleChunkProcessor.java:170)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.write(SimpleChunkProcessor.java:297)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.process(SimpleChunkProcessor.java:227)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:75)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:389)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:313)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:256)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:362)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:206)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:139)
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:241)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:227)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:178)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:166)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:161)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:156)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:760)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.sql.BatchUpdateException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at com.mysql.cj.util.Util.handleNewInstance(Util.java:192)
	at com.mysql.cj.util.Util.getInstance(Util.java:167)
	at com.mysql.cj.util.Util.getInstance(Util.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLError.createBatchUpdateException(SQLError.java:224)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:816)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchInternal(ClientPreparedStatement.java:418)
	at com.mysql.cj.jdbc.StatementImpl.executeBatch(StatementImpl.java:795)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1047)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:651)
	... 114 common frames omitted
Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:795)
	... 120 common frames omitted
2023-04-15 12:24:04,158 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 50ms
2023-04-15 12:24:04,178 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=10, type=class java.lang.Long, identifying=true}'}] and the following status: [FAILED] in 79ms
2023-04-15 12:24:04,318 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:24:04,318 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@6a878778] for TypeConfiguration
2023-04-15 12:24:04,318 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@217e0aed] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@6a878778]
2023-04-15 12:24:04,322 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 12:24:04,327 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 12:25:49,128 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 12:25:49,196 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 12:25:49,464 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 10460 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 12:25:49,465 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 12:25:50,032 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:25:50,033 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 12:25:50,047 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 10 ms. Found 0 JDBC repository interfaces.
2023-04-15 12:25:50,054 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:25:50,055 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 12:25:50,059 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 12:25:50,240 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 12:25:50,584 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@756808cc
2023-04-15 12:25:50,587 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 12:25:50,666 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 12:25:50,712 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 12:25:50,938 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 12:25:50,952 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@70884875
2023-04-15 12:25:50,952 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@70884875
2023-04-15 12:25:50,952 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@70884875
2023-04-15 12:25:50,953 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@7019d619
2023-04-15 12:25:50,953 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@7019d619
2023-04-15 12:25:50,953 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@2a5c6b76
2023-04-15 12:25:50,954 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@2a5c6b76
2023-04-15 12:25:50,954 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@ff1f465
2023-04-15 12:25:50,954 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@ff1f465
2023-04-15 12:25:50,954 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@3d88ce0e
2023-04-15 12:25:50,955 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@3d88ce0e
2023-04-15 12:25:50,955 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@3d88ce0e
2023-04-15 12:25:50,956 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@31f7eb8
2023-04-15 12:25:50,956 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@31f7eb8
2023-04-15 12:25:50,957 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@31f7eb8
2023-04-15 12:25:50,957 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@31006a75
2023-04-15 12:25:50,957 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@31006a75
2023-04-15 12:25:50,959 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@31006a75
2023-04-15 12:25:50,959 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@31006a75
2023-04-15 12:25:50,959 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@49122853
2023-04-15 12:25:50,960 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@e97f115
2023-04-15 12:25:50,960 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@e97f115
2023-04-15 12:25:50,960 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@5d6b42cf
2023-04-15 12:25:50,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@6f8ac8d5
2023-04-15 12:25:50,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@370225c7
2023-04-15 12:25:50,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@370225c7
2023-04-15 12:25:50,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@370225c7
2023-04-15 12:25:50,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@6ac756b
2023-04-15 12:25:50,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@6ac756b
2023-04-15 12:25:50,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@6ac756b
2023-04-15 12:25:50,963 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@156324b
2023-04-15 12:25:50,965 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@156324b
2023-04-15 12:25:50,965 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@156324b
2023-04-15 12:25:50,965 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@38a38ed4
2023-04-15 12:25:50,965 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@38a38ed4
2023-04-15 12:25:50,965 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@38a38ed4
2023-04-15 12:25:50,965 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@1e29a81a
2023-04-15 12:25:50,967 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@1e29a81a
2023-04-15 12:25:50,968 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@1e29a81a
2023-04-15 12:25:50,969 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@7b4b8199
2023-04-15 12:25:50,969 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@7b4b8199
2023-04-15 12:25:50,969 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@4bbf20d1
2023-04-15 12:25:50,970 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@4bbf20d1
2023-04-15 12:25:50,970 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@6fced25c
2023-04-15 12:25:50,970 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@6fced25c
2023-04-15 12:25:50,970 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@6fced25c
2023-04-15 12:25:50,971 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@3cf4dec7
2023-04-15 12:25:50,971 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@1b94c789
2023-04-15 12:25:50,972 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@1b94c789
2023-04-15 12:25:50,972 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@299fc582
2023-04-15 12:25:50,972 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@305aaedf
2023-04-15 12:25:50,973 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@305aaedf
2023-04-15 12:25:50,973 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@305aaedf
2023-04-15 12:25:50,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@2a425cf5
2023-04-15 12:25:50,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@2a425cf5
2023-04-15 12:25:50,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@2a425cf5
2023-04-15 12:25:50,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@17d76ebb
2023-04-15 12:25:50,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@40b31a16
2023-04-15 12:25:50,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@25fa6889
2023-04-15 12:25:50,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@25fa6889
2023-04-15 12:25:50,976 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@1de73d37
2023-04-15 12:25:50,976 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@1de73d37
2023-04-15 12:25:50,981 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@31693a86
2023-04-15 12:25:50,982 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:25:50,983 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:25:50,983 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 12:25:50,983 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:25:50,983 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:25:50,984 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:25:50,984 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:25:50,984 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 12:25:50,984 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 12:25:50,985 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 12:25:50,985 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 12:25:50,985 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:25:50,986 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:25:50,986 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 12:25:50,986 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 12:25:50,986 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 12:25:50,986 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7ff6804a
2023-04-15 12:25:50,987 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@12aa519b
2023-04-15 12:25:50,987 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@12aa519b
2023-04-15 12:25:50,987 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@7c5c20ed
2023-04-15 12:25:50,987 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@7c5c20ed
2023-04-15 12:25:50,987 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@6113a26f
2023-04-15 12:25:50,988 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:25:50,988 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:25:50,988 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:25:50,988 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:25:50,989 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:25:50,989 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:25:50,989 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:25:50,989 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:25:50,989 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:25:50,989 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:25:50,990 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:25:50,990 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7e31d53b
2023-04-15 12:25:50,990 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@68d8eb4f
2023-04-15 12:25:50,990 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@64757d56
2023-04-15 12:25:50,990 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@64757d56
2023-04-15 12:25:50,991 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@4813d0
2023-04-15 12:25:50,991 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@4813d0
2023-04-15 12:25:50,991 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@4813d0
2023-04-15 12:25:50,992 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@702096ef
2023-04-15 12:25:50,992 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@5f0d8937
2023-04-15 12:25:50,992 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@105dc04d
2023-04-15 12:25:50,992 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@105dc04d
2023-04-15 12:25:50,993 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@504b8705
2023-04-15 12:25:50,993 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@504b8705
2023-04-15 12:25:50,993 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@504b8705
2023-04-15 12:25:50,993 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@24a8e40d
2023-04-15 12:25:50,993 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@24a8e40d
2023-04-15 12:25:50,993 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@175f859e
2023-04-15 12:25:50,994 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@175f859e
2023-04-15 12:25:50,994 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@69fe7090
2023-04-15 12:25:50,994 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@69fe7090
2023-04-15 12:25:50,994 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@6501b105
2023-04-15 12:25:50,994 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@6501b105
2023-04-15 12:25:50,995 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@66ab924
2023-04-15 12:25:50,995 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@66ab924
2023-04-15 12:25:50,995 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@6df2af02
2023-04-15 12:25:51,002 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@5a51336a
2023-04-15 12:25:51,003 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@5a51336a
2023-04-15 12:25:51,006 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@14656be5
2023-04-15 12:25:51,006 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@14656be5
2023-04-15 12:25:51,007 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@2c815fdc
2023-04-15 12:25:51,009 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@769b0752
2023-04-15 12:25:51,009 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@dae5e0
2023-04-15 12:25:51,010 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@59a94d0f
2023-04-15 12:25:51,010 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@7ff09659
2023-04-15 12:25:51,010 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@517fbf62
2023-04-15 12:25:51,010 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@65db548
2023-04-15 12:25:51,010 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@150f41b9
2023-04-15 12:25:51,010 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@6e364f1f
2023-04-15 12:25:51,051 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 12:25:51,053 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 12:25:51,072 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@69499c6f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3451fc88)
2023-04-15 12:25:51,072 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1e0294a7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3041beb3)
2023-04-15 12:25:51,072 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@15cee630) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2e40fdbd)
2023-04-15 12:25:51,072 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@246de37e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@19647566)
2023-04-15 12:25:51,072 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7b79ff1c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@527d48db)
2023-04-15 12:25:51,074 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@194037f9) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2335aef2)
2023-04-15 12:25:51,074 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@17003497) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2f038d3c)
2023-04-15 12:25:51,074 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@376498da) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@39a8e2fa)
2023-04-15 12:25:51,074 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2f9addd4) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1c43df76)
2023-04-15 12:25:51,075 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 12:25:51,075 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 12:25:51,076 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 12:25:51,078 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:25:51,078 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:25:51,081 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@56478522
2023-04-15 12:25:51,082 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@2c815fdc`
2023-04-15 12:25:51,086 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:25:51,086 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:25:51,086 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:25:51,086 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:25:51,087 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:25:51,087 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:25:51,088 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@56cd5d76] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@77cd235b]
2023-04-15 12:25:51,375 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@56cd5d76] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@c0004b7]
2023-04-15 12:25:51,705 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 12:25:51,712 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@c0004b7] for TypeConfiguration
2023-04-15 12:25:51,714 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:25:51,933 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 12:25:52,317 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 2.997 seconds (process running for 3.81)
2023-04-15 12:25:52,319 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 12:25:52,415 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=11, type=class java.lang.Long, identifying=true}'}]
2023-04-15 12:25:52,445 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 12:25:52,494 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:25:52,494 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:25:52,495 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:25:52,495 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:25:52,495 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:25:52,511 ERROR org.springframework.batch.core.step.AbstractStep [main] Encountered an error executing step step1 in job importUserJob
org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [INSERT INTO BATCH.policy (contractor_customer_code, effective_date, expire_date, insured_customer_code, policy_number, state) VALUES (?, ?, ?, ?, ?, ?)]; Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:103)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1538)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:667)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:691)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1034)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:373)
	at org.springframework.batch.item.database.JdbcBatchItemWriter.write(JdbcBatchItemWriter.java:190)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:137)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:702)
	at org.springframework.batch.item.database.JdbcBatchItemWriter$$SpringCGLIB$$0.write(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.writeItems(SimpleChunkProcessor.java:203)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.doWrite(SimpleChunkProcessor.java:170)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.write(SimpleChunkProcessor.java:297)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.process(SimpleChunkProcessor.java:227)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:75)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:389)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:313)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:256)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:362)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:206)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:139)
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:241)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:227)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:178)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:166)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:161)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:156)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:760)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.sql.BatchUpdateException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at com.mysql.cj.util.Util.handleNewInstance(Util.java:192)
	at com.mysql.cj.util.Util.getInstance(Util.java:167)
	at com.mysql.cj.util.Util.getInstance(Util.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLError.createBatchUpdateException(SQLError.java:224)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:816)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchInternal(ClientPreparedStatement.java:418)
	at com.mysql.cj.jdbc.StatementImpl.executeBatch(StatementImpl.java:795)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1047)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:651)
	... 128 common frames omitted
Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:795)
	... 134 common frames omitted
2023-04-15 12:25:52,515 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 68ms
2023-04-15 12:25:52,532 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=11, type=class java.lang.Long, identifying=true}'}] and the following status: [FAILED] in 102ms
2023-04-15 12:25:52,691 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:25:52,692 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@c0004b7] for TypeConfiguration
2023-04-15 12:25:52,693 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@3ce368f0] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@c0004b7]
2023-04-15 12:25:52,698 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 12:25:52,706 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 12:34:11,271 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 12:34:11,343 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 12:34:11,617 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 14900 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 12:34:11,618 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 12:34:12,170 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:34:12,171 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 12:34:12,184 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 9 ms. Found 0 JDBC repository interfaces.
2023-04-15 12:34:12,192 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:34:12,192 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 12:34:12,198 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 12:34:12,395 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 12:34:12,720 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@681e913c
2023-04-15 12:34:12,723 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 12:34:12,812 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 12:34:12,870 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 12:34:13,083 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 12:34:13,095 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1b94c789
2023-04-15 12:34:13,097 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1b94c789
2023-04-15 12:34:13,098 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@1b94c789
2023-04-15 12:34:13,098 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@299fc582
2023-04-15 12:34:13,098 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@299fc582
2023-04-15 12:34:13,099 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@305aaedf
2023-04-15 12:34:13,099 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@305aaedf
2023-04-15 12:34:13,099 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@2a425cf5
2023-04-15 12:34:13,099 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@2a425cf5
2023-04-15 12:34:13,100 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@17d76ebb
2023-04-15 12:34:13,101 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@17d76ebb
2023-04-15 12:34:13,102 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@17d76ebb
2023-04-15 12:34:13,103 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@40b31a16
2023-04-15 12:34:13,104 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@40b31a16
2023-04-15 12:34:13,104 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@40b31a16
2023-04-15 12:34:13,104 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@31693a86
2023-04-15 12:34:13,105 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@31693a86
2023-04-15 12:34:13,105 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@31693a86
2023-04-15 12:34:13,105 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@31693a86
2023-04-15 12:34:13,109 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:34:13,109 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:34:13,109 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:34:13,109 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 12:34:13,110 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:34:13,110 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:34:13,111 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:34:13,111 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:34:13,111 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:34:13,112 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:34:13,113 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:34:13,114 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 12:34:13,118 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 12:34:13,129 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 12:34:13,135 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 12:34:13,135 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 12:34:13,137 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 12:34:13,138 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:34:13,138 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:34:13,138 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:34:13,139 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 12:34:13,139 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 12:34:13,139 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 12:34:13,139 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 12:34:13,139 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@7ff6804a
2023-04-15 12:34:13,140 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@7ff6804a
2023-04-15 12:34:13,140 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@7ff6804a
2023-04-15 12:34:13,140 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@12aa519b
2023-04-15 12:34:13,140 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@7c5c20ed
2023-04-15 12:34:13,141 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@7c5c20ed
2023-04-15 12:34:13,141 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@6113a26f
2023-04-15 12:34:13,141 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:34:13,141 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:34:13,141 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:34:13,143 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:34:13,143 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:34:13,143 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:34:13,143 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:34:13,144 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:34:13,144 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:34:13,144 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:34:13,144 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@7e31d53b
2023-04-15 12:34:13,144 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@7e31d53b
2023-04-15 12:34:13,145 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@68d8eb4f
2023-04-15 12:34:13,145 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@64757d56
2023-04-15 12:34:13,145 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@4813d0
2023-04-15 12:34:13,145 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@702096ef
2023-04-15 12:34:13,145 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@5f0d8937
2023-04-15 12:34:13,146 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@105dc04d
2023-04-15 12:34:13,146 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@504b8705
2023-04-15 12:34:13,146 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@504b8705
2023-04-15 12:34:13,147 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@24a8e40d
2023-04-15 12:34:13,147 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@24a8e40d
2023-04-15 12:34:13,147 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@175f859e
2023-04-15 12:34:13,148 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@175f859e
2023-04-15 12:34:13,148 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@69fe7090
2023-04-15 12:34:13,148 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@69fe7090
2023-04-15 12:34:13,149 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@6501b105
2023-04-15 12:34:13,149 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@6501b105
2023-04-15 12:34:13,149 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@66ab924
2023-04-15 12:34:13,149 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6df2af02
2023-04-15 12:34:13,149 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@779228dc
2023-04-15 12:34:13,150 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@779228dc
2023-04-15 12:34:13,150 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@1f7336b2
2023-04-15 12:34:13,150 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@1f7336b2
2023-04-15 12:34:13,151 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@4c030fe1
2023-04-15 12:34:13,152 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@347123dc
2023-04-15 12:34:13,152 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@52433946
2023-04-15 12:34:13,152 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@52433946
2023-04-15 12:34:13,152 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@5403431a
2023-04-15 12:34:13,152 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@5403431a
2023-04-15 12:34:13,153 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@ab327c
2023-04-15 12:34:13,153 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@ab327c
2023-04-15 12:34:13,153 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@ab327c
2023-04-15 12:34:13,153 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@3d798e76
2023-04-15 12:34:13,154 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@3d798e76
2023-04-15 12:34:13,154 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@3d798e76
2023-04-15 12:34:13,154 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@763b0996
2023-04-15 12:34:13,154 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@386e9fd8
2023-04-15 12:34:13,155 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@618f627b
2023-04-15 12:34:13,155 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@618f627b
2023-04-15 12:34:13,155 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@10745a02
2023-04-15 12:34:13,155 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@10745a02
2023-04-15 12:34:13,155 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@10745a02
2023-04-15 12:34:13,156 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@3e2d8623
2023-04-15 12:34:13,156 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@72715e61
2023-04-15 12:34:13,156 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@68f776ee
2023-04-15 12:34:13,156 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@68f776ee
2023-04-15 12:34:13,157 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@5a6195b8
2023-04-15 12:34:13,157 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@5a6195b8
2023-04-15 12:34:13,158 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@5a6195b8
2023-04-15 12:34:13,158 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@8af1c49
2023-04-15 12:34:13,158 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@8af1c49
2023-04-15 12:34:13,158 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@70d5d96b
2023-04-15 12:34:13,159 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@70d5d96b
2023-04-15 12:34:13,159 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@23469199
2023-04-15 12:34:13,159 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@23469199
2023-04-15 12:34:13,159 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@75dc1c1c
2023-04-15 12:34:13,159 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@75dc1c1c
2023-04-15 12:34:13,160 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@5611bba
2023-04-15 12:34:13,160 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@5611bba
2023-04-15 12:34:13,160 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@5ba184fc
2023-04-15 12:34:13,165 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@6c421123
2023-04-15 12:34:13,167 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@6c421123
2023-04-15 12:34:13,168 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@466fedfa
2023-04-15 12:34:13,169 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@466fedfa
2023-04-15 12:34:13,169 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@4fa8bebb
2023-04-15 12:34:13,171 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@7d3c22a5
2023-04-15 12:34:13,171 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@369ad7da
2023-04-15 12:34:13,171 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@344f9467
2023-04-15 12:34:13,171 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@3e98b933
2023-04-15 12:34:13,172 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@222d9d4f
2023-04-15 12:34:13,172 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@4269aad7
2023-04-15 12:34:13,172 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@a4df251
2023-04-15 12:34:13,172 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@71e7830a
2023-04-15 12:34:13,216 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 12:34:13,217 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 12:34:13,236 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@14dbfdb1) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7856f41a)
2023-04-15 12:34:13,237 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5fbae40) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2c08c787)
2023-04-15 12:34:13,237 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@67f591c2) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@284c4f02)
2023-04-15 12:34:13,238 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@709d6de5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1a43a88e)
2023-04-15 12:34:13,238 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@51f34185) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1b8d20e6)
2023-04-15 12:34:13,238 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@e49437) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7645b7d)
2023-04-15 12:34:13,238 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4c50cd7d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3ea84e01)
2023-04-15 12:34:13,238 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1a4930cf) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3fd33f48)
2023-04-15 12:34:13,238 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@75a226ea) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@986b619)
2023-04-15 12:34:13,240 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 12:34:13,240 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 12:34:13,241 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 12:34:13,242 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:34:13,242 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:34:13,244 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@4ca0b9b1
2023-04-15 12:34:13,245 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@4fa8bebb`
2023-04-15 12:34:13,249 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:34:13,249 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:34:13,249 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:34:13,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:34:13,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:34:13,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:34:13,251 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7462ba4b] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@4b09d1c3]
2023-04-15 12:34:13,527 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7462ba4b] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@4bb9f7d4]
2023-04-15 12:34:13,841 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 12:34:13,846 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@4bb9f7d4] for TypeConfiguration
2023-04-15 12:34:13,849 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:34:14,061 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 12:34:14,487 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 3.015 seconds (process running for 3.833)
2023-04-15 12:34:14,489 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 12:34:14,608 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=12, type=class java.lang.Long, identifying=true}'}]
2023-04-15 12:34:14,635 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 12:34:14,644 ERROR org.springframework.batch.core.step.AbstractStep [main] Encountered an error executing step step1 in job importUserJob
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.writer' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Failed to instantiate [org.springframework.batch.item.json.JsonFileItemWriter]: Factory method 'writer' threw exception with message: class org.springframework.core.io.ClassPathResource cannot be cast to class java.nio.file.Path (org.springframework.core.io.ClassPathResource is in unnamed module of loader 'app'; java.nio.file.Path is in module java.base of loader 'bootstrap')
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:657)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:491)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:365)
	at org.springframework.batch.core.scope.StepScope.get(StepScope.java:111)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:362)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:686)
	at org.springframework.batch.item.json.JsonFileItemWriter$$SpringCGLIB$$0.open(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.open(CompositeItemStream.java:124)
	at org.springframework.batch.core.step.tasklet.TaskletStep.open(TaskletStep.java:293)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:224)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:178)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:166)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:161)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:156)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:760)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.item.json.JsonFileItemWriter]: Factory method 'writer' threw exception with message: class org.springframework.core.io.ClassPathResource cannot be cast to class java.nio.file.Path (org.springframework.core.io.ClassPathResource is in unnamed module of loader 'app'; java.nio.file.Path is in module java.base of loader 'bootstrap')
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:171)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	... 110 common frames omitted
Caused by: java.lang.ClassCastException: class org.springframework.core.io.ClassPathResource cannot be cast to class java.nio.file.Path (org.springframework.core.io.ClassPathResource is in unnamed module of loader 'app'; java.nio.file.Path is in module java.base of loader 'bootstrap')
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration.writer(BatchConfiguration.java:110)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.CGLIB$writer$1(<generated>)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:258)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.writer(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:139)
	... 111 common frames omitted
2023-04-15 12:34:14,652 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 15ms
2023-04-15 12:34:14,656 ERROR org.springframework.batch.core.step.AbstractStep [main] Exception while closing step execution resources in step step1 in job importUserJob
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.writer' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Failed to instantiate [org.springframework.batch.item.json.JsonFileItemWriter]: Factory method 'writer' threw exception with message: class org.springframework.core.io.ClassPathResource cannot be cast to class java.nio.file.Path (org.springframework.core.io.ClassPathResource is in unnamed module of loader 'app'; java.nio.file.Path is in module java.base of loader 'bootstrap')
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:657)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:645)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:365)
	at org.springframework.batch.core.scope.StepScope.get(StepScope.java:111)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:362)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:686)
	at org.springframework.batch.item.json.JsonFileItemWriter$$SpringCGLIB$$0.close(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.close(CompositeItemStream.java:111)
	at org.springframework.batch.core.step.tasklet.TaskletStep.close(TaskletStep.java:288)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:310)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:178)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:166)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:161)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:156)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:760)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.item.json.JsonFileItemWriter]: Factory method 'writer' threw exception with message: class org.springframework.core.io.ClassPathResource cannot be cast to class java.nio.file.Path (org.springframework.core.io.ClassPathResource is in unnamed module of loader 'app'; java.nio.file.Path is in module java.base of loader 'bootstrap')
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:171)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	... 110 common frames omitted
Caused by: java.lang.ClassCastException: class org.springframework.core.io.ClassPathResource cannot be cast to class java.nio.file.Path (org.springframework.core.io.ClassPathResource is in unnamed module of loader 'app'; java.nio.file.Path is in module java.base of loader 'bootstrap')
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration.writer(BatchConfiguration.java:110)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.CGLIB$writer$1(<generated>)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:258)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.writer(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:139)
	... 111 common frames omitted
2023-04-15 12:34:14,669 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=12, type=class java.lang.Long, identifying=true}'}] and the following status: [FAILED] in 47ms
2023-04-15 12:34:14,814 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:34:14,815 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@4bb9f7d4] for TypeConfiguration
2023-04-15 12:34:14,815 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@5a9c63ed] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@4bb9f7d4]
2023-04-15 12:34:14,819 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 12:34:14,830 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 12:34:43,768 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 12:34:43,840 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 12:34:44,121 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 20312 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 12:34:44,122 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 12:34:44,705 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:34:44,706 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 12:34:44,720 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 10 ms. Found 0 JDBC repository interfaces.
2023-04-15 12:34:44,730 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:34:44,731 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 12:34:44,736 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 12:34:44,936 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 12:34:45,287 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4652c74d
2023-04-15 12:34:45,289 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 12:34:45,380 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 12:34:45,431 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 12:34:45,663 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 12:34:45,673 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:34:45,673 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:34:45,674 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:34:45,674 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:34:45,674 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:34:45,674 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 12:34:45,675 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 12:34:45,675 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:34:45,675 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:34:45,675 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:34:45,676 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:34:45,677 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:34:45,677 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:34:45,677 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:34:45,677 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:34:45,679 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:34:45,679 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:34:45,679 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:34:45,679 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:34:45,680 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 12:34:45,680 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 12:34:45,680 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 12:34:45,680 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@7ff6804a
2023-04-15 12:34:45,680 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@12aa519b
2023-04-15 12:34:45,681 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@7c5c20ed
2023-04-15 12:34:45,681 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@7c5c20ed
2023-04-15 12:34:45,681 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@7c5c20ed
2023-04-15 12:34:45,681 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@6113a26f
2023-04-15 12:34:45,681 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@6113a26f
2023-04-15 12:34:45,682 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@6113a26f
2023-04-15 12:34:45,682 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:34:45,682 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:34:45,682 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:34:45,682 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:34:45,682 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:34:45,682 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:34:45,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:34:45,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:34:45,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:34:45,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:34:45,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:34:45,685 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:34:45,685 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:34:45,685 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@7e31d53b
2023-04-15 12:34:45,685 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@7e31d53b
2023-04-15 12:34:45,685 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@7e31d53b
2023-04-15 12:34:45,685 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@68d8eb4f
2023-04-15 12:34:45,686 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@64757d56
2023-04-15 12:34:45,686 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@64757d56
2023-04-15 12:34:45,686 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@4813d0
2023-04-15 12:34:45,686 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@702096ef
2023-04-15 12:34:45,687 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@702096ef
2023-04-15 12:34:45,687 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@702096ef
2023-04-15 12:34:45,687 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@5f0d8937
2023-04-15 12:34:45,687 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@5f0d8937
2023-04-15 12:34:45,687 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@5f0d8937
2023-04-15 12:34:45,687 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@105dc04d
2023-04-15 12:34:45,688 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@504b8705
2023-04-15 12:34:45,688 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@24a8e40d
2023-04-15 12:34:45,688 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@24a8e40d
2023-04-15 12:34:45,688 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@175f859e
2023-04-15 12:34:45,688 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@175f859e
2023-04-15 12:34:45,689 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@69fe7090
2023-04-15 12:34:45,689 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@6501b105
2023-04-15 12:34:45,689 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@66ab924
2023-04-15 12:34:45,689 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@6df2af02
2023-04-15 12:34:45,691 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@779228dc
2023-04-15 12:34:45,691 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1f7336b2
2023-04-15 12:34:45,691 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@4c030fe1
2023-04-15 12:34:45,691 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@4c030fe1
2023-04-15 12:34:45,691 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@347123dc
2023-04-15 12:34:45,691 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@347123dc
2023-04-15 12:34:45,692 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@52433946
2023-04-15 12:34:45,692 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@52433946
2023-04-15 12:34:45,693 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@5403431a
2023-04-15 12:34:45,693 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@5403431a
2023-04-15 12:34:45,693 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@ab327c
2023-04-15 12:34:45,693 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@ab327c
2023-04-15 12:34:45,693 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3d798e76
2023-04-15 12:34:45,693 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@763b0996
2023-04-15 12:34:45,694 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@386e9fd8
2023-04-15 12:34:45,694 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@386e9fd8
2023-04-15 12:34:45,694 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@618f627b
2023-04-15 12:34:45,694 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@618f627b
2023-04-15 12:34:45,695 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@10745a02
2023-04-15 12:34:45,695 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@3e2d8623
2023-04-15 12:34:45,695 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@72715e61
2023-04-15 12:34:45,695 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@72715e61
2023-04-15 12:34:45,695 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@68f776ee
2023-04-15 12:34:45,696 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@68f776ee
2023-04-15 12:34:45,696 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@5a6195b8
2023-04-15 12:34:45,697 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@5a6195b8
2023-04-15 12:34:45,697 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@5a6195b8
2023-04-15 12:34:45,697 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@8af1c49
2023-04-15 12:34:45,697 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@8af1c49
2023-04-15 12:34:45,697 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@8af1c49
2023-04-15 12:34:45,697 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@70d5d96b
2023-04-15 12:34:45,697 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@23469199
2023-04-15 12:34:45,698 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@75dc1c1c
2023-04-15 12:34:45,698 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@75dc1c1c
2023-04-15 12:34:45,698 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@5611bba
2023-04-15 12:34:45,698 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@5611bba
2023-04-15 12:34:45,698 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@5611bba
2023-04-15 12:34:45,698 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@5ba184fc
2023-04-15 12:34:45,700 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@4cfc0c48
2023-04-15 12:34:45,700 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@59d5c537
2023-04-15 12:34:45,700 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@59d5c537
2023-04-15 12:34:45,700 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@5464b97c
2023-04-15 12:34:45,700 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@5464b97c
2023-04-15 12:34:45,701 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@5464b97c
2023-04-15 12:34:45,701 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@3355168
2023-04-15 12:34:45,701 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@3355168
2023-04-15 12:34:45,701 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@2f07930a
2023-04-15 12:34:45,701 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@2f07930a
2023-04-15 12:34:45,701 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@580c17a0
2023-04-15 12:34:45,701 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@580c17a0
2023-04-15 12:34:45,702 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@29d2fa84
2023-04-15 12:34:45,702 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@29d2fa84
2023-04-15 12:34:45,702 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@4540c7
2023-04-15 12:34:45,702 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@4540c7
2023-04-15 12:34:45,702 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@13c90c06
2023-04-15 12:34:45,708 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@dae5e0
2023-04-15 12:34:45,708 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@dae5e0
2023-04-15 12:34:45,710 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@7417ef4f
2023-04-15 12:34:45,710 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@7417ef4f
2023-04-15 12:34:45,712 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@3feebf9c
2023-04-15 12:34:45,712 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@305e95a4
2023-04-15 12:34:45,712 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@55e42684
2023-04-15 12:34:45,712 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@18d610e1
2023-04-15 12:34:45,713 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@528e5e38
2023-04-15 12:34:45,713 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@16391278
2023-04-15 12:34:45,713 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@621dc63d
2023-04-15 12:34:45,713 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@4ae49387
2023-04-15 12:34:45,713 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@6abb7b7d
2023-04-15 12:34:45,761 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 12:34:45,762 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 12:34:45,782 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1b8d20e6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@e49437)
2023-04-15 12:34:45,783 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7645b7d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4c50cd7d)
2023-04-15 12:34:45,783 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3ea84e01) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1a4930cf)
2023-04-15 12:34:45,783 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3fd33f48) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@75a226ea)
2023-04-15 12:34:45,783 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@986b619) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5a1a20ae)
2023-04-15 12:34:45,783 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7c956dda) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@186481d4)
2023-04-15 12:34:45,784 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@24eecabf) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2ffa91dc)
2023-04-15 12:34:45,784 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@78d6c244) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@448086ab)
2023-04-15 12:34:45,784 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@16e907b6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6de610c6)
2023-04-15 12:34:45,785 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 12:34:45,786 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 12:34:45,786 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 12:34:45,787 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:34:45,789 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:34:45,791 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@75f4d8a8
2023-04-15 12:34:45,792 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@3feebf9c`
2023-04-15 12:34:45,797 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:34:45,797 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:34:45,797 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:34:45,797 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:34:45,798 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:34:45,798 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:34:45,799 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@35ab4260] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@76134b9b]
2023-04-15 12:34:46,057 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@35ab4260] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@57a5b03]
2023-04-15 12:34:46,385 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 12:34:46,394 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@57a5b03] for TypeConfiguration
2023-04-15 12:34:46,397 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:34:46,630 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 12:34:47,064 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 3.093 seconds (process running for 3.944)
2023-04-15 12:34:47,066 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 12:34:47,195 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=13, type=class java.lang.Long, identifying=true}'}]
2023-04-15 12:34:47,233 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 12:34:47,245 ERROR org.springframework.batch.core.step.AbstractStep [main] Encountered an error executing step step1 in job importUserJob
org.springframework.batch.item.ItemStreamException: Unable to create file: [C:\Users\yurip\git\batch0A\batchType0A]
	at org.springframework.batch.item.util.FileUtils.setUpOutputFile(FileUtils.java:85)
	at org.springframework.batch.item.support.AbstractFileItemWriter$OutputState.initializeBufferedWriter(AbstractFileItemWriter.java:544)
	at org.springframework.batch.item.support.AbstractFileItemWriter.doOpen(AbstractFileItemWriter.java:309)
	at org.springframework.batch.item.support.AbstractFileItemWriter.open(AbstractFileItemWriter.java:299)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:137)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:702)
	at org.springframework.batch.item.json.JsonFileItemWriter$$SpringCGLIB$$0.open(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.open(CompositeItemStream.java:124)
	at org.springframework.batch.core.step.tasklet.TaskletStep.open(TaskletStep.java:293)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:224)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:178)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:166)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:161)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:156)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:760)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.io.IOException: The system cannot find the path specified
	at java.base/java.io.WinNTFileSystem.createFileExclusively(Native Method)
	at java.base/java.io.File.createNewFile(File.java:1043)
	at org.springframework.batch.item.util.FileUtils.createNewFile(FileUtils.java:107)
	at org.springframework.batch.item.util.FileUtils.setUpOutputFile(FileUtils.java:67)
	... 115 common frames omitted
2023-04-15 12:34:47,253 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 19ms
2023-04-15 12:34:47,273 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=13, type=class java.lang.Long, identifying=true}'}] and the following status: [FAILED] in 58ms
2023-04-15 12:34:47,431 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:34:47,433 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@57a5b03] for TypeConfiguration
2023-04-15 12:34:47,434 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@7be846bf] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@57a5b03]
2023-04-15 12:34:47,435 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 12:34:47,448 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 12:36:41,206 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 12:36:41,279 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 12:36:41,552 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 7200 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 12:36:41,553 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 12:36:42,111 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:36:42,112 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 12:36:42,126 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 10 ms. Found 0 JDBC repository interfaces.
2023-04-15 12:36:42,135 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:36:42,136 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 12:36:42,141 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 12:36:42,336 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 12:36:42,666 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4cc12db2
2023-04-15 12:36:42,668 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 12:36:42,751 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 12:36:42,812 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 12:36:43,028 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 12:36:43,041 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:36:43,042 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:36:43,047 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:36:43,047 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 12:36:43,047 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 12:36:43,047 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:36:43,048 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:36:43,048 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:36:43,048 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:36:43,049 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:36:43,049 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:36:43,049 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:36:43,050 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 12:36:43,050 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 12:36:43,055 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 12:36:43,056 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 12:36:43,057 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 12:36:43,057 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 12:36:43,057 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 12:36:43,057 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 12:36:43,058 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@7ff6804a
2023-04-15 12:36:43,059 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@7ff6804a
2023-04-15 12:36:43,059 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@12aa519b
2023-04-15 12:36:43,060 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@7c5c20ed
2023-04-15 12:36:43,060 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@6113a26f
2023-04-15 12:36:43,061 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@6113a26f
2023-04-15 12:36:43,061 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@6113a26f
2023-04-15 12:36:43,061 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:36:43,061 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:36:43,062 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:36:43,062 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:36:43,062 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:36:43,062 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:36:43,063 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:36:43,063 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:36:43,063 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:36:43,063 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:36:43,064 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:36:43,064 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:36:43,064 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:36:43,064 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:36:43,066 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7e31d53b
2023-04-15 12:36:43,066 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7e31d53b
2023-04-15 12:36:43,066 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@68d8eb4f
2023-04-15 12:36:43,066 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@68d8eb4f
2023-04-15 12:36:43,066 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@68d8eb4f
2023-04-15 12:36:43,066 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@64757d56
2023-04-15 12:36:43,066 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@4813d0
2023-04-15 12:36:43,067 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@4813d0
2023-04-15 12:36:43,068 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@702096ef
2023-04-15 12:36:43,068 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@5f0d8937
2023-04-15 12:36:43,069 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@5f0d8937
2023-04-15 12:36:43,069 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@5f0d8937
2023-04-15 12:36:43,069 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@105dc04d
2023-04-15 12:36:43,069 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@105dc04d
2023-04-15 12:36:43,069 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@105dc04d
2023-04-15 12:36:43,069 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@504b8705
2023-04-15 12:36:43,069 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@24a8e40d
2023-04-15 12:36:43,070 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@175f859e
2023-04-15 12:36:43,070 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@175f859e
2023-04-15 12:36:43,070 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@69fe7090
2023-04-15 12:36:43,070 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@69fe7090
2023-04-15 12:36:43,071 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@6501b105
2023-04-15 12:36:43,071 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@66ab924
2023-04-15 12:36:43,071 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@6df2af02
2023-04-15 12:36:43,072 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@779228dc
2023-04-15 12:36:43,072 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@1f7336b2
2023-04-15 12:36:43,072 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@4c030fe1
2023-04-15 12:36:43,072 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@347123dc
2023-04-15 12:36:43,072 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@347123dc
2023-04-15 12:36:43,072 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@52433946
2023-04-15 12:36:43,073 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@52433946
2023-04-15 12:36:43,073 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@5403431a
2023-04-15 12:36:43,073 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@5403431a
2023-04-15 12:36:43,073 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@ab327c
2023-04-15 12:36:43,074 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@ab327c
2023-04-15 12:36:43,074 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@3d798e76
2023-04-15 12:36:43,074 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@3d798e76
2023-04-15 12:36:43,074 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@763b0996
2023-04-15 12:36:43,074 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@386e9fd8
2023-04-15 12:36:43,074 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@618f627b
2023-04-15 12:36:43,076 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@618f627b
2023-04-15 12:36:43,076 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@10745a02
2023-04-15 12:36:43,076 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@10745a02
2023-04-15 12:36:43,076 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3e2d8623
2023-04-15 12:36:43,076 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@72715e61
2023-04-15 12:36:43,076 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@68f776ee
2023-04-15 12:36:43,077 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@68f776ee
2023-04-15 12:36:43,078 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@5a6195b8
2023-04-15 12:36:43,078 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@5a6195b8
2023-04-15 12:36:43,078 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@8af1c49
2023-04-15 12:36:43,079 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@8af1c49
2023-04-15 12:36:43,079 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@8af1c49
2023-04-15 12:36:43,079 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@70d5d96b
2023-04-15 12:36:43,079 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@70d5d96b
2023-04-15 12:36:43,080 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@70d5d96b
2023-04-15 12:36:43,080 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@23469199
2023-04-15 12:36:43,080 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@75dc1c1c
2023-04-15 12:36:43,081 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@5611bba
2023-04-15 12:36:43,081 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@5611bba
2023-04-15 12:36:43,081 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@5ba184fc
2023-04-15 12:36:43,081 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@5ba184fc
2023-04-15 12:36:43,081 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@5ba184fc
2023-04-15 12:36:43,082 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@4cfc0c48
2023-04-15 12:36:43,082 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@59d5c537
2023-04-15 12:36:43,082 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@5464b97c
2023-04-15 12:36:43,082 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@5464b97c
2023-04-15 12:36:43,082 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@3355168
2023-04-15 12:36:43,082 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@3355168
2023-04-15 12:36:43,083 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@3355168
2023-04-15 12:36:43,083 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@2f07930a
2023-04-15 12:36:43,083 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@2f07930a
2023-04-15 12:36:43,084 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@580c17a0
2023-04-15 12:36:43,084 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@580c17a0
2023-04-15 12:36:43,084 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@29d2fa84
2023-04-15 12:36:43,084 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@29d2fa84
2023-04-15 12:36:43,085 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@4540c7
2023-04-15 12:36:43,085 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@4540c7
2023-04-15 12:36:43,085 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@13c90c06
2023-04-15 12:36:43,085 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@13c90c06
2023-04-15 12:36:43,085 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@2bc0b8c8
2023-04-15 12:36:43,092 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@59a94d0f
2023-04-15 12:36:43,093 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@59a94d0f
2023-04-15 12:36:43,094 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@5c0e2ec
2023-04-15 12:36:43,095 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@5c0e2ec
2023-04-15 12:36:43,096 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@305e95a4
2023-04-15 12:36:43,097 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@55e42684
2023-04-15 12:36:43,098 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@18d610e1
2023-04-15 12:36:43,098 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@528e5e38
2023-04-15 12:36:43,098 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@16391278
2023-04-15 12:36:43,099 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@621dc63d
2023-04-15 12:36:43,099 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@4ae49387
2023-04-15 12:36:43,099 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@6abb7b7d
2023-04-15 12:36:43,099 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@34cf0e80
2023-04-15 12:36:43,136 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 12:36:43,138 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 12:36:43,154 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@e49437) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7645b7d)
2023-04-15 12:36:43,154 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4c50cd7d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3ea84e01)
2023-04-15 12:36:43,154 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1a4930cf) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3fd33f48)
2023-04-15 12:36:43,154 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@75a226ea) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@986b619)
2023-04-15 12:36:43,155 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5a1a20ae) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7c956dda)
2023-04-15 12:36:43,155 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@186481d4) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@24eecabf)
2023-04-15 12:36:43,155 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2ffa91dc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@78d6c244)
2023-04-15 12:36:43,155 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@448086ab) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@16e907b6)
2023-04-15 12:36:43,155 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6de610c6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@23ec2bdc)
2023-04-15 12:36:43,156 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 12:36:43,157 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 12:36:43,158 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 12:36:43,159 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:36:43,159 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:36:43,161 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@69ba72da
2023-04-15 12:36:43,161 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@305e95a4`
2023-04-15 12:36:43,164 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:36:43,164 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:36:43,164 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:36:43,165 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:36:43,165 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:36:43,165 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:36:43,166 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@76134b9b] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@38667005]
2023-04-15 12:36:43,424 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@76134b9b] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@5649f55]
2023-04-15 12:36:43,767 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 12:36:43,773 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@5649f55] for TypeConfiguration
2023-04-15 12:36:43,776 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:36:43,983 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 12:36:44,374 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 2.973 seconds (process running for 3.795)
2023-04-15 12:36:44,377 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 12:36:44,483 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=14, type=class java.lang.Long, identifying=true}'}]
2023-04-15 12:36:44,515 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 12:36:44,527 ERROR org.springframework.batch.core.step.AbstractStep [main] Encountered an error executing step step1 in job importUserJob
org.springframework.batch.item.ItemStreamException: Unable to create file: [C:\Users\yurip\git\batch0A\batchType0A\src\main\resources]
	at org.springframework.batch.item.util.FileUtils.setUpOutputFile(FileUtils.java:85)
	at org.springframework.batch.item.support.AbstractFileItemWriter$OutputState.initializeBufferedWriter(AbstractFileItemWriter.java:544)
	at org.springframework.batch.item.support.AbstractFileItemWriter.doOpen(AbstractFileItemWriter.java:309)
	at org.springframework.batch.item.support.AbstractFileItemWriter.open(AbstractFileItemWriter.java:299)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:137)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:702)
	at org.springframework.batch.item.json.JsonFileItemWriter$$SpringCGLIB$$0.open(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.open(CompositeItemStream.java:124)
	at org.springframework.batch.core.step.tasklet.TaskletStep.open(TaskletStep.java:293)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:224)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:178)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:166)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:161)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:156)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:760)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.io.IOException: Could not delete file: src\main\resources
	at org.springframework.batch.item.util.FileUtils.setUpOutputFile(FileUtils.java:60)
	... 115 common frames omitted
2023-04-15 12:36:44,535 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 19ms
2023-04-15 12:36:44,555 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=14, type=class java.lang.Long, identifying=true}'}] and the following status: [FAILED] in 55ms
2023-04-15 12:36:44,742 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:36:44,743 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@5649f55] for TypeConfiguration
2023-04-15 12:36:44,743 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@71cf7a33] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@5649f55]
2023-04-15 12:36:44,746 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 12:36:44,755 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 12:37:22,450 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 12:37:22,516 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 12:37:22,785 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 13784 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 12:37:22,786 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 12:37:23,370 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:37:23,372 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 12:37:23,386 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 10 ms. Found 0 JDBC repository interfaces.
2023-04-15 12:37:23,394 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:37:23,396 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 12:37:23,402 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 12:37:23,624 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 12:37:24,007 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4652c74d
2023-04-15 12:37:24,009 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 12:37:24,097 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 12:37:24,159 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 12:37:24,394 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 12:37:24,411 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:37:24,411 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:37:24,412 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:37:24,412 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:37:24,412 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:37:24,412 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 12:37:24,413 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 12:37:24,413 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:37:24,413 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:37:24,413 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:37:24,414 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:37:24,414 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:37:24,414 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:37:24,415 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:37:24,415 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:37:24,415 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:37:24,415 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:37:24,415 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:37:24,415 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:37:24,417 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 12:37:24,417 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 12:37:24,417 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 12:37:24,417 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@7ff6804a
2023-04-15 12:37:24,417 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@12aa519b
2023-04-15 12:37:24,417 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@7c5c20ed
2023-04-15 12:37:24,417 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@7c5c20ed
2023-04-15 12:37:24,418 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@7c5c20ed
2023-04-15 12:37:24,418 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@6113a26f
2023-04-15 12:37:24,418 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@6113a26f
2023-04-15 12:37:24,418 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@6113a26f
2023-04-15 12:37:24,418 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:37:24,419 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:37:24,419 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:37:24,419 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:37:24,419 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:37:24,419 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:37:24,419 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:37:24,419 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:37:24,421 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:37:24,421 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:37:24,421 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:37:24,421 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:37:24,421 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:37:24,421 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@7e31d53b
2023-04-15 12:37:24,422 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@7e31d53b
2023-04-15 12:37:24,422 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@7e31d53b
2023-04-15 12:37:24,422 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@68d8eb4f
2023-04-15 12:37:24,422 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@64757d56
2023-04-15 12:37:24,422 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@64757d56
2023-04-15 12:37:24,423 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@4813d0
2023-04-15 12:37:24,423 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@702096ef
2023-04-15 12:37:24,423 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@702096ef
2023-04-15 12:37:24,423 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@702096ef
2023-04-15 12:37:24,423 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@5f0d8937
2023-04-15 12:37:24,424 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@5f0d8937
2023-04-15 12:37:24,424 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@5f0d8937
2023-04-15 12:37:24,424 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@105dc04d
2023-04-15 12:37:24,424 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@504b8705
2023-04-15 12:37:24,424 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@24a8e40d
2023-04-15 12:37:24,425 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@24a8e40d
2023-04-15 12:37:24,425 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@175f859e
2023-04-15 12:37:24,425 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@175f859e
2023-04-15 12:37:24,425 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@69fe7090
2023-04-15 12:37:24,425 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@6501b105
2023-04-15 12:37:24,425 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@66ab924
2023-04-15 12:37:24,425 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@6df2af02
2023-04-15 12:37:24,425 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@779228dc
2023-04-15 12:37:24,425 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1f7336b2
2023-04-15 12:37:24,426 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@4c030fe1
2023-04-15 12:37:24,426 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@4c030fe1
2023-04-15 12:37:24,426 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@347123dc
2023-04-15 12:37:24,426 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@347123dc
2023-04-15 12:37:24,426 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@52433946
2023-04-15 12:37:24,427 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@52433946
2023-04-15 12:37:24,427 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@5403431a
2023-04-15 12:37:24,427 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@5403431a
2023-04-15 12:37:24,427 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@ab327c
2023-04-15 12:37:24,429 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@ab327c
2023-04-15 12:37:24,429 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3d798e76
2023-04-15 12:37:24,429 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@763b0996
2023-04-15 12:37:24,429 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@386e9fd8
2023-04-15 12:37:24,429 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@386e9fd8
2023-04-15 12:37:24,429 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@618f627b
2023-04-15 12:37:24,430 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@618f627b
2023-04-15 12:37:24,430 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@10745a02
2023-04-15 12:37:24,430 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@3e2d8623
2023-04-15 12:37:24,430 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@72715e61
2023-04-15 12:37:24,430 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@72715e61
2023-04-15 12:37:24,430 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@68f776ee
2023-04-15 12:37:24,431 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@68f776ee
2023-04-15 12:37:24,431 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@5a6195b8
2023-04-15 12:37:24,431 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@5a6195b8
2023-04-15 12:37:24,432 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@5a6195b8
2023-04-15 12:37:24,432 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@8af1c49
2023-04-15 12:37:24,432 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@8af1c49
2023-04-15 12:37:24,432 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@8af1c49
2023-04-15 12:37:24,432 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@70d5d96b
2023-04-15 12:37:24,432 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@23469199
2023-04-15 12:37:24,433 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@75dc1c1c
2023-04-15 12:37:24,433 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@75dc1c1c
2023-04-15 12:37:24,433 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@5611bba
2023-04-15 12:37:24,433 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@5611bba
2023-04-15 12:37:24,433 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@5611bba
2023-04-15 12:37:24,434 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@5ba184fc
2023-04-15 12:37:24,434 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@4cfc0c48
2023-04-15 12:37:24,434 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@59d5c537
2023-04-15 12:37:24,434 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@59d5c537
2023-04-15 12:37:24,434 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@5464b97c
2023-04-15 12:37:24,434 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@5464b97c
2023-04-15 12:37:24,435 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@5464b97c
2023-04-15 12:37:24,435 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@3355168
2023-04-15 12:37:24,435 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@3355168
2023-04-15 12:37:24,435 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@2f07930a
2023-04-15 12:37:24,435 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@2f07930a
2023-04-15 12:37:24,435 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@580c17a0
2023-04-15 12:37:24,435 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@580c17a0
2023-04-15 12:37:24,435 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@29d2fa84
2023-04-15 12:37:24,435 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@29d2fa84
2023-04-15 12:37:24,437 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@4540c7
2023-04-15 12:37:24,437 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@4540c7
2023-04-15 12:37:24,437 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@13c90c06
2023-04-15 12:37:24,443 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@dae5e0
2023-04-15 12:37:24,443 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@dae5e0
2023-04-15 12:37:24,445 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@7417ef4f
2023-04-15 12:37:24,446 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@7417ef4f
2023-04-15 12:37:24,447 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@3feebf9c
2023-04-15 12:37:24,448 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@305e95a4
2023-04-15 12:37:24,448 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@55e42684
2023-04-15 12:37:24,448 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@18d610e1
2023-04-15 12:37:24,448 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@528e5e38
2023-04-15 12:37:24,448 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@16391278
2023-04-15 12:37:24,448 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@621dc63d
2023-04-15 12:37:24,449 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@4ae49387
2023-04-15 12:37:24,449 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@6abb7b7d
2023-04-15 12:37:24,492 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 12:37:24,494 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 12:37:24,511 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1b8d20e6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@e49437)
2023-04-15 12:37:24,511 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7645b7d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4c50cd7d)
2023-04-15 12:37:24,512 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3ea84e01) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1a4930cf)
2023-04-15 12:37:24,512 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3fd33f48) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@75a226ea)
2023-04-15 12:37:24,512 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@986b619) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5a1a20ae)
2023-04-15 12:37:24,512 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7c956dda) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@186481d4)
2023-04-15 12:37:24,512 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@24eecabf) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2ffa91dc)
2023-04-15 12:37:24,512 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@78d6c244) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@448086ab)
2023-04-15 12:37:24,512 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@16e907b6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6de610c6)
2023-04-15 12:37:24,513 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 12:37:24,514 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 12:37:24,514 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 12:37:24,515 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:37:24,515 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:37:24,517 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@75f4d8a8
2023-04-15 12:37:24,517 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@3feebf9c`
2023-04-15 12:37:24,521 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:37:24,521 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:37:24,521 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:37:24,521 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:37:24,521 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:37:24,522 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:37:24,523 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@35ab4260] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@76134b9b]
2023-04-15 12:37:24,804 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@35ab4260] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@57a5b03]
2023-04-15 12:37:25,177 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 12:37:25,184 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@57a5b03] for TypeConfiguration
2023-04-15 12:37:25,185 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:37:25,432 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 12:37:25,848 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 3.215 seconds (process running for 4.027)
2023-04-15 12:37:25,851 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 12:37:25,962 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=15, type=class java.lang.Long, identifying=true}'}]
2023-04-15 12:37:25,992 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 12:37:26,023 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:37:26,024 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:37:26,024 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:37:26,024 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:37:26,024 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:37:26,055 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 63ms
2023-04-15 12:37:26,066 INFO com.yuripe.batchType0A.Listener.JobCompletionNotificationListener [main] !!! JOB FINISHED! Time to verify the results
2023-04-15 12:37:26,074 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=15, type=class java.lang.Long, identifying=true}'}] and the following status: [COMPLETED] in 96ms
2023-04-15 12:37:26,231 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:37:26,232 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@57a5b03] for TypeConfiguration
2023-04-15 12:37:26,233 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@396c97b5] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@57a5b03]
2023-04-15 12:37:26,235 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 12:37:26,245 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 12:37:57,669 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 12:37:57,739 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 12:37:58,014 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 7000 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 12:37:58,015 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 12:37:58,592 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:37:58,593 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 12:37:58,609 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 11 ms. Found 0 JDBC repository interfaces.
2023-04-15 12:37:58,617 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:37:58,618 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 12:37:58,624 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 12:37:58,840 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 12:37:59,181 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4652c74d
2023-04-15 12:37:59,183 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 12:37:59,270 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 12:37:59,328 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 12:37:59,556 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 12:37:59,572 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:37:59,572 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:37:59,574 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:37:59,574 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:37:59,574 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:37:59,574 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 12:37:59,574 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 12:37:59,575 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:37:59,575 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:37:59,575 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:37:59,575 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:37:59,575 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:37:59,576 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:37:59,576 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:37:59,578 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:37:59,578 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:37:59,578 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:37:59,578 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:37:59,578 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:37:59,578 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 12:37:59,578 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 12:37:59,579 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 12:37:59,579 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@7ff6804a
2023-04-15 12:37:59,579 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@12aa519b
2023-04-15 12:37:59,579 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@7c5c20ed
2023-04-15 12:37:59,579 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@7c5c20ed
2023-04-15 12:37:59,580 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@7c5c20ed
2023-04-15 12:37:59,580 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@6113a26f
2023-04-15 12:37:59,580 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@6113a26f
2023-04-15 12:37:59,580 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@6113a26f
2023-04-15 12:37:59,581 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:37:59,581 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:37:59,581 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:37:59,581 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:37:59,581 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:37:59,581 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:37:59,581 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:37:59,583 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:37:59,583 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:37:59,583 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:37:59,584 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:37:59,584 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:37:59,584 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:37:59,584 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@7e31d53b
2023-04-15 12:37:59,584 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@7e31d53b
2023-04-15 12:37:59,585 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@7e31d53b
2023-04-15 12:37:59,585 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@68d8eb4f
2023-04-15 12:37:59,585 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@64757d56
2023-04-15 12:37:59,585 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@64757d56
2023-04-15 12:37:59,585 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@4813d0
2023-04-15 12:37:59,585 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@702096ef
2023-04-15 12:37:59,586 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@702096ef
2023-04-15 12:37:59,586 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@702096ef
2023-04-15 12:37:59,586 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@5f0d8937
2023-04-15 12:37:59,586 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@5f0d8937
2023-04-15 12:37:59,586 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@5f0d8937
2023-04-15 12:37:59,586 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@105dc04d
2023-04-15 12:37:59,587 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@504b8705
2023-04-15 12:37:59,587 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@24a8e40d
2023-04-15 12:37:59,587 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@24a8e40d
2023-04-15 12:37:59,587 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@175f859e
2023-04-15 12:37:59,587 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@175f859e
2023-04-15 12:37:59,587 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@69fe7090
2023-04-15 12:37:59,588 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@6501b105
2023-04-15 12:37:59,588 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@66ab924
2023-04-15 12:37:59,588 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@6df2af02
2023-04-15 12:37:59,588 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@779228dc
2023-04-15 12:37:59,588 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1f7336b2
2023-04-15 12:37:59,589 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@4c030fe1
2023-04-15 12:37:59,589 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@4c030fe1
2023-04-15 12:37:59,589 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@347123dc
2023-04-15 12:37:59,589 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@347123dc
2023-04-15 12:37:59,590 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@52433946
2023-04-15 12:37:59,590 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@52433946
2023-04-15 12:37:59,590 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@5403431a
2023-04-15 12:37:59,590 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@5403431a
2023-04-15 12:37:59,590 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@ab327c
2023-04-15 12:37:59,591 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@ab327c
2023-04-15 12:37:59,591 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3d798e76
2023-04-15 12:37:59,591 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@763b0996
2023-04-15 12:37:59,591 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@386e9fd8
2023-04-15 12:37:59,593 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@386e9fd8
2023-04-15 12:37:59,593 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@618f627b
2023-04-15 12:37:59,593 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@618f627b
2023-04-15 12:37:59,594 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@10745a02
2023-04-15 12:37:59,594 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@3e2d8623
2023-04-15 12:37:59,594 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@72715e61
2023-04-15 12:37:59,594 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@72715e61
2023-04-15 12:37:59,594 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@68f776ee
2023-04-15 12:37:59,595 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@68f776ee
2023-04-15 12:37:59,595 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@5a6195b8
2023-04-15 12:37:59,595 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@5a6195b8
2023-04-15 12:37:59,595 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@5a6195b8
2023-04-15 12:37:59,595 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@8af1c49
2023-04-15 12:37:59,595 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@8af1c49
2023-04-15 12:37:59,595 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@8af1c49
2023-04-15 12:37:59,595 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@70d5d96b
2023-04-15 12:37:59,596 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@23469199
2023-04-15 12:37:59,596 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@75dc1c1c
2023-04-15 12:37:59,596 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@75dc1c1c
2023-04-15 12:37:59,597 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@5611bba
2023-04-15 12:37:59,597 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@5611bba
2023-04-15 12:37:59,598 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@5611bba
2023-04-15 12:37:59,598 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@5ba184fc
2023-04-15 12:37:59,598 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@4cfc0c48
2023-04-15 12:37:59,598 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@59d5c537
2023-04-15 12:37:59,598 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@59d5c537
2023-04-15 12:37:59,598 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@5464b97c
2023-04-15 12:37:59,598 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@5464b97c
2023-04-15 12:37:59,598 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@5464b97c
2023-04-15 12:37:59,598 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@3355168
2023-04-15 12:37:59,599 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@3355168
2023-04-15 12:37:59,599 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@2f07930a
2023-04-15 12:37:59,599 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@2f07930a
2023-04-15 12:37:59,599 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@580c17a0
2023-04-15 12:37:59,599 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@580c17a0
2023-04-15 12:37:59,599 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@29d2fa84
2023-04-15 12:37:59,601 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@29d2fa84
2023-04-15 12:37:59,601 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@4540c7
2023-04-15 12:37:59,601 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@4540c7
2023-04-15 12:37:59,601 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@13c90c06
2023-04-15 12:37:59,606 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@dae5e0
2023-04-15 12:37:59,607 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@dae5e0
2023-04-15 12:37:59,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@7417ef4f
2023-04-15 12:37:59,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@7417ef4f
2023-04-15 12:37:59,610 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@3feebf9c
2023-04-15 12:37:59,610 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@305e95a4
2023-04-15 12:37:59,610 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@55e42684
2023-04-15 12:37:59,612 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@18d610e1
2023-04-15 12:37:59,612 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@528e5e38
2023-04-15 12:37:59,612 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@16391278
2023-04-15 12:37:59,612 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@621dc63d
2023-04-15 12:37:59,612 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@4ae49387
2023-04-15 12:37:59,612 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@6abb7b7d
2023-04-15 12:37:59,654 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 12:37:59,656 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 12:37:59,672 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1b8d20e6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@e49437)
2023-04-15 12:37:59,672 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7645b7d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4c50cd7d)
2023-04-15 12:37:59,672 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3ea84e01) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1a4930cf)
2023-04-15 12:37:59,673 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3fd33f48) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@75a226ea)
2023-04-15 12:37:59,673 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@986b619) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5a1a20ae)
2023-04-15 12:37:59,675 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7c956dda) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@186481d4)
2023-04-15 12:37:59,675 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@24eecabf) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2ffa91dc)
2023-04-15 12:37:59,675 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@78d6c244) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@448086ab)
2023-04-15 12:37:59,675 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@16e907b6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6de610c6)
2023-04-15 12:37:59,676 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 12:37:59,676 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 12:37:59,676 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 12:37:59,678 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:37:59,678 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:37:59,680 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@75f4d8a8
2023-04-15 12:37:59,680 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@3feebf9c`
2023-04-15 12:37:59,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:37:59,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:37:59,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:37:59,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:37:59,684 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:37:59,684 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:37:59,685 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@35ab4260] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@76134b9b]
2023-04-15 12:37:59,958 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@35ab4260] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@57a5b03]
2023-04-15 12:38:00,339 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 12:38:00,346 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@57a5b03] for TypeConfiguration
2023-04-15 12:38:00,348 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:38:00,590 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 12:38:01,030 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 3.159 seconds (process running for 3.988)
2023-04-15 12:38:01,033 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 12:38:01,151 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=16, type=class java.lang.Long, identifying=true}'}]
2023-04-15 12:38:01,180 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 12:38:01,218 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:38:01,219 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:38:01,219 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:38:01,219 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:38:01,220 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:38:01,266 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 86ms
2023-04-15 12:38:01,278 INFO com.yuripe.batchType0A.Listener.JobCompletionNotificationListener [main] !!! JOB FINISHED! Time to verify the results
2023-04-15 12:38:01,288 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=16, type=class java.lang.Long, identifying=true}'}] and the following status: [COMPLETED] in 120ms
2023-04-15 12:38:01,471 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:38:01,472 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@57a5b03] for TypeConfiguration
2023-04-15 12:38:01,473 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@f9b3f9b] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@57a5b03]
2023-04-15 12:38:01,475 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 12:38:01,485 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 12:40:01,440 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 12:40:01,511 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 12:40:01,784 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 1072 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 12:40:01,785 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 12:40:02,368 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:40:02,369 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 12:40:02,384 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 10 ms. Found 0 JDBC repository interfaces.
2023-04-15 12:40:02,391 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:40:02,394 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 12:40:02,399 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 12:40:02,627 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 12:40:03,016 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@28b523a
2023-04-15 12:40:03,020 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 12:40:03,124 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 12:40:03,189 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 12:40:03,436 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 12:40:03,451 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@49122853
2023-04-15 12:40:03,452 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@49122853
2023-04-15 12:40:03,452 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@49122853
2023-04-15 12:40:03,452 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@e97f115
2023-04-15 12:40:03,452 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@e97f115
2023-04-15 12:40:03,452 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@5d6b42cf
2023-04-15 12:40:03,453 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@5d6b42cf
2023-04-15 12:40:03,453 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@6f8ac8d5
2023-04-15 12:40:03,453 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@6f8ac8d5
2023-04-15 12:40:03,453 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@370225c7
2023-04-15 12:40:03,453 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@370225c7
2023-04-15 12:40:03,454 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@370225c7
2023-04-15 12:40:03,455 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@6ac756b
2023-04-15 12:40:03,455 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@6ac756b
2023-04-15 12:40:03,455 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@6ac756b
2023-04-15 12:40:03,455 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@1e29a81a
2023-04-15 12:40:03,455 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@1e29a81a
2023-04-15 12:40:03,455 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@1e29a81a
2023-04-15 12:40:03,455 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@1e29a81a
2023-04-15 12:40:03,456 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@7b4b8199
2023-04-15 12:40:03,456 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@4bbf20d1
2023-04-15 12:40:03,456 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@4bbf20d1
2023-04-15 12:40:03,456 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@6fced25c
2023-04-15 12:40:03,456 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@3cf4dec7
2023-04-15 12:40:03,457 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@1b94c789
2023-04-15 12:40:03,458 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@1b94c789
2023-04-15 12:40:03,458 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@1b94c789
2023-04-15 12:40:03,458 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@299fc582
2023-04-15 12:40:03,458 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@299fc582
2023-04-15 12:40:03,458 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@299fc582
2023-04-15 12:40:03,458 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@305aaedf
2023-04-15 12:40:03,459 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@305aaedf
2023-04-15 12:40:03,459 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@305aaedf
2023-04-15 12:40:03,459 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@2a425cf5
2023-04-15 12:40:03,459 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@2a425cf5
2023-04-15 12:40:03,459 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@2a425cf5
2023-04-15 12:40:03,459 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@17d76ebb
2023-04-15 12:40:03,460 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@17d76ebb
2023-04-15 12:40:03,460 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@17d76ebb
2023-04-15 12:40:03,460 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@40b31a16
2023-04-15 12:40:03,460 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@40b31a16
2023-04-15 12:40:03,461 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@25fa6889
2023-04-15 12:40:03,461 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@25fa6889
2023-04-15 12:40:03,461 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@1de73d37
2023-04-15 12:40:03,461 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@1de73d37
2023-04-15 12:40:03,461 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@1de73d37
2023-04-15 12:40:03,462 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@31693a86
2023-04-15 12:40:03,462 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:40:03,462 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:40:03,462 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:40:03,462 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 12:40:03,462 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 12:40:03,463 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 12:40:03,463 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:40:03,463 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:40:03,463 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:40:03,463 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:40:03,464 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:40:03,464 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 12:40:03,464 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 12:40:03,464 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 12:40:03,464 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 12:40:03,464 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:40:03,465 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 12:40:03,465 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 12:40:03,465 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@7ff6804a
2023-04-15 12:40:03,465 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@12aa519b
2023-04-15 12:40:03,466 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@7c5c20ed
2023-04-15 12:40:03,466 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@6113a26f
2023-04-15 12:40:03,466 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@6113a26f
2023-04-15 12:40:03,466 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:40:03,466 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:40:03,467 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:40:03,467 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:40:03,467 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:40:03,467 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:40:03,467 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:40:03,469 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:40:03,469 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:40:03,469 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7e31d53b
2023-04-15 12:40:03,469 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@68d8eb4f
2023-04-15 12:40:03,470 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@68d8eb4f
2023-04-15 12:40:03,470 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@64757d56
2023-04-15 12:40:03,470 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@64757d56
2023-04-15 12:40:03,471 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@4813d0
2023-04-15 12:40:03,471 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@702096ef
2023-04-15 12:40:03,471 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@5f0d8937
2023-04-15 12:40:03,471 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@5f0d8937
2023-04-15 12:40:03,471 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@105dc04d
2023-04-15 12:40:03,472 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@105dc04d
2023-04-15 12:40:03,472 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@504b8705
2023-04-15 12:40:03,472 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@504b8705
2023-04-15 12:40:03,472 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@504b8705
2023-04-15 12:40:03,472 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@24a8e40d
2023-04-15 12:40:03,473 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@24a8e40d
2023-04-15 12:40:03,473 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@24a8e40d
2023-04-15 12:40:03,473 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@175f859e
2023-04-15 12:40:03,473 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@69fe7090
2023-04-15 12:40:03,473 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@6501b105
2023-04-15 12:40:03,474 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@6501b105
2023-04-15 12:40:03,474 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@66ab924
2023-04-15 12:40:03,474 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@66ab924
2023-04-15 12:40:03,474 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@66ab924
2023-04-15 12:40:03,474 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@6df2af02
2023-04-15 12:40:03,475 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@779228dc
2023-04-15 12:40:03,475 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@1f7336b2
2023-04-15 12:40:03,475 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@1f7336b2
2023-04-15 12:40:03,475 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@4c030fe1
2023-04-15 12:40:03,475 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@4c030fe1
2023-04-15 12:40:03,476 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@4c030fe1
2023-04-15 12:40:03,477 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@347123dc
2023-04-15 12:40:03,477 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@347123dc
2023-04-15 12:40:03,478 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@52433946
2023-04-15 12:40:03,479 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@52433946
2023-04-15 12:40:03,479 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@5403431a
2023-04-15 12:40:03,479 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@5403431a
2023-04-15 12:40:03,479 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@ab327c
2023-04-15 12:40:03,480 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@ab327c
2023-04-15 12:40:03,480 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@3d798e76
2023-04-15 12:40:03,480 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@3d798e76
2023-04-15 12:40:03,480 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@763b0996
2023-04-15 12:40:03,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@53ba7997
2023-04-15 12:40:03,486 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@53ba7997
2023-04-15 12:40:03,489 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@66e1b2a
2023-04-15 12:40:03,490 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@66e1b2a
2023-04-15 12:40:03,491 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@429e7914
2023-04-15 12:40:03,492 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@298263fa
2023-04-15 12:40:03,492 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@466fedfa
2023-04-15 12:40:03,492 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@1a7d0c9f
2023-04-15 12:40:03,493 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@2b1a901d
2023-04-15 12:40:03,493 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@11bdab37
2023-04-15 12:40:03,493 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@280484c7
2023-04-15 12:40:03,493 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@5a6f6cac
2023-04-15 12:40:03,493 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@258a8584
2023-04-15 12:40:03,531 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 12:40:03,532 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 12:40:03,546 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@527d48db) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@194037f9)
2023-04-15 12:40:03,546 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2335aef2) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@17003497)
2023-04-15 12:40:03,546 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2f038d3c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@376498da)
2023-04-15 12:40:03,547 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@39a8e2fa) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2f9addd4)
2023-04-15 12:40:03,547 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1c43df76) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@ff2266c)
2023-04-15 12:40:03,547 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@71b3ba5a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@83ebdc5)
2023-04-15 12:40:03,548 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@a047bdb) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@14dbfdb1)
2023-04-15 12:40:03,548 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7856f41a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5fbae40)
2023-04-15 12:40:03,548 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2c08c787) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@67f591c2)
2023-04-15 12:40:03,549 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 12:40:03,549 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 12:40:03,550 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 12:40:03,551 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:40:03,553 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:40:03,555 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@7bce9ce4
2023-04-15 12:40:03,555 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@429e7914`
2023-04-15 12:40:03,559 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:40:03,560 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:40:03,560 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:40:03,560 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:40:03,560 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:40:03,560 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:40:03,562 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@6f68756d] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@359865a2]
2023-04-15 12:40:03,809 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@6f68756d] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@52d59507]
2023-04-15 12:40:04,220 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 12:40:04,228 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@52d59507] for TypeConfiguration
2023-04-15 12:40:04,229 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:40:04,472 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 12:40:04,893 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 3.255 seconds (process running for 4.093)
2023-04-15 12:40:04,895 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 12:40:05,000 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=17, type=class java.lang.Long, identifying=true}'}]
2023-04-15 12:40:05,034 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 12:40:05,061 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:40:05,061 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:40:05,062 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:40:05,062 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:40:05,062 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:40:05,075 ERROR org.springframework.batch.core.step.AbstractStep [main] Encountered an error executing step step1 in job importUserJob
org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [INSERT INTO BATCH.policy (contractor_customer_code, effective_date, expire_date, insured_customer_code, policy_number, state) VALUES (?, ?, ?, ?, ?, ?)]; Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:103)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1538)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:667)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:691)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1034)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:373)
	at org.springframework.batch.item.database.JdbcBatchItemWriter.write(JdbcBatchItemWriter.java:190)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:137)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:702)
	at org.springframework.batch.item.database.JdbcBatchItemWriter$$SpringCGLIB$$0.write(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.writeItems(SimpleChunkProcessor.java:203)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.doWrite(SimpleChunkProcessor.java:170)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.write(SimpleChunkProcessor.java:297)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.process(SimpleChunkProcessor.java:227)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:75)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:389)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:313)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:256)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:362)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:206)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:139)
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:241)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:227)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:178)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:166)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:161)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:156)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:760)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.sql.BatchUpdateException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at com.mysql.cj.util.Util.handleNewInstance(Util.java:192)
	at com.mysql.cj.util.Util.getInstance(Util.java:167)
	at com.mysql.cj.util.Util.getInstance(Util.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLError.createBatchUpdateException(SQLError.java:224)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:816)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchInternal(ClientPreparedStatement.java:418)
	at com.mysql.cj.jdbc.StatementImpl.executeBatch(StatementImpl.java:795)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1047)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:651)
	... 128 common frames omitted
Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:795)
	... 134 common frames omitted
2023-04-15 12:40:05,080 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 46ms
2023-04-15 12:40:05,102 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=17, type=class java.lang.Long, identifying=true}'}] and the following status: [FAILED] in 84ms
2023-04-15 12:40:05,248 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:40:05,249 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@52d59507] for TypeConfiguration
2023-04-15 12:40:05,249 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@32f19f50] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@52d59507]
2023-04-15 12:40:05,251 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 12:40:05,262 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 12:43:19,352 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 12:43:19,422 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 12:43:19,690 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 2116 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 12:43:19,691 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 12:43:20,255 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:43:20,255 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 12:43:20,270 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 11 ms. Found 0 JDBC repository interfaces.
2023-04-15 12:43:20,277 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:43:20,278 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 12:43:20,283 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 12:43:20,488 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 12:43:20,835 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@71d55b7e
2023-04-15 12:43:20,838 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 12:43:20,945 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 12:43:21,014 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 12:43:21,254 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 12:43:21,265 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6f8ac8d5
2023-04-15 12:43:21,265 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6f8ac8d5
2023-04-15 12:43:21,265 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@6f8ac8d5
2023-04-15 12:43:21,265 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@370225c7
2023-04-15 12:43:21,265 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@370225c7
2023-04-15 12:43:21,265 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@6ac756b
2023-04-15 12:43:21,266 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@6ac756b
2023-04-15 12:43:21,266 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@156324b
2023-04-15 12:43:21,266 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@156324b
2023-04-15 12:43:21,267 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@38a38ed4
2023-04-15 12:43:21,267 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@38a38ed4
2023-04-15 12:43:21,268 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@38a38ed4
2023-04-15 12:43:21,268 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@1e29a81a
2023-04-15 12:43:21,269 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@1e29a81a
2023-04-15 12:43:21,269 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@1e29a81a
2023-04-15 12:43:21,269 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@6fced25c
2023-04-15 12:43:21,270 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@6fced25c
2023-04-15 12:43:21,270 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@6fced25c
2023-04-15 12:43:21,270 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@6fced25c
2023-04-15 12:43:21,270 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@3cf4dec7
2023-04-15 12:43:21,271 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@1b94c789
2023-04-15 12:43:21,271 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@1b94c789
2023-04-15 12:43:21,271 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@299fc582
2023-04-15 12:43:21,271 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@305aaedf
2023-04-15 12:43:21,271 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@2a425cf5
2023-04-15 12:43:21,272 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@2a425cf5
2023-04-15 12:43:21,273 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@2a425cf5
2023-04-15 12:43:21,273 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@17d76ebb
2023-04-15 12:43:21,273 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@17d76ebb
2023-04-15 12:43:21,273 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@17d76ebb
2023-04-15 12:43:21,274 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@40b31a16
2023-04-15 12:43:21,274 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@40b31a16
2023-04-15 12:43:21,274 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@40b31a16
2023-04-15 12:43:21,274 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@25fa6889
2023-04-15 12:43:21,274 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@25fa6889
2023-04-15 12:43:21,275 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@25fa6889
2023-04-15 12:43:21,275 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@1de73d37
2023-04-15 12:43:21,275 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@1de73d37
2023-04-15 12:43:21,275 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@1de73d37
2023-04-15 12:43:21,275 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@31693a86
2023-04-15 12:43:21,275 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@31693a86
2023-04-15 12:43:21,276 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:43:21,276 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:43:21,276 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:43:21,276 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:43:21,276 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:43:21,276 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 12:43:21,277 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:43:21,278 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:43:21,278 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:43:21,278 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:43:21,278 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:43:21,278 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:43:21,279 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 12:43:21,279 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 12:43:21,279 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 12:43:21,279 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 12:43:21,279 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:43:21,280 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 12:43:21,280 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 12:43:21,280 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 12:43:21,281 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 12:43:21,281 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@7ff6804a
2023-04-15 12:43:21,281 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@12aa519b
2023-04-15 12:43:21,281 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@7c5c20ed
2023-04-15 12:43:21,282 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@6113a26f
2023-04-15 12:43:21,282 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:43:21,282 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:43:21,283 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:43:21,283 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:43:21,284 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:43:21,284 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:43:21,285 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:43:21,285 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:43:21,285 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@7e31d53b
2023-04-15 12:43:21,285 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@7e31d53b
2023-04-15 12:43:21,286 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@68d8eb4f
2023-04-15 12:43:21,289 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@68d8eb4f
2023-04-15 12:43:21,289 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@64757d56
2023-04-15 12:43:21,289 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@4813d0
2023-04-15 12:43:21,289 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@702096ef
2023-04-15 12:43:21,290 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@702096ef
2023-04-15 12:43:21,292 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@5f0d8937
2023-04-15 12:43:21,292 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@5f0d8937
2023-04-15 12:43:21,293 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@105dc04d
2023-04-15 12:43:21,293 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@504b8705
2023-04-15 12:43:21,293 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@24a8e40d
2023-04-15 12:43:21,293 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@24a8e40d
2023-04-15 12:43:21,295 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@175f859e
2023-04-15 12:43:21,295 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@175f859e
2023-04-15 12:43:21,295 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@69fe7090
2023-04-15 12:43:21,296 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@69fe7090
2023-04-15 12:43:21,296 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@69fe7090
2023-04-15 12:43:21,296 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@6501b105
2023-04-15 12:43:21,296 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@6501b105
2023-04-15 12:43:21,296 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@6501b105
2023-04-15 12:43:21,296 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@66ab924
2023-04-15 12:43:21,297 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@6df2af02
2023-04-15 12:43:21,297 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@779228dc
2023-04-15 12:43:21,297 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@779228dc
2023-04-15 12:43:21,298 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@1f7336b2
2023-04-15 12:43:21,299 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@1f7336b2
2023-04-15 12:43:21,299 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@1f7336b2
2023-04-15 12:43:21,299 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@4c030fe1
2023-04-15 12:43:21,299 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@347123dc
2023-04-15 12:43:21,299 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@52433946
2023-04-15 12:43:21,299 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@52433946
2023-04-15 12:43:21,300 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@5403431a
2023-04-15 12:43:21,300 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@5403431a
2023-04-15 12:43:21,300 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@5403431a
2023-04-15 12:43:21,301 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@ab327c
2023-04-15 12:43:21,302 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@ab327c
2023-04-15 12:43:21,302 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@3d798e76
2023-04-15 12:43:21,303 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@3d798e76
2023-04-15 12:43:21,303 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@763b0996
2023-04-15 12:43:21,304 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@763b0996
2023-04-15 12:43:21,304 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@386e9fd8
2023-04-15 12:43:21,304 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@386e9fd8
2023-04-15 12:43:21,304 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@618f627b
2023-04-15 12:43:21,304 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@618f627b
2023-04-15 12:43:21,305 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@10745a02
2023-04-15 12:43:21,311 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@7858d31d
2023-04-15 12:43:21,311 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@7858d31d
2023-04-15 12:43:21,313 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@769b0752
2023-04-15 12:43:21,313 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@769b0752
2023-04-15 12:43:21,315 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@1a7d0c9f
2023-04-15 12:43:21,316 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@2b1a901d
2023-04-15 12:43:21,316 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@11bdab37
2023-04-15 12:43:21,316 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@280484c7
2023-04-15 12:43:21,316 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@5a6f6cac
2023-04-15 12:43:21,316 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@258a8584
2023-04-15 12:43:21,316 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@59127611
2023-04-15 12:43:21,317 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@553ce348
2023-04-15 12:43:21,317 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@7417ef4f
2023-04-15 12:43:21,356 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 12:43:21,358 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 12:43:21,375 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@17003497) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2f038d3c)
2023-04-15 12:43:21,375 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@376498da) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@39a8e2fa)
2023-04-15 12:43:21,376 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2f9addd4) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1c43df76)
2023-04-15 12:43:21,376 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@ff2266c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@71b3ba5a)
2023-04-15 12:43:21,376 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@83ebdc5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@a047bdb)
2023-04-15 12:43:21,376 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@14dbfdb1) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7856f41a)
2023-04-15 12:43:21,376 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5fbae40) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2c08c787)
2023-04-15 12:43:21,377 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@67f591c2) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@284c4f02)
2023-04-15 12:43:21,377 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@709d6de5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1a43a88e)
2023-04-15 12:43:21,378 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 12:43:21,378 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 12:43:21,378 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 12:43:21,381 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:43:21,381 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:43:21,383 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@fd87c22
2023-04-15 12:43:21,383 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@1a7d0c9f`
2023-04-15 12:43:21,387 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:43:21,388 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:43:21,388 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:43:21,388 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:43:21,388 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:43:21,388 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:43:21,390 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@25d0b918] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@9bf63d2]
2023-04-15 12:43:21,628 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@25d0b918] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@33f2eb04]
2023-04-15 12:43:21,944 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 12:43:21,952 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@33f2eb04] for TypeConfiguration
2023-04-15 12:43:21,954 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:43:22,193 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 12:43:22,585 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 3.037 seconds (process running for 3.866)
2023-04-15 12:43:22,587 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 12:43:22,695 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=18, type=class java.lang.Long, identifying=true}'}]
2023-04-15 12:43:22,724 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 12:43:22,751 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:43:22,751 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:43:22,751 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:43:22,751 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:43:22,753 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:43:22,767 ERROR org.springframework.batch.core.step.AbstractStep [main] Encountered an error executing step step1 in job importUserJob
org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [INSERT INTO BATCH.policy (contractor_customer_code, effective_date, expire_date, insured_customer_code, policy_number, state) VALUES (?, ?, ?, ?, ?, ?)]; Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:103)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1538)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:667)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:691)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1034)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:373)
	at org.springframework.batch.item.database.JdbcBatchItemWriter.write(JdbcBatchItemWriter.java:190)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:137)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:702)
	at org.springframework.batch.item.database.JdbcBatchItemWriter$$SpringCGLIB$$0.write(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.writeItems(SimpleChunkProcessor.java:203)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.doWrite(SimpleChunkProcessor.java:170)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.write(SimpleChunkProcessor.java:297)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.process(SimpleChunkProcessor.java:227)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:75)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:389)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:313)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:256)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:362)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:206)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:139)
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:241)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:227)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:178)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:166)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:161)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:156)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:760)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.sql.BatchUpdateException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at com.mysql.cj.util.Util.handleNewInstance(Util.java:192)
	at com.mysql.cj.util.Util.getInstance(Util.java:167)
	at com.mysql.cj.util.Util.getInstance(Util.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLError.createBatchUpdateException(SQLError.java:224)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:816)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchInternal(ClientPreparedStatement.java:418)
	at com.mysql.cj.jdbc.StatementImpl.executeBatch(StatementImpl.java:795)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1047)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:651)
	... 128 common frames omitted
Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:795)
	... 134 common frames omitted
2023-04-15 12:43:22,773 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 48ms
2023-04-15 12:43:22,782 INFO com.yuripe.batchType0A.Listener.JobFailureNotificationListener [main] !!! JOB FAILED! Time to verify the results
2023-04-15 12:43:22,789 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=18, type=class java.lang.Long, identifying=true}'}] and the following status: [FAILED] in 80ms
2023-04-15 12:43:22,949 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:43:22,950 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@33f2eb04] for TypeConfiguration
2023-04-15 12:43:22,950 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@1111a957] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@33f2eb04]
2023-04-15 12:43:22,952 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 12:43:22,967 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 12:47:32,987 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 12:47:33,058 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 12:47:33,323 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 6964 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 12:47:33,324 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 12:47:33,920 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:47:33,921 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 12:47:33,939 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 13 ms. Found 0 JDBC repository interfaces.
2023-04-15 12:47:33,952 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:47:33,953 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 12:47:33,962 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 3 ms. Found 0 JPA repository interfaces.
2023-04-15 12:47:34,223 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 12:47:34,588 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@756808cc
2023-04-15 12:47:34,591 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 12:47:34,696 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 12:47:34,742 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 12:47:34,990 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 12:47:35,001 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@70884875
2023-04-15 12:47:35,002 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@70884875
2023-04-15 12:47:35,002 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@70884875
2023-04-15 12:47:35,002 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@7019d619
2023-04-15 12:47:35,002 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@7019d619
2023-04-15 12:47:35,003 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@2a5c6b76
2023-04-15 12:47:35,003 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@2a5c6b76
2023-04-15 12:47:35,003 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@ff1f465
2023-04-15 12:47:35,003 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@ff1f465
2023-04-15 12:47:35,004 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@3d88ce0e
2023-04-15 12:47:35,004 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@3d88ce0e
2023-04-15 12:47:35,004 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@3d88ce0e
2023-04-15 12:47:35,004 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@31f7eb8
2023-04-15 12:47:35,005 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@31f7eb8
2023-04-15 12:47:35,005 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@31f7eb8
2023-04-15 12:47:35,005 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@31006a75
2023-04-15 12:47:35,005 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@31006a75
2023-04-15 12:47:35,005 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@31006a75
2023-04-15 12:47:35,005 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@31006a75
2023-04-15 12:47:35,006 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@49122853
2023-04-15 12:47:35,006 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@e97f115
2023-04-15 12:47:35,007 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@e97f115
2023-04-15 12:47:35,007 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@5d6b42cf
2023-04-15 12:47:35,008 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@6f8ac8d5
2023-04-15 12:47:35,008 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@370225c7
2023-04-15 12:47:35,008 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@370225c7
2023-04-15 12:47:35,009 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@370225c7
2023-04-15 12:47:35,009 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@6ac756b
2023-04-15 12:47:35,009 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@6ac756b
2023-04-15 12:47:35,009 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@6ac756b
2023-04-15 12:47:35,009 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@156324b
2023-04-15 12:47:35,009 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@156324b
2023-04-15 12:47:35,010 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@156324b
2023-04-15 12:47:35,010 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@38a38ed4
2023-04-15 12:47:35,010 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@38a38ed4
2023-04-15 12:47:35,010 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@38a38ed4
2023-04-15 12:47:35,011 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@1e29a81a
2023-04-15 12:47:35,011 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@1e29a81a
2023-04-15 12:47:35,011 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@1e29a81a
2023-04-15 12:47:35,011 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@7b4b8199
2023-04-15 12:47:35,011 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@7b4b8199
2023-04-15 12:47:35,012 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@4bbf20d1
2023-04-15 12:47:35,012 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@4bbf20d1
2023-04-15 12:47:35,012 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@6fced25c
2023-04-15 12:47:35,012 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@6fced25c
2023-04-15 12:47:35,012 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@6fced25c
2023-04-15 12:47:35,013 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@3cf4dec7
2023-04-15 12:47:35,013 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@1b94c789
2023-04-15 12:47:35,013 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@1b94c789
2023-04-15 12:47:35,013 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@299fc582
2023-04-15 12:47:35,014 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@305aaedf
2023-04-15 12:47:35,014 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@305aaedf
2023-04-15 12:47:35,014 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@305aaedf
2023-04-15 12:47:35,014 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@2a425cf5
2023-04-15 12:47:35,015 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@2a425cf5
2023-04-15 12:47:35,015 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@2a425cf5
2023-04-15 12:47:35,015 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@17d76ebb
2023-04-15 12:47:35,015 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@40b31a16
2023-04-15 12:47:35,015 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@25fa6889
2023-04-15 12:47:35,016 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@25fa6889
2023-04-15 12:47:35,016 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@1de73d37
2023-04-15 12:47:35,016 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@1de73d37
2023-04-15 12:47:35,017 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@31693a86
2023-04-15 12:47:35,018 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:47:35,018 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:47:35,018 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 12:47:35,018 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:47:35,019 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:47:35,019 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:47:35,019 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:47:35,019 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 12:47:35,019 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 12:47:35,020 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 12:47:35,020 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 12:47:35,020 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:47:35,020 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:47:35,020 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 12:47:35,021 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 12:47:35,021 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 12:47:35,021 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7ff6804a
2023-04-15 12:47:35,021 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@12aa519b
2023-04-15 12:47:35,022 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@12aa519b
2023-04-15 12:47:35,022 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@7c5c20ed
2023-04-15 12:47:35,023 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@7c5c20ed
2023-04-15 12:47:35,023 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@6113a26f
2023-04-15 12:47:35,023 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:47:35,023 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:47:35,023 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:47:35,023 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:47:35,023 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:47:35,025 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:47:35,025 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:47:35,025 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:47:35,025 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:47:35,026 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:47:35,026 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:47:35,026 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7e31d53b
2023-04-15 12:47:35,027 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@68d8eb4f
2023-04-15 12:47:35,027 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@64757d56
2023-04-15 12:47:35,027 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@64757d56
2023-04-15 12:47:35,027 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@4813d0
2023-04-15 12:47:35,027 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@4813d0
2023-04-15 12:47:35,027 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@4813d0
2023-04-15 12:47:35,027 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@702096ef
2023-04-15 12:47:35,027 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@5f0d8937
2023-04-15 12:47:35,027 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@105dc04d
2023-04-15 12:47:35,027 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@105dc04d
2023-04-15 12:47:35,028 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@504b8705
2023-04-15 12:47:35,028 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@504b8705
2023-04-15 12:47:35,028 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@504b8705
2023-04-15 12:47:35,029 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@24a8e40d
2023-04-15 12:47:35,029 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@24a8e40d
2023-04-15 12:47:35,029 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@175f859e
2023-04-15 12:47:35,029 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@175f859e
2023-04-15 12:47:35,029 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@69fe7090
2023-04-15 12:47:35,031 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@69fe7090
2023-04-15 12:47:35,031 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@6501b105
2023-04-15 12:47:35,031 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@6501b105
2023-04-15 12:47:35,031 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@66ab924
2023-04-15 12:47:35,031 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@66ab924
2023-04-15 12:47:35,031 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@6df2af02
2023-04-15 12:47:35,035 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@5a51336a
2023-04-15 12:47:35,036 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@5a51336a
2023-04-15 12:47:35,038 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@14656be5
2023-04-15 12:47:35,038 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@14656be5
2023-04-15 12:47:35,039 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@2c815fdc
2023-04-15 12:47:35,039 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@769b0752
2023-04-15 12:47:35,039 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@dae5e0
2023-04-15 12:47:35,039 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@59a94d0f
2023-04-15 12:47:35,039 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@7ff09659
2023-04-15 12:47:35,040 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@517fbf62
2023-04-15 12:47:35,040 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@65db548
2023-04-15 12:47:35,040 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@150f41b9
2023-04-15 12:47:35,040 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@6e364f1f
2023-04-15 12:47:35,083 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 12:47:35,085 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 12:47:35,104 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@69499c6f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3451fc88)
2023-04-15 12:47:35,104 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1e0294a7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3041beb3)
2023-04-15 12:47:35,104 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@15cee630) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2e40fdbd)
2023-04-15 12:47:35,104 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@246de37e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@19647566)
2023-04-15 12:47:35,104 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7b79ff1c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@527d48db)
2023-04-15 12:47:35,104 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@194037f9) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2335aef2)
2023-04-15 12:47:35,106 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@17003497) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2f038d3c)
2023-04-15 12:47:35,106 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@376498da) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@39a8e2fa)
2023-04-15 12:47:35,106 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2f9addd4) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1c43df76)
2023-04-15 12:47:35,107 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 12:47:35,107 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 12:47:35,107 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 12:47:35,108 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:47:35,109 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:47:35,110 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@56478522
2023-04-15 12:47:35,110 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@2c815fdc`
2023-04-15 12:47:35,114 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:47:35,114 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:47:35,115 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:47:35,115 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:47:35,115 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:47:35,115 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:47:35,117 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@56cd5d76] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@77cd235b]
2023-04-15 12:47:35,379 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@56cd5d76] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@c0004b7]
2023-04-15 12:47:35,714 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 12:47:35,722 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@c0004b7] for TypeConfiguration
2023-04-15 12:47:35,725 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:47:35,954 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 12:47:36,398 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 3.219 seconds (process running for 4.082)
2023-04-15 12:47:36,398 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 12:47:36,507 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=19, type=class java.lang.Long, identifying=true}'}]
2023-04-15 12:47:36,541 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 12:47:36,569 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:47:36,569 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:47:36,569 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:47:36,569 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:47:36,570 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:47:36,585 ERROR org.springframework.batch.core.step.AbstractStep [main] Encountered an error executing step step1 in job importUserJob
org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [INSERT INTO BATCH.policy (contractor_customer_code, effective_date, expire_date, insured_customer_code, policy_number, state) VALUES (?, ?, ?, ?, ?, ?)]; Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:103)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1538)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:667)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:691)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1034)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:373)
	at org.springframework.batch.item.database.JdbcBatchItemWriter.write(JdbcBatchItemWriter.java:190)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:137)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:702)
	at org.springframework.batch.item.database.JdbcBatchItemWriter$$SpringCGLIB$$0.write(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.writeItems(SimpleChunkProcessor.java:203)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.doWrite(SimpleChunkProcessor.java:170)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.write(SimpleChunkProcessor.java:297)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.process(SimpleChunkProcessor.java:227)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:75)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:389)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:313)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:256)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:362)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:206)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:139)
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:241)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:227)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:178)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:166)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:161)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:156)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:760)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.sql.BatchUpdateException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at com.mysql.cj.util.Util.handleNewInstance(Util.java:192)
	at com.mysql.cj.util.Util.getInstance(Util.java:167)
	at com.mysql.cj.util.Util.getInstance(Util.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLError.createBatchUpdateException(SQLError.java:224)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:816)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchInternal(ClientPreparedStatement.java:418)
	at com.mysql.cj.jdbc.StatementImpl.executeBatch(StatementImpl.java:795)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1047)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:651)
	... 128 common frames omitted
Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:795)
	... 134 common frames omitted
2023-04-15 12:47:36,590 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 47ms
2023-04-15 12:47:36,601 INFO com.yuripe.batchType0A.Listener.JobFailureNotificationListener [main] !!! JOB FAILED! Time to verify the results
2023-04-15 12:47:36,611 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=19, type=class java.lang.Long, identifying=true}'}] and the following status: [FAILED] in 83ms
2023-04-15 12:47:36,756 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:47:36,757 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@c0004b7] for TypeConfiguration
2023-04-15 12:47:36,758 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@29e3363e] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@c0004b7]
2023-04-15 12:47:36,761 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 12:47:36,770 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 12:54:43,898 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 12:54:43,972 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 12:54:44,260 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 13808 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 12:54:44,261 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 12:54:44,852 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:54:44,853 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 12:54:44,867 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 9 ms. Found 0 JDBC repository interfaces.
2023-04-15 12:54:44,877 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:54:44,879 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 12:54:44,884 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 12:54:45,093 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 12:54:45,433 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@28768e25
2023-04-15 12:54:45,436 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 12:54:45,528 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 12:54:45,581 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 12:54:45,832 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 12:54:45,847 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@55638165
2023-04-15 12:54:45,848 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@55638165
2023-04-15 12:54:45,848 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@55638165
2023-04-15 12:54:45,848 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@4fa91d5b
2023-04-15 12:54:45,848 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@4fa91d5b
2023-04-15 12:54:45,849 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@7ce30c0b
2023-04-15 12:54:45,849 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@7ce30c0b
2023-04-15 12:54:45,849 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@1d7f2f0a
2023-04-15 12:54:45,849 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@1d7f2f0a
2023-04-15 12:54:45,849 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@54defd69
2023-04-15 12:54:45,850 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@54defd69
2023-04-15 12:54:45,850 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@54defd69
2023-04-15 12:54:45,851 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@531a716c
2023-04-15 12:54:45,851 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@531a716c
2023-04-15 12:54:45,851 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@531a716c
2023-04-15 12:54:45,851 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@70884875
2023-04-15 12:54:45,851 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@70884875
2023-04-15 12:54:45,851 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@70884875
2023-04-15 12:54:45,851 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@70884875
2023-04-15 12:54:45,853 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@7019d619
2023-04-15 12:54:45,853 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@2a5c6b76
2023-04-15 12:54:45,853 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@2a5c6b76
2023-04-15 12:54:45,853 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@ff1f465
2023-04-15 12:54:45,853 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@3d88ce0e
2023-04-15 12:54:45,854 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@31f7eb8
2023-04-15 12:54:45,854 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@31f7eb8
2023-04-15 12:54:45,854 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@31f7eb8
2023-04-15 12:54:45,854 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@4ad1a276
2023-04-15 12:54:45,855 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@4ad1a276
2023-04-15 12:54:45,855 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@4ad1a276
2023-04-15 12:54:45,855 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@4a833595
2023-04-15 12:54:45,855 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@4a833595
2023-04-15 12:54:45,855 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@4a833595
2023-04-15 12:54:45,856 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@31006a75
2023-04-15 12:54:45,856 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@31006a75
2023-04-15 12:54:45,856 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@31006a75
2023-04-15 12:54:45,856 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@49122853
2023-04-15 12:54:45,856 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@49122853
2023-04-15 12:54:45,857 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@49122853
2023-04-15 12:54:45,858 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@e97f115
2023-04-15 12:54:45,858 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@e97f115
2023-04-15 12:54:45,858 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@5d6b42cf
2023-04-15 12:54:45,858 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@5d6b42cf
2023-04-15 12:54:45,859 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@6f8ac8d5
2023-04-15 12:54:45,859 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@6f8ac8d5
2023-04-15 12:54:45,859 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@6f8ac8d5
2023-04-15 12:54:45,859 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@370225c7
2023-04-15 12:54:45,859 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@6ac756b
2023-04-15 12:54:45,860 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@6ac756b
2023-04-15 12:54:45,860 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@156324b
2023-04-15 12:54:45,860 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@38a38ed4
2023-04-15 12:54:45,860 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@38a38ed4
2023-04-15 12:54:45,860 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@38a38ed4
2023-04-15 12:54:45,860 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@1e29a81a
2023-04-15 12:54:45,860 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@1e29a81a
2023-04-15 12:54:45,860 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@1e29a81a
2023-04-15 12:54:45,861 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@7b4b8199
2023-04-15 12:54:45,861 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@4bbf20d1
2023-04-15 12:54:45,861 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@6fced25c
2023-04-15 12:54:45,861 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@6fced25c
2023-04-15 12:54:45,861 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@3cf4dec7
2023-04-15 12:54:45,861 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@3cf4dec7
2023-04-15 12:54:45,861 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@1b94c789
2023-04-15 12:54:45,862 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@299fc582
2023-04-15 12:54:45,862 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@305aaedf
2023-04-15 12:54:45,862 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@2a425cf5
2023-04-15 12:54:45,862 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@17d76ebb
2023-04-15 12:54:45,862 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@40b31a16
2023-04-15 12:54:45,864 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@25fa6889
2023-04-15 12:54:45,864 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@25fa6889
2023-04-15 12:54:45,864 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@1de73d37
2023-04-15 12:54:45,864 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@1de73d37
2023-04-15 12:54:45,864 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@31693a86
2023-04-15 12:54:45,864 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@31693a86
2023-04-15 12:54:45,864 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:54:45,865 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:54:45,865 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:54:45,865 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:54:45,865 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 12:54:45,865 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:54:45,865 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:54:45,865 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:54:45,866 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:54:45,866 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:54:45,866 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 12:54:45,866 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 12:54:45,866 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:54:45,866 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:54:45,867 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 12:54:45,867 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 12:54:45,867 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 12:54:45,867 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 12:54:45,867 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 12:54:45,868 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@7ff6804a
2023-04-15 12:54:45,868 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@7ff6804a
2023-04-15 12:54:45,868 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@7ff6804a
2023-04-15 12:54:45,868 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@12aa519b
2023-04-15 12:54:45,868 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@7c5c20ed
2023-04-15 12:54:45,868 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@6113a26f
2023-04-15 12:54:45,869 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@6113a26f
2023-04-15 12:54:45,869 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:54:45,869 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:54:45,869 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:54:45,869 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:54:45,869 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:54:45,869 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:54:45,870 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:54:45,870 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:54:45,870 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:54:45,870 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:54:45,870 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@7e31d53b
2023-04-15 12:54:45,870 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@7e31d53b
2023-04-15 12:54:45,871 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@68d8eb4f
2023-04-15 12:54:45,871 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@68d8eb4f
2023-04-15 12:54:45,871 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@64757d56
2023-04-15 12:54:45,871 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@64757d56
2023-04-15 12:54:45,871 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@4813d0
2023-04-15 12:54:45,871 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@4813d0
2023-04-15 12:54:45,872 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@702096ef
2023-04-15 12:54:45,872 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@702096ef
2023-04-15 12:54:45,872 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@5f0d8937
2023-04-15 12:54:45,877 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@58b8f9e3
2023-04-15 12:54:45,878 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@58b8f9e3
2023-04-15 12:54:45,879 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@3f6f9cef
2023-04-15 12:54:45,879 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@3f6f9cef
2023-04-15 12:54:45,881 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@534762ed
2023-04-15 12:54:45,881 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@6c421123
2023-04-15 12:54:45,881 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@38e00b47
2023-04-15 12:54:45,881 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@2a631049
2023-04-15 12:54:45,882 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@425b5fe2
2023-04-15 12:54:45,882 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@3eec8583
2023-04-15 12:54:45,882 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@66e1b2a
2023-04-15 12:54:45,882 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@343db2f6
2023-04-15 12:54:45,882 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@2c815fdc
2023-04-15 12:54:45,924 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 12:54:45,925 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 12:54:45,941 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@a120b9) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@333e5fb6)
2023-04-15 12:54:45,941 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3b7b0b57) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@21a9f95b)
2023-04-15 12:54:45,941 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2804b13f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@69069866)
2023-04-15 12:54:45,941 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@ac417a2) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@64c95480)
2023-04-15 12:54:45,941 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@69499c6f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3451fc88)
2023-04-15 12:54:45,941 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1e0294a7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3041beb3)
2023-04-15 12:54:45,942 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@15cee630) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2e40fdbd)
2023-04-15 12:54:45,942 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@246de37e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@19647566)
2023-04-15 12:54:45,942 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7b79ff1c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@527d48db)
2023-04-15 12:54:45,943 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 12:54:45,944 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 12:54:45,944 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 12:54:45,945 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:54:45,946 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:54:45,947 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@238ad211
2023-04-15 12:54:45,948 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@534762ed`
2023-04-15 12:54:45,952 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:54:45,952 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:54:45,952 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:54:45,952 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:54:45,952 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:54:45,953 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:54:45,954 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@75f4d8a8] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@69ba72da]
2023-04-15 12:54:46,225 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@75f4d8a8] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@77e730bd]
2023-04-15 12:54:46,575 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 12:54:46,581 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@77e730bd] for TypeConfiguration
2023-04-15 12:54:46,583 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:54:46,824 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 12:54:47,222 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 3.114 seconds (process running for 3.97)
2023-04-15 12:54:47,225 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 12:54:47,313 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=20, type=class java.lang.Long, identifying=true}'}]
2023-04-15 12:54:47,349 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 12:54:47,380 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:54:47,381 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:54:47,381 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:54:47,381 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:54:47,382 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:54:47,397 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:54:47,399 ERROR org.springframework.batch.core.step.AbstractStep [main] Encountered an error executing step step1 in job importUserJob
org.springframework.retry.ExhaustedRetryException: Retry exhausted after last attempt in recovery path, but exception is not skippable.
	at org.springframework.batch.core.step.item.FaultTolerantChunkProcessor$5.recover(FaultTolerantChunkProcessor.java:420)
	at org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:543)
	at org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:389)
	at org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)
	at org.springframework.batch.core.step.item.BatchRetryTemplate.execute(BatchRetryTemplate.java:216)
	at org.springframework.batch.core.step.item.FaultTolerantChunkProcessor.write(FaultTolerantChunkProcessor.java:435)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.process(SimpleChunkProcessor.java:227)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:75)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:389)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:313)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:256)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:362)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:206)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:139)
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:241)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:227)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:178)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:166)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:161)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:156)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:760)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [INSERT INTO BATCH.policy (contractor_customer_code, effective_date, expire_date, insured_customer_code, policy_number, state) VALUES (?, ?, ?, ?, ?, ?)]; Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:103)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1538)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:667)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:691)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1034)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:373)
	at org.springframework.batch.item.database.JdbcBatchItemWriter.write(JdbcBatchItemWriter.java:190)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:137)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:702)
	at org.springframework.batch.item.database.JdbcBatchItemWriter$$SpringCGLIB$$0.write(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.writeItems(SimpleChunkProcessor.java:203)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.doWrite(SimpleChunkProcessor.java:170)
	at org.springframework.batch.core.step.item.FaultTolerantChunkProcessor$3.doWithRetry(FaultTolerantChunkProcessor.java:341)
	at org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)
	... 110 common frames omitted
Caused by: java.sql.BatchUpdateException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at com.mysql.cj.util.Util.handleNewInstance(Util.java:192)
	at com.mysql.cj.util.Util.getInstance(Util.java:167)
	at com.mysql.cj.util.Util.getInstance(Util.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLError.createBatchUpdateException(SQLError.java:224)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:816)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchInternal(ClientPreparedStatement.java:418)
	at com.mysql.cj.jdbc.StatementImpl.executeBatch(StatementImpl.java:795)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1047)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:651)
	... 132 common frames omitted
Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:795)
	... 138 common frames omitted
2023-04-15 12:54:47,402 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 52ms
2023-04-15 12:54:47,414 INFO com.yuripe.batchType0A.Listener.JobFailureNotificationListener [main] !!! JOB FAILED! Time to verify the results
2023-04-15 12:54:47,420 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=20, type=class java.lang.Long, identifying=true}'}] and the following status: [FAILED] in 89ms
2023-04-15 12:54:47,567 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:54:47,568 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@77e730bd] for TypeConfiguration
2023-04-15 12:54:47,570 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@68aae6a9] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@77e730bd]
2023-04-15 12:54:47,572 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 12:54:47,583 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 12:55:15,631 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 12:55:15,698 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 12:55:15,977 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 16372 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 12:55:15,978 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 12:55:16,544 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:55:16,545 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 12:55:16,562 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 12 ms. Found 0 JDBC repository interfaces.
2023-04-15 12:55:16,575 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 12:55:16,576 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 12:55:16,584 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 12:55:16,838 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 12:55:17,198 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2055833f
2023-04-15 12:55:17,201 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 12:55:17,287 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 12:55:17,350 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 12:55:17,596 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 12:55:17,608 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@58f7215c
2023-04-15 12:55:17,608 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@58f7215c
2023-04-15 12:55:17,608 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@58f7215c
2023-04-15 12:55:17,608 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@55638165
2023-04-15 12:55:17,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@55638165
2023-04-15 12:55:17,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@4fa91d5b
2023-04-15 12:55:17,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@4fa91d5b
2023-04-15 12:55:17,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@7ce30c0b
2023-04-15 12:55:17,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@7ce30c0b
2023-04-15 12:55:17,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@1d7f2f0a
2023-04-15 12:55:17,610 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@1d7f2f0a
2023-04-15 12:55:17,610 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@1d7f2f0a
2023-04-15 12:55:17,611 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@54defd69
2023-04-15 12:55:17,611 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@54defd69
2023-04-15 12:55:17,611 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@54defd69
2023-04-15 12:55:17,611 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@531ec2ca
2023-04-15 12:55:17,611 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@531ec2ca
2023-04-15 12:55:17,612 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@531ec2ca
2023-04-15 12:55:17,612 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@531ec2ca
2023-04-15 12:55:17,612 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@70884875
2023-04-15 12:55:17,612 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@7019d619
2023-04-15 12:55:17,612 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@7019d619
2023-04-15 12:55:17,612 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@2a5c6b76
2023-04-15 12:55:17,613 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@ff1f465
2023-04-15 12:55:17,613 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@3d88ce0e
2023-04-15 12:55:17,613 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@3d88ce0e
2023-04-15 12:55:17,615 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@3d88ce0e
2023-04-15 12:55:17,615 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@31f7eb8
2023-04-15 12:55:17,615 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@31f7eb8
2023-04-15 12:55:17,615 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@31f7eb8
2023-04-15 12:55:17,615 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@4ad1a276
2023-04-15 12:55:17,615 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@4ad1a276
2023-04-15 12:55:17,615 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@4ad1a276
2023-04-15 12:55:17,616 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@4a833595
2023-04-15 12:55:17,616 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@4a833595
2023-04-15 12:55:17,616 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@4a833595
2023-04-15 12:55:17,616 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@31006a75
2023-04-15 12:55:17,616 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@31006a75
2023-04-15 12:55:17,617 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@31006a75
2023-04-15 12:55:17,617 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@49122853
2023-04-15 12:55:17,617 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@49122853
2023-04-15 12:55:17,617 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@e97f115
2023-04-15 12:55:17,617 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@e97f115
2023-04-15 12:55:17,617 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@5d6b42cf
2023-04-15 12:55:17,617 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@5d6b42cf
2023-04-15 12:55:17,617 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@5d6b42cf
2023-04-15 12:55:17,618 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@6f8ac8d5
2023-04-15 12:55:17,618 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@370225c7
2023-04-15 12:55:17,618 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@370225c7
2023-04-15 12:55:17,618 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@6ac756b
2023-04-15 12:55:17,618 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@156324b
2023-04-15 12:55:17,619 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@156324b
2023-04-15 12:55:17,619 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@156324b
2023-04-15 12:55:17,619 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@38a38ed4
2023-04-15 12:55:17,619 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@38a38ed4
2023-04-15 12:55:17,619 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@38a38ed4
2023-04-15 12:55:17,619 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@1e29a81a
2023-04-15 12:55:17,619 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@7b4b8199
2023-04-15 12:55:17,619 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@4bbf20d1
2023-04-15 12:55:17,621 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@4bbf20d1
2023-04-15 12:55:17,621 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@6fced25c
2023-04-15 12:55:17,621 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@6fced25c
2023-04-15 12:55:17,621 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@3cf4dec7
2023-04-15 12:55:17,621 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@1b94c789
2023-04-15 12:55:17,621 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@299fc582
2023-04-15 12:55:17,621 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@305aaedf
2023-04-15 12:55:17,622 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@2a425cf5
2023-04-15 12:55:17,622 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@17d76ebb
2023-04-15 12:55:17,622 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@40b31a16
2023-04-15 12:55:17,622 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@40b31a16
2023-04-15 12:55:17,622 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@25fa6889
2023-04-15 12:55:17,622 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@25fa6889
2023-04-15 12:55:17,623 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@1de73d37
2023-04-15 12:55:17,623 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@1de73d37
2023-04-15 12:55:17,623 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@31693a86
2023-04-15 12:55:17,623 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@31693a86
2023-04-15 12:55:17,623 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:55:17,623 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 12:55:17,623 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 12:55:17,624 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 12:55:17,624 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:55:17,624 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 12:55:17,624 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:55:17,624 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 12:55:17,624 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 12:55:17,625 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 12:55:17,625 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 12:55:17,625 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 12:55:17,625 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:55:17,625 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 12:55:17,625 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 12:55:17,625 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 12:55:17,626 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 12:55:17,626 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 12:55:17,626 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 12:55:17,626 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 12:55:17,626 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7ff6804a
2023-04-15 12:55:17,626 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@12aa519b
2023-04-15 12:55:17,627 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@7c5c20ed
2023-04-15 12:55:17,627 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@7c5c20ed
2023-04-15 12:55:17,627 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@6113a26f
2023-04-15 12:55:17,627 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@6113a26f
2023-04-15 12:55:17,628 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@6113a26f
2023-04-15 12:55:17,628 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@2aac8ad7
2023-04-15 12:55:17,628 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@6a4a2090
2023-04-15 12:55:17,628 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:55:17,628 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@778c2e7c
2023-04-15 12:55:17,629 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:55:17,629 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:55:17,629 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@b70fa38
2023-04-15 12:55:17,629 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:55:17,629 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@45c423b3
2023-04-15 12:55:17,629 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@7e31d53b
2023-04-15 12:55:17,629 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@7e31d53b
2023-04-15 12:55:17,630 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@68d8eb4f
2023-04-15 12:55:17,630 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@68d8eb4f
2023-04-15 12:55:17,630 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@64757d56
2023-04-15 12:55:17,630 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@64757d56
2023-04-15 12:55:17,630 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@4813d0
2023-04-15 12:55:17,630 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@4813d0
2023-04-15 12:55:17,631 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@702096ef
2023-04-15 12:55:17,636 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@10d98940
2023-04-15 12:55:17,636 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@10d98940
2023-04-15 12:55:17,637 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@53ba7997
2023-04-15 12:55:17,637 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@53ba7997
2023-04-15 12:55:17,638 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@5db9f51f
2023-04-15 12:55:17,639 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@534762ed
2023-04-15 12:55:17,639 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@6c421123
2023-04-15 12:55:17,639 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@38e00b47
2023-04-15 12:55:17,639 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@2a631049
2023-04-15 12:55:17,639 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@425b5fe2
2023-04-15 12:55:17,639 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@3eec8583
2023-04-15 12:55:17,639 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@66e1b2a
2023-04-15 12:55:17,639 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@343db2f6
2023-04-15 12:55:17,677 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 12:55:17,679 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 12:55:17,695 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@ca2cd5e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@a120b9)
2023-04-15 12:55:17,695 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@333e5fb6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3b7b0b57)
2023-04-15 12:55:17,695 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@21a9f95b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2804b13f)
2023-04-15 12:55:17,695 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@69069866) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@ac417a2)
2023-04-15 12:55:17,695 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@64c95480) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@69499c6f)
2023-04-15 12:55:17,696 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3451fc88) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1e0294a7)
2023-04-15 12:55:17,696 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3041beb3) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@15cee630)
2023-04-15 12:55:17,696 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2e40fdbd) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@246de37e)
2023-04-15 12:55:17,696 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@19647566) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7b79ff1c)
2023-04-15 12:55:17,697 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 12:55:17,697 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 12:55:17,697 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 12:55:17,699 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:55:17,699 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 12:55:17,701 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@6e3b2dd3
2023-04-15 12:55:17,701 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@5db9f51f`
2023-04-15 12:55:17,704 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:55:17,705 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:55:17,705 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 12:55:17,705 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:55:17,705 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:55:17,705 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 12:55:17,707 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@6e794f53] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@75f4d8a8]
2023-04-15 12:55:17,974 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@6e794f53] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@6eb5b9e7]
2023-04-15 12:55:18,327 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 12:55:18,337 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@6eb5b9e7] for TypeConfiguration
2023-04-15 12:55:18,339 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:55:18,562 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 12:55:18,977 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 3.149 seconds (process running for 3.98)
2023-04-15 12:55:18,979 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 12:55:19,097 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=21, type=class java.lang.Long, identifying=true}'}]
2023-04-15 12:55:19,135 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 12:55:19,165 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:55:19,165 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:55:19,165 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:55:19,165 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:55:19,165 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 12:55:19,181 ERROR org.springframework.batch.core.step.AbstractStep [main] Encountered an error executing step step1 in job importUserJob
org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [INSERT INTO BATCH.policy (contractor_customer_code, effective_date, expire_date, insured_customer_code, policy_number, state) VALUES (?, ?, ?, ?, ?, ?)]; Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:103)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1538)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:667)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:691)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1034)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:373)
	at org.springframework.batch.item.database.JdbcBatchItemWriter.write(JdbcBatchItemWriter.java:190)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:137)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:702)
	at org.springframework.batch.item.database.JdbcBatchItemWriter$$SpringCGLIB$$0.write(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.writeItems(SimpleChunkProcessor.java:203)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.doWrite(SimpleChunkProcessor.java:170)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.write(SimpleChunkProcessor.java:297)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.process(SimpleChunkProcessor.java:227)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:75)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:389)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:313)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:256)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:362)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:206)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:139)
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:241)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:227)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:178)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:166)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:161)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:156)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:760)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.sql.BatchUpdateException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at com.mysql.cj.util.Util.handleNewInstance(Util.java:192)
	at com.mysql.cj.util.Util.getInstance(Util.java:167)
	at com.mysql.cj.util.Util.getInstance(Util.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLError.createBatchUpdateException(SQLError.java:224)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:816)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchInternal(ClientPreparedStatement.java:418)
	at com.mysql.cj.jdbc.StatementImpl.executeBatch(StatementImpl.java:795)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1047)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:651)
	... 128 common frames omitted
Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:795)
	... 134 common frames omitted
2023-04-15 12:55:19,187 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 49ms
2023-04-15 12:55:19,196 INFO com.yuripe.batchType0A.Listener.JobFailureNotificationListener [main] !!! JOB FAILED! Time to verify the results
2023-04-15 12:55:19,203 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=21, type=class java.lang.Long, identifying=true}'}] and the following status: [FAILED] in 87ms
2023-04-15 12:55:19,357 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 12:55:19,359 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@6eb5b9e7] for TypeConfiguration
2023-04-15 12:55:19,359 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@629fde59] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@6eb5b9e7]
2023-04-15 12:55:19,362 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 12:55:19,374 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 17:16:14,340 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 17:16:14,459 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 17:16:14,879 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 14816 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 17:16:14,880 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 17:16:15,498 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:16:15,500 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 17:16:15,520 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 14 ms. Found 0 JDBC repository interfaces.
2023-04-15 17:16:15,531 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:16:15,531 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 17:16:15,537 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 17:16:15,910 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 17:16:16,424 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7ac48e10
2023-04-15 17:16:16,426 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 17:16:16,573 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 17:16:16,693 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 17:16:17,079 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 17:16:17,100 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@3f322610
2023-04-15 17:16:17,101 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@3f322610
2023-04-15 17:16:17,102 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@3f322610
2023-04-15 17:16:17,102 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@1e477944
2023-04-15 17:16:17,103 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@1e477944
2023-04-15 17:16:17,103 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@6cf047cf
2023-04-15 17:16:17,104 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@6cf047cf
2023-04-15 17:16:17,104 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 17:16:17,108 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 17:16:17,109 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 17:16:17,109 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 17:16:17,110 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 17:16:17,111 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 17:16:17,111 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 17:16:17,111 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 17:16:17,113 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 17:16:17,113 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 17:16:17,113 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 17:16:17,113 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 17:16:17,114 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 17:16:17,114 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 17:16:17,114 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 17:16:17,114 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 17:16:17,116 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 17:16:17,116 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 17:16:17,117 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 17:16:17,117 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 17:16:17,117 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 17:16:17,118 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 17:16:17,118 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 17:16:17,118 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:16:17,118 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:16:17,119 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:16:17,120 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 17:16:17,120 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 17:16:17,121 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 17:16:17,122 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:16:17,122 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:16:17,123 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:16:17,123 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 17:16:17,124 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 17:16:17,124 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 17:16:17,125 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 17:16:17,125 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 17:16:17,125 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 17:16:17,125 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 17:16:17,126 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 17:16:17,126 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 17:16:17,126 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 17:16:17,127 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 17:16:17,127 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 17:16:17,127 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 17:16:17,128 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 17:16:17,128 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 17:16:17,128 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 17:16:17,129 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 17:16:17,129 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 17:16:17,129 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 17:16:17,129 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 17:16:17,130 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 17:16:17,130 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 17:16:17,132 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 17:16:17,132 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 17:16:17,133 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 17:16:17,133 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 17:16:17,134 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 17:16:17,134 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 17:16:17,135 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 17:16:17,135 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 17:16:17,135 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 17:16:17,135 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 17:16:17,136 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 17:16:17,136 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 17:16:17,137 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 17:16:17,137 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 17:16:17,137 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 17:16:17,138 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 17:16:17,139 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 17:16:17,140 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 17:16:17,141 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 17:16:17,142 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 17:16:17,143 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 17:16:17,144 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 17:16:17,144 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 17:16:17,145 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 17:16:17,146 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 17:16:17,146 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 17:16:17,146 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 17:16:17,147 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 17:16:17,147 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 17:16:17,147 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 17:16:17,148 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 17:16:17,149 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 17:16:17,149 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 17:16:17,150 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 17:16:17,150 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 17:16:17,151 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 17:16:17,151 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 17:16:17,152 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 17:16:17,152 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 17:16:17,153 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 17:16:17,153 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 17:16:17,154 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 17:16:17,154 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 17:16:17,155 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 17:16:17,155 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 17:16:17,156 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 17:16:17,156 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 17:16:17,156 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 17:16:17,157 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 17:16:17,157 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 17:16:17,157 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 17:16:17,158 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 17:16:17,158 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 17:16:17,158 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 17:16:17,159 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 17:16:17,159 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 17:16:17,160 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 17:16:17,160 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 17:16:17,160 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 17:16:17,160 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 17:16:17,172 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@531a716c
2023-04-15 17:16:17,173 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@531a716c
2023-04-15 17:16:17,176 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@156324b
2023-04-15 17:16:17,176 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@156324b
2023-04-15 17:16:17,177 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@17d76ebb
2023-04-15 17:16:17,179 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@40b31a16
2023-04-15 17:16:17,179 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@25fa6889
2023-04-15 17:16:17,180 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@1de73d37
2023-04-15 17:16:17,180 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@31693a86
2023-04-15 17:16:17,180 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 17:16:17,180 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 17:16:17,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 17:16:17,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 17:16:17,280 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 17:16:17,282 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 17:16:17,306 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@c67395) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5fc7255c)
2023-04-15 17:16:17,306 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@20a47036) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@70c205bf)
2023-04-15 17:16:17,307 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@43ab9ae9) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2520aa05)
2023-04-15 17:16:17,307 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@26865b57) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@46894dc5)
2023-04-15 17:16:17,307 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@596afb2f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@79ba0285)
2023-04-15 17:16:17,307 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6df2a206) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@61993d18)
2023-04-15 17:16:17,308 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6f240187) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@46a388cc)
2023-04-15 17:16:17,308 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3e39f08c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@16e07bae)
2023-04-15 17:16:17,308 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@598778cc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3386ed8)
2023-04-15 17:16:17,309 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 17:16:17,310 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 17:16:17,310 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 17:16:17,313 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:16:17,313 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:16:17,317 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@210635fd
2023-04-15 17:16:17,318 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@17d76ebb`
2023-04-15 17:16:17,324 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:16:17,325 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:16:17,326 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:16:17,326 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:16:17,326 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:16:17,326 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:16:17,328 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@21a5b599] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@7db162f2]
2023-04-15 17:16:17,758 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@21a5b599] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@66a8751a]
2023-04-15 17:16:18,307 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 17:16:18,320 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@66a8751a] for TypeConfiguration
2023-04-15 17:16:18,325 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:16:18,685 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 17:16:19,214 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 4.577 seconds (process running for 5.838)
2023-04-15 17:16:19,217 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 17:16:19,380 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=22, type=class java.lang.Long, identifying=true}'}]
2023-04-15 17:16:19,424 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 17:16:19,465 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:16:19,465 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:16:19,466 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:16:19,466 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:16:19,466 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:16:19,487 ERROR org.springframework.batch.core.step.AbstractStep [main] Encountered an error executing step step1 in job importUserJob
org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [INSERT INTO BATCH.policy (contractor_customer_code, effective_date, expire_date, insured_customer_code, policy_number, state) VALUES (?, ?, ?, ?, ?, ?)]; Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:103)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1538)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:667)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:691)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1034)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:373)
	at org.springframework.batch.item.database.JdbcBatchItemWriter.write(JdbcBatchItemWriter.java:190)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.writeItems(SimpleChunkProcessor.java:203)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.doWrite(SimpleChunkProcessor.java:170)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.write(SimpleChunkProcessor.java:297)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.process(SimpleChunkProcessor.java:227)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:75)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:389)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:313)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:256)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:362)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:206)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:139)
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:241)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:227)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:178)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:166)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:161)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:156)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:760)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.sql.BatchUpdateException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at com.mysql.cj.util.Util.handleNewInstance(Util.java:192)
	at com.mysql.cj.util.Util.getInstance(Util.java:167)
	at com.mysql.cj.util.Util.getInstance(Util.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLError.createBatchUpdateException(SQLError.java:224)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:816)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchInternal(ClientPreparedStatement.java:418)
	at com.mysql.cj.jdbc.StatementImpl.executeBatch(StatementImpl.java:795)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1047)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:651)
	... 114 common frames omitted
Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'P000850' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:795)
	... 120 common frames omitted
2023-04-15 17:16:19,494 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 68ms
2023-04-15 17:16:19,508 INFO com.yuripe.batchType0A.Listener.JobFailureNotificationListener [main] !!! JOB FAILED! Time to verify the results
2023-04-15 17:16:19,520 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=22, type=class java.lang.Long, identifying=true}'}] and the following status: [FAILED] in 115ms
2023-04-15 17:16:19,741 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:16:19,743 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@66a8751a] for TypeConfiguration
2023-04-15 17:16:19,744 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@5617f71d] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@66a8751a]
2023-04-15 17:16:19,748 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 17:16:19,763 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 17:17:03,912 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 17:17:04,016 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 17:17:04,382 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 11540 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 17:17:04,383 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 17:17:05,056 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:17:05,059 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 17:17:05,079 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 15 ms. Found 0 JDBC repository interfaces.
2023-04-15 17:17:05,089 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:17:05,090 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 17:17:05,097 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 17:17:05,468 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 17:17:05,923 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6075b369
2023-04-15 17:17:05,926 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 17:17:06,064 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 17:17:06,153 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 17:17:06,436 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 17:17:06,451 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 17:17:06,451 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 17:17:06,451 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 17:17:06,451 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 17:17:06,452 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 17:17:06,452 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 17:17:06,452 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 17:17:06,453 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 17:17:06,453 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 17:17:06,453 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 17:17:06,453 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 17:17:06,455 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 17:17:06,455 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 17:17:06,456 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 17:17:06,456 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 17:17:06,456 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:17:06,456 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:17:06,456 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:17:06,457 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:17:06,457 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 17:17:06,458 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:17:06,459 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:17:06,459 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 17:17:06,459 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 17:17:06,460 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 17:17:06,460 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 17:17:06,460 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 17:17:06,461 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 17:17:06,461 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 17:17:06,461 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 17:17:06,462 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 17:17:06,462 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 17:17:06,462 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 17:17:06,462 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 17:17:06,463 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 17:17:06,463 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 17:17:06,463 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 17:17:06,464 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 17:17:06,464 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 17:17:06,464 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 17:17:06,465 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 17:17:06,465 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 17:17:06,465 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 17:17:06,466 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 17:17:06,466 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 17:17:06,467 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 17:17:06,467 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 17:17:06,467 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 17:17:06,467 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 17:17:06,469 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 17:17:06,469 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 17:17:06,470 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 17:17:06,470 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 17:17:06,470 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 17:17:06,470 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 17:17:06,471 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 17:17:06,471 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 17:17:06,472 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 17:17:06,472 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 17:17:06,472 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 17:17:06,473 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 17:17:06,473 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 17:17:06,474 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 17:17:06,474 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 17:17:06,474 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 17:17:06,475 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 17:17:06,475 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 17:17:06,475 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 17:17:06,477 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 17:17:06,477 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 17:17:06,477 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 17:17:06,478 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 17:17:06,478 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 17:17:06,478 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 17:17:06,478 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 17:17:06,479 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 17:17:06,479 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 17:17:06,479 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 17:17:06,480 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 17:17:06,480 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 17:17:06,480 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 17:17:06,481 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 17:17:06,481 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 17:17:06,481 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 17:17:06,482 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 17:17:06,482 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 17:17:06,482 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 17:17:06,483 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 17:17:06,483 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 17:17:06,483 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 17:17:06,484 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 17:17:06,484 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 17:17:06,484 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 17:17:06,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 17:17:06,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 17:17:06,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 17:17:06,486 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 17:17:06,486 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 17:17:06,486 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 17:17:06,486 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 17:17:06,486 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 17:17:06,487 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 17:17:06,487 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 17:17:06,487 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 17:17:06,487 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 17:17:06,489 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 17:17:06,489 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 17:17:06,489 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 17:17:06,490 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 17:17:06,490 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 17:17:06,490 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@d85b399
2023-04-15 17:17:06,490 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@d85b399
2023-04-15 17:17:06,491 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@674aa626
2023-04-15 17:17:06,491 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@674aa626
2023-04-15 17:17:06,491 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@4dd1d2bb
2023-04-15 17:17:06,493 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@4dd1d2bb
2023-04-15 17:17:06,493 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@47198524
2023-04-15 17:17:06,493 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@47198524
2023-04-15 17:17:06,494 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@67a0ff25
2023-04-15 17:17:06,494 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@67a0ff25
2023-04-15 17:17:06,494 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@55e91e61
2023-04-15 17:17:06,504 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@3d88ce0e
2023-04-15 17:17:06,505 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@3d88ce0e
2023-04-15 17:17:06,506 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@1b94c789
2023-04-15 17:17:06,507 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@1b94c789
2023-04-15 17:17:06,509 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@3b30eec5
2023-04-15 17:17:06,510 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 17:17:06,510 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 17:17:06,511 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 17:17:06,511 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 17:17:06,511 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 17:17:06,511 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 17:17:06,512 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 17:17:06,512 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 17:17:06,568 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 17:17:06,571 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 17:17:06,590 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@46894dc5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@596afb2f)
2023-04-15 17:17:06,590 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@79ba0285) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6df2a206)
2023-04-15 17:17:06,590 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@61993d18) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6f240187)
2023-04-15 17:17:06,591 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@46a388cc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3e39f08c)
2023-04-15 17:17:06,591 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@16e07bae) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@598778cc)
2023-04-15 17:17:06,591 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3386ed8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@727453a3)
2023-04-15 17:17:06,591 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@67dc6b48) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@57f2e67)
2023-04-15 17:17:06,591 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4571cebe) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@154864f8)
2023-04-15 17:17:06,591 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@11cadb32) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6d3ad37a)
2023-04-15 17:17:06,592 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 17:17:06,592 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 17:17:06,593 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 17:17:06,596 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:17:06,596 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:17:06,598 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@58636b50
2023-04-15 17:17:06,599 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@3b30eec5`
2023-04-15 17:17:06,603 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:17:06,605 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:17:06,605 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:17:06,605 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:17:06,605 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:17:06,606 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:17:06,607 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1de30c31] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@1cc93da4]
2023-04-15 17:17:06,947 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1de30c31] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@1eabfad5]
2023-04-15 17:17:07,385 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 17:17:07,394 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@1eabfad5] for TypeConfiguration
2023-04-15 17:17:07,396 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:17:07,686 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 17:17:08,220 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 4.024 seconds (process running for 5.148)
2023-04-15 17:17:08,223 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 17:17:08,365 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=23, type=class java.lang.Long, identifying=true}'}]
2023-04-15 17:17:08,401 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 17:17:08,431 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:17:08,432 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:17:08,432 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:17:08,432 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:17:08,433 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:17:08,447 ERROR org.springframework.batch.core.step.AbstractStep [main] Encountered an error executing step step1 in job importUserJob
org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [INSERT INTO BATCH.policy (contractor_customer_code, effective_date, expire_date, insured_customer_code, policy_number, state) VALUES (?, ?, ?, ?, ?, ?)]; Duplicate entry 'P000840' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:103)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1538)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:667)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:691)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1034)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:373)
	at org.springframework.batch.item.database.JdbcBatchItemWriter.write(JdbcBatchItemWriter.java:190)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.writeItems(SimpleChunkProcessor.java:203)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.doWrite(SimpleChunkProcessor.java:170)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.write(SimpleChunkProcessor.java:297)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.process(SimpleChunkProcessor.java:227)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:75)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:389)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:313)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:256)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:362)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:206)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:139)
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:241)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:227)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:178)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:166)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:161)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:156)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:760)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.sql.BatchUpdateException: Duplicate entry 'P000840' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at com.mysql.cj.util.Util.handleNewInstance(Util.java:192)
	at com.mysql.cj.util.Util.getInstance(Util.java:167)
	at com.mysql.cj.util.Util.getInstance(Util.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLError.createBatchUpdateException(SQLError.java:224)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:816)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchInternal(ClientPreparedStatement.java:418)
	at com.mysql.cj.jdbc.StatementImpl.executeBatch(StatementImpl.java:795)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1047)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:651)
	... 114 common frames omitted
Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'P000840' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:795)
	... 120 common frames omitted
2023-04-15 17:17:08,454 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 52ms
2023-04-15 17:17:08,467 INFO com.yuripe.batchType0A.Listener.JobFailureNotificationListener [main] !!! JOB FAILED! Time to verify the results
2023-04-15 17:17:08,476 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=23, type=class java.lang.Long, identifying=true}'}] and the following status: [FAILED] in 93ms
2023-04-15 17:17:08,711 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:17:08,712 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@1eabfad5] for TypeConfiguration
2023-04-15 17:17:08,713 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@217e0aed] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@1eabfad5]
2023-04-15 17:17:08,717 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 17:17:08,730 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 17:17:42,508 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 17:17:42,605 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 17:17:42,979 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 16812 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 17:17:42,982 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 17:17:43,659 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:17:43,662 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 17:17:43,690 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 22 ms. Found 0 JDBC repository interfaces.
2023-04-15 17:17:43,706 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:17:43,708 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 17:17:43,719 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 5 ms. Found 0 JPA repository interfaces.
2023-04-15 17:17:44,109 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 17:17:44,614 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7ac48e10
2023-04-15 17:17:44,616 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 17:17:44,756 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 17:17:44,855 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 17:17:45,149 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 17:17:45,168 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@3f322610
2023-04-15 17:17:45,169 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@3f322610
2023-04-15 17:17:45,170 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@3f322610
2023-04-15 17:17:45,171 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@1e477944
2023-04-15 17:17:45,171 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@1e477944
2023-04-15 17:17:45,172 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@6cf047cf
2023-04-15 17:17:45,172 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@6cf047cf
2023-04-15 17:17:45,173 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 17:17:45,174 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 17:17:45,174 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 17:17:45,175 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 17:17:45,175 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 17:17:45,176 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 17:17:45,176 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 17:17:45,177 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 17:17:45,177 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 17:17:45,177 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 17:17:45,177 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 17:17:45,178 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 17:17:45,178 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 17:17:45,179 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 17:17:45,179 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 17:17:45,179 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 17:17:45,180 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 17:17:45,180 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 17:17:45,180 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 17:17:45,180 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 17:17:45,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 17:17:45,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 17:17:45,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 17:17:45,182 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:17:45,182 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:17:45,182 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:17:45,183 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 17:17:45,183 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 17:17:45,183 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 17:17:45,184 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:17:45,184 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:17:45,184 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:17:45,185 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 17:17:45,185 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 17:17:45,185 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 17:17:45,186 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 17:17:45,186 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 17:17:45,186 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 17:17:45,187 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 17:17:45,187 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 17:17:45,187 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 17:17:45,187 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 17:17:45,188 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 17:17:45,188 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 17:17:45,188 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 17:17:45,188 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 17:17:45,189 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 17:17:45,189 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 17:17:45,189 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 17:17:45,189 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 17:17:45,190 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 17:17:45,190 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 17:17:45,190 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 17:17:45,190 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 17:17:45,191 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 17:17:45,191 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 17:17:45,191 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 17:17:45,192 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 17:17:45,192 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 17:17:45,193 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 17:17:45,193 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 17:17:45,193 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 17:17:45,194 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 17:17:45,194 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 17:17:45,194 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 17:17:45,194 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 17:17:45,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 17:17:45,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 17:17:45,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 17:17:45,196 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 17:17:45,196 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 17:17:45,197 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 17:17:45,197 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 17:17:45,198 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 17:17:45,198 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 17:17:45,198 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 17:17:45,198 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 17:17:45,199 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 17:17:45,199 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 17:17:45,200 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 17:17:45,200 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 17:17:45,201 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 17:17:45,201 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 17:17:45,201 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 17:17:45,202 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 17:17:45,202 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 17:17:45,202 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 17:17:45,202 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 17:17:45,203 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 17:17:45,203 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 17:17:45,203 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 17:17:45,203 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 17:17:45,204 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 17:17:45,204 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 17:17:45,204 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 17:17:45,205 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 17:17:45,205 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 17:17:45,205 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 17:17:45,205 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 17:17:45,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 17:17:45,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 17:17:45,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 17:17:45,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 17:17:45,207 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 17:17:45,207 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 17:17:45,207 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 17:17:45,208 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 17:17:45,208 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 17:17:45,208 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 17:17:45,209 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 17:17:45,209 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 17:17:45,209 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 17:17:45,210 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 17:17:45,210 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 17:17:45,218 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@531a716c
2023-04-15 17:17:45,219 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@531a716c
2023-04-15 17:17:45,221 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@156324b
2023-04-15 17:17:45,222 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@156324b
2023-04-15 17:17:45,223 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@17d76ebb
2023-04-15 17:17:45,224 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@40b31a16
2023-04-15 17:17:45,224 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@25fa6889
2023-04-15 17:17:45,224 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@1de73d37
2023-04-15 17:17:45,224 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@31693a86
2023-04-15 17:17:45,225 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 17:17:45,225 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 17:17:45,225 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 17:17:45,225 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 17:17:45,276 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 17:17:45,278 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 17:17:45,308 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@c67395) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5fc7255c)
2023-04-15 17:17:45,308 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@20a47036) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@70c205bf)
2023-04-15 17:17:45,309 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@43ab9ae9) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2520aa05)
2023-04-15 17:17:45,309 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@26865b57) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@46894dc5)
2023-04-15 17:17:45,309 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@596afb2f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@79ba0285)
2023-04-15 17:17:45,310 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6df2a206) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@61993d18)
2023-04-15 17:17:45,310 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6f240187) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@46a388cc)
2023-04-15 17:17:45,310 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3e39f08c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@16e07bae)
2023-04-15 17:17:45,311 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@598778cc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3386ed8)
2023-04-15 17:17:45,313 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 17:17:45,313 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 17:17:45,314 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 17:17:45,316 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:17:45,316 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:17:45,319 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@210635fd
2023-04-15 17:17:45,320 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@17d76ebb`
2023-04-15 17:17:45,326 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:17:45,327 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:17:45,327 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:17:45,327 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:17:45,328 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:17:45,328 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:17:45,332 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@21a5b599] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@7db162f2]
2023-04-15 17:17:45,756 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@21a5b599] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@66a8751a]
2023-04-15 17:17:46,306 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 17:17:46,315 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@66a8751a] for TypeConfiguration
2023-04-15 17:17:46,318 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:17:46,655 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 17:17:47,217 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 4.455 seconds (process running for 5.584)
2023-04-15 17:17:47,219 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 17:17:47,382 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=24, type=class java.lang.Long, identifying=true}'}]
2023-04-15 17:17:47,426 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 17:17:47,476 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:17:47,477 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:17:47,478 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:17:47,478 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:17:47,479 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:17:47,503 ERROR org.springframework.batch.core.step.AbstractStep [main] Encountered an error executing step step1 in job importUserJob
org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [INSERT INTO BATCH.policy (contractor_customer_code, effective_date, expire_date, insured_customer_code, policy_number, state) VALUES (?, ?, ?, ?, ?, ?)]; Duplicate entry 'P000830' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:103)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1538)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:667)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:691)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1034)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:373)
	at org.springframework.batch.item.database.JdbcBatchItemWriter.write(JdbcBatchItemWriter.java:190)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.writeItems(SimpleChunkProcessor.java:203)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.doWrite(SimpleChunkProcessor.java:170)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.write(SimpleChunkProcessor.java:297)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.process(SimpleChunkProcessor.java:227)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:75)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:389)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:313)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:256)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:362)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:206)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:139)
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:241)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:227)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:178)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:166)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:161)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:156)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:760)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.sql.BatchUpdateException: Duplicate entry 'P000830' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at com.mysql.cj.util.Util.handleNewInstance(Util.java:192)
	at com.mysql.cj.util.Util.getInstance(Util.java:167)
	at com.mysql.cj.util.Util.getInstance(Util.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLError.createBatchUpdateException(SQLError.java:224)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:816)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchInternal(ClientPreparedStatement.java:418)
	at com.mysql.cj.jdbc.StatementImpl.executeBatch(StatementImpl.java:795)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1047)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:651)
	... 114 common frames omitted
Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'P000830' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:795)
	... 120 common frames omitted
2023-04-15 17:17:47,512 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 86ms
2023-04-15 17:17:47,528 INFO com.yuripe.batchType0A.Listener.JobFailureNotificationListener [main] !!! JOB FAILED! Time to verify the results
2023-04-15 17:17:47,539 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=24, type=class java.lang.Long, identifying=true}'}] and the following status: [FAILED] in 135ms
2023-04-15 17:17:47,761 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:17:47,762 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@66a8751a] for TypeConfiguration
2023-04-15 17:17:47,763 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@2fbf7ea4] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@66a8751a]
2023-04-15 17:17:47,767 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 17:17:47,782 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 17:18:48,777 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 17:18:48,875 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 17:18:49,250 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 15592 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 17:18:49,251 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 17:18:49,892 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:18:49,895 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 17:18:49,919 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 19 ms. Found 0 JDBC repository interfaces.
2023-04-15 17:18:49,929 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:18:49,931 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 17:18:49,938 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 17:18:50,333 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 17:18:50,852 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6075b369
2023-04-15 17:18:50,854 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 17:18:50,980 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 17:18:51,049 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 17:18:51,349 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 17:18:51,361 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 17:18:51,362 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 17:18:51,363 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 17:18:51,363 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 17:18:51,363 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 17:18:51,364 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 17:18:51,364 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 17:18:51,364 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 17:18:51,365 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 17:18:51,365 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 17:18:51,365 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 17:18:51,366 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 17:18:51,367 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 17:18:51,367 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 17:18:51,367 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 17:18:51,368 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:18:51,368 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:18:51,368 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:18:51,369 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:18:51,369 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 17:18:51,369 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:18:51,370 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:18:51,370 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 17:18:51,370 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 17:18:51,371 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 17:18:51,371 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 17:18:51,371 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 17:18:51,372 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 17:18:51,372 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 17:18:51,372 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 17:18:51,372 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 17:18:51,372 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 17:18:51,373 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 17:18:51,373 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 17:18:51,373 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 17:18:51,374 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 17:18:51,374 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 17:18:51,375 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 17:18:51,375 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 17:18:51,376 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 17:18:51,376 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 17:18:51,376 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 17:18:51,377 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 17:18:51,377 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 17:18:51,377 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 17:18:51,378 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 17:18:51,378 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 17:18:51,378 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 17:18:51,378 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 17:18:51,380 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 17:18:51,380 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 17:18:51,380 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 17:18:51,380 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 17:18:51,381 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 17:18:51,381 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 17:18:51,381 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 17:18:51,381 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 17:18:51,382 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 17:18:51,382 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 17:18:51,382 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 17:18:51,382 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 17:18:51,382 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 17:18:51,383 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 17:18:51,383 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 17:18:51,383 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 17:18:51,383 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 17:18:51,383 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 17:18:51,384 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 17:18:51,384 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 17:18:51,384 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 17:18:51,385 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 17:18:51,385 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 17:18:51,385 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 17:18:51,385 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 17:18:51,386 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 17:18:51,386 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 17:18:51,386 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 17:18:51,386 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 17:18:51,387 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 17:18:51,387 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 17:18:51,387 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 17:18:51,388 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 17:18:51,388 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 17:18:51,389 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 17:18:51,389 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 17:18:51,389 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 17:18:51,389 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 17:18:51,390 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 17:18:51,390 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 17:18:51,390 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 17:18:51,392 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 17:18:51,392 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 17:18:51,392 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 17:18:51,393 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 17:18:51,393 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 17:18:51,393 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 17:18:51,394 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 17:18:51,394 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 17:18:51,395 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 17:18:51,395 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 17:18:51,395 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 17:18:51,396 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 17:18:51,396 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 17:18:51,396 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 17:18:51,396 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 17:18:51,397 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 17:18:51,397 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 17:18:51,397 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 17:18:51,397 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 17:18:51,398 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 17:18:51,398 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@d85b399
2023-04-15 17:18:51,398 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@d85b399
2023-04-15 17:18:51,398 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@674aa626
2023-04-15 17:18:51,398 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@674aa626
2023-04-15 17:18:51,398 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@4dd1d2bb
2023-04-15 17:18:51,399 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@4dd1d2bb
2023-04-15 17:18:51,399 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@47198524
2023-04-15 17:18:51,399 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@47198524
2023-04-15 17:18:51,400 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@67a0ff25
2023-04-15 17:18:51,400 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@67a0ff25
2023-04-15 17:18:51,400 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@55e91e61
2023-04-15 17:18:51,408 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@3d88ce0e
2023-04-15 17:18:51,410 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@3d88ce0e
2023-04-15 17:18:51,411 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@1b94c789
2023-04-15 17:18:51,411 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@1b94c789
2023-04-15 17:18:51,413 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@3b30eec5
2023-04-15 17:18:51,413 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 17:18:51,413 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 17:18:51,413 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 17:18:51,414 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 17:18:51,414 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 17:18:51,414 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 17:18:51,414 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 17:18:51,414 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 17:18:51,470 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 17:18:51,472 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 17:18:51,504 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@46894dc5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@596afb2f)
2023-04-15 17:18:51,504 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@79ba0285) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6df2a206)
2023-04-15 17:18:51,505 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@61993d18) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6f240187)
2023-04-15 17:18:51,505 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@46a388cc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3e39f08c)
2023-04-15 17:18:51,505 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@16e07bae) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@598778cc)
2023-04-15 17:18:51,505 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3386ed8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@727453a3)
2023-04-15 17:18:51,506 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@67dc6b48) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@57f2e67)
2023-04-15 17:18:51,506 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4571cebe) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@154864f8)
2023-04-15 17:18:51,506 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@11cadb32) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6d3ad37a)
2023-04-15 17:18:51,508 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 17:18:51,509 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 17:18:51,510 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 17:18:51,512 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:18:51,513 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:18:51,516 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@58636b50
2023-04-15 17:18:51,517 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@3b30eec5`
2023-04-15 17:18:51,522 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:18:51,523 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:18:51,523 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:18:51,523 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:18:51,523 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:18:51,524 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:18:51,525 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1de30c31] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@1cc93da4]
2023-04-15 17:18:51,897 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1de30c31] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@1eabfad5]
2023-04-15 17:18:52,327 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 17:18:52,337 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@1eabfad5] for TypeConfiguration
2023-04-15 17:18:52,340 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:18:52,651 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 17:18:53,204 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 4.155 seconds (process running for 5.292)
2023-04-15 17:18:53,207 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 17:18:53,339 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=25, type=class java.lang.Long, identifying=true}'}]
2023-04-15 17:18:53,378 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 17:18:53,427 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:18:53,428 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:18:53,428 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:18:53,428 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:18:53,429 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:18:53,452 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 72ms
2023-04-15 17:18:53,465 INFO com.yuripe.batchType0A.Listener.JobCompletionNotificationListener [main] !!! JOB FINISHED! Time to verify the results
2023-04-15 17:18:53,475 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=25, type=class java.lang.Long, identifying=true}'}] and the following status: [COMPLETED] in 116ms
2023-04-15 17:18:53,685 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:18:53,686 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@1eabfad5] for TypeConfiguration
2023-04-15 17:18:53,687 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@2ec665ef] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@1eabfad5]
2023-04-15 17:18:53,691 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 17:18:53,710 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 17:22:16,595 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 17:22:16,704 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 17:22:17,102 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 8816 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 17:22:17,103 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 17:22:17,842 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:22:17,845 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 17:22:17,877 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 24 ms. Found 0 JDBC repository interfaces.
2023-04-15 17:22:17,890 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:22:17,891 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 17:22:17,901 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 4 ms. Found 0 JPA repository interfaces.
2023-04-15 17:22:18,310 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 17:22:18,803 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6075b369
2023-04-15 17:22:18,805 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 17:22:18,902 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 17:22:19,008 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 17:22:19,301 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 17:22:19,311 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 17:22:19,312 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 17:22:19,312 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 17:22:19,312 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 17:22:19,313 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 17:22:19,313 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 17:22:19,313 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 17:22:19,313 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 17:22:19,313 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 17:22:19,315 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 17:22:19,315 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 17:22:19,315 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 17:22:19,316 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 17:22:19,317 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 17:22:19,317 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 17:22:19,317 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:22:19,317 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:22:19,322 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:22:19,323 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:22:19,323 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 17:22:19,323 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:22:19,324 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:22:19,324 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 17:22:19,324 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 17:22:19,325 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 17:22:19,325 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 17:22:19,325 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 17:22:19,325 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 17:22:19,327 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 17:22:19,327 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 17:22:19,327 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 17:22:19,327 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 17:22:19,327 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 17:22:19,328 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 17:22:19,328 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 17:22:19,328 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 17:22:19,328 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 17:22:19,328 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 17:22:19,328 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 17:22:19,329 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 17:22:19,329 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 17:22:19,329 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 17:22:19,330 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 17:22:19,330 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 17:22:19,330 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 17:22:19,331 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 17:22:19,331 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 17:22:19,331 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 17:22:19,331 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 17:22:19,332 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 17:22:19,332 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 17:22:19,332 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 17:22:19,333 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 17:22:19,333 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 17:22:19,333 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 17:22:19,333 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 17:22:19,334 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 17:22:19,334 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 17:22:19,334 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 17:22:19,335 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 17:22:19,335 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 17:22:19,335 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 17:22:19,335 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 17:22:19,336 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 17:22:19,336 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 17:22:19,336 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 17:22:19,336 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 17:22:19,337 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 17:22:19,337 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 17:22:19,337 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 17:22:19,337 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 17:22:19,337 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 17:22:19,338 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 17:22:19,338 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 17:22:19,338 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 17:22:19,339 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 17:22:19,339 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 17:22:19,339 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 17:22:19,339 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 17:22:19,340 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 17:22:19,340 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 17:22:19,340 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 17:22:19,341 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 17:22:19,341 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 17:22:19,343 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 17:22:19,343 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 17:22:19,343 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 17:22:19,343 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 17:22:19,344 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 17:22:19,345 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 17:22:19,345 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 17:22:19,345 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 17:22:19,346 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 17:22:19,346 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 17:22:19,346 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 17:22:19,346 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 17:22:19,348 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 17:22:19,348 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 17:22:19,348 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 17:22:19,348 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 17:22:19,349 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 17:22:19,349 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 17:22:19,349 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 17:22:19,349 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 17:22:19,350 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 17:22:19,350 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 17:22:19,350 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 17:22:19,350 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 17:22:19,351 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 17:22:19,351 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 17:22:19,351 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@d85b399
2023-04-15 17:22:19,351 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@d85b399
2023-04-15 17:22:19,352 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@674aa626
2023-04-15 17:22:19,352 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@674aa626
2023-04-15 17:22:19,352 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@4dd1d2bb
2023-04-15 17:22:19,352 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@4dd1d2bb
2023-04-15 17:22:19,353 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@47198524
2023-04-15 17:22:19,353 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@47198524
2023-04-15 17:22:19,353 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@67a0ff25
2023-04-15 17:22:19,353 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@67a0ff25
2023-04-15 17:22:19,354 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@55e91e61
2023-04-15 17:22:19,359 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@3d88ce0e
2023-04-15 17:22:19,360 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@3d88ce0e
2023-04-15 17:22:19,363 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@1b94c789
2023-04-15 17:22:19,363 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@1b94c789
2023-04-15 17:22:19,364 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@3b30eec5
2023-04-15 17:22:19,365 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 17:22:19,365 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 17:22:19,365 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 17:22:19,365 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 17:22:19,365 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 17:22:19,365 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 17:22:19,365 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 17:22:19,366 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 17:22:19,428 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 17:22:19,430 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 17:22:19,455 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@46894dc5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@596afb2f)
2023-04-15 17:22:19,455 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@79ba0285) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6df2a206)
2023-04-15 17:22:19,456 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@61993d18) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6f240187)
2023-04-15 17:22:19,456 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@46a388cc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3e39f08c)
2023-04-15 17:22:19,457 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@16e07bae) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@598778cc)
2023-04-15 17:22:19,457 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3386ed8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@727453a3)
2023-04-15 17:22:19,457 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@67dc6b48) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@57f2e67)
2023-04-15 17:22:19,457 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4571cebe) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@154864f8)
2023-04-15 17:22:19,458 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@11cadb32) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6d3ad37a)
2023-04-15 17:22:19,460 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 17:22:19,460 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 17:22:19,461 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 17:22:19,464 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:22:19,464 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:22:19,468 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@58636b50
2023-04-15 17:22:19,468 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@3b30eec5`
2023-04-15 17:22:19,474 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:22:19,475 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:22:19,476 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:22:19,476 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:22:19,476 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:22:19,476 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:22:19,479 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1de30c31] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@1cc93da4]
2023-04-15 17:22:19,853 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1de30c31] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@1eabfad5]
2023-04-15 17:22:20,341 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 17:22:20,351 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@1eabfad5] for TypeConfiguration
2023-04-15 17:22:20,354 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:22:20,706 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 17:22:21,264 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 4.387 seconds (process running for 5.59)
2023-04-15 17:22:21,266 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 17:22:21,406 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=26, type=class java.lang.Long, identifying=true}'}]
2023-04-15 17:22:21,452 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 17:22:21,499 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:22:21,500 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:22:21,501 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:22:21,501 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:22:21,502 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:22:21,502 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 01 00:00:00 CET 2024","effectiveDate": "Sun Jul 06 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:22:21,503 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 02 00:00:00 CET 2024","effectiveDate": "Mon Jul 07 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:22:21,503 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 03 00:00:00 CET 2024","effectiveDate": "Tue Jul 08 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:22:21,503 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 04 00:00:00 CET 2024","effectiveDate": "Wed Jul 09 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:22:21,505 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 05 00:00:00 CET 2024","effectiveDate": "Thu Jul 10 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:22:21,531 ERROR org.springframework.batch.core.step.AbstractStep [main] Encountered an error executing step step1 in job importUserJob
org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [INSERT INTO BATCH.policy (contractor_customer_code, effective_date, expire_date, insured_customer_code, policy_number, state) VALUES (?, ?, ?, ?, ?, ?)]; Duplicate entry 'P000851' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:103)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1538)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:667)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:691)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1034)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:373)
	at org.springframework.batch.item.database.JdbcBatchItemWriter.write(JdbcBatchItemWriter.java:190)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.writeItems(SimpleChunkProcessor.java:203)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.doWrite(SimpleChunkProcessor.java:170)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.write(SimpleChunkProcessor.java:297)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.process(SimpleChunkProcessor.java:227)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:75)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:389)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:313)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:256)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:362)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:206)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:139)
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:241)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:227)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:178)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:166)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:161)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:156)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:760)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.sql.BatchUpdateException: Duplicate entry 'P000851' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at com.mysql.cj.util.Util.handleNewInstance(Util.java:192)
	at com.mysql.cj.util.Util.getInstance(Util.java:167)
	at com.mysql.cj.util.Util.getInstance(Util.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLError.createBatchUpdateException(SQLError.java:224)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:816)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchInternal(ClientPreparedStatement.java:418)
	at com.mysql.cj.jdbc.StatementImpl.executeBatch(StatementImpl.java:795)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1047)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:651)
	... 114 common frames omitted
Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'P000851' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:795)
	... 120 common frames omitted
2023-04-15 17:22:21,540 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 85ms
2023-04-15 17:22:21,555 INFO com.yuripe.batchType0A.Listener.JobFailureNotificationListener [main] !!! JOB FAILED! Time to verify the results
2023-04-15 17:22:21,563 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=26, type=class java.lang.Long, identifying=true}'}] and the following status: [FAILED] in 134ms
2023-04-15 17:22:21,785 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:22:21,787 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@1eabfad5] for TypeConfiguration
2023-04-15 17:22:21,788 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@2fbf7ea4] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@1eabfad5]
2023-04-15 17:22:21,795 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 17:22:21,811 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 17:23:04,313 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 17:23:04,440 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 17:23:04,816 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 7068 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 17:23:04,817 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 17:23:05,516 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:23:05,518 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 17:23:05,542 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 18 ms. Found 0 JDBC repository interfaces.
2023-04-15 17:23:05,553 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:23:05,555 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 17:23:05,562 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 3 ms. Found 0 JPA repository interfaces.
2023-04-15 17:23:05,979 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 17:23:06,534 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@52354202
2023-04-15 17:23:06,536 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 17:23:06,677 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 17:23:06,752 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 17:23:07,105 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 17:23:07,123 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1e477944
2023-04-15 17:23:07,123 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1e477944
2023-04-15 17:23:07,124 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@1e477944
2023-04-15 17:23:07,124 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@6cf047cf
2023-04-15 17:23:07,125 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@6cf047cf
2023-04-15 17:23:07,125 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 17:23:07,125 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 17:23:07,126 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 17:23:07,126 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 17:23:07,126 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 17:23:07,127 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 17:23:07,127 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 17:23:07,128 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 17:23:07,128 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 17:23:07,129 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 17:23:07,129 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 17:23:07,129 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 17:23:07,130 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 17:23:07,130 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 17:23:07,130 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 17:23:07,131 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 17:23:07,131 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 17:23:07,131 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 17:23:07,132 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 17:23:07,132 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 17:23:07,132 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 17:23:07,133 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 17:23:07,133 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:23:07,133 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:23:07,133 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:23:07,135 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 17:23:07,135 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 17:23:07,136 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 17:23:07,136 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:23:07,136 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:23:07,137 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:23:07,137 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 17:23:07,138 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 17:23:07,138 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 17:23:07,139 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 17:23:07,139 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 17:23:07,139 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 17:23:07,144 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 17:23:07,144 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 17:23:07,145 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 17:23:07,145 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 17:23:07,145 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 17:23:07,145 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 17:23:07,146 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 17:23:07,146 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 17:23:07,146 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 17:23:07,147 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 17:23:07,147 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 17:23:07,147 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 17:23:07,147 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 17:23:07,148 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 17:23:07,148 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 17:23:07,149 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 17:23:07,149 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 17:23:07,150 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 17:23:07,150 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 17:23:07,150 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 17:23:07,151 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 17:23:07,151 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 17:23:07,151 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 17:23:07,152 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 17:23:07,152 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 17:23:07,152 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 17:23:07,152 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 17:23:07,153 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 17:23:07,153 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 17:23:07,153 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 17:23:07,154 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 17:23:07,154 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 17:23:07,154 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 17:23:07,154 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 17:23:07,155 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 17:23:07,155 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 17:23:07,155 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 17:23:07,156 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 17:23:07,156 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 17:23:07,156 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 17:23:07,157 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 17:23:07,157 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 17:23:07,157 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 17:23:07,157 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 17:23:07,157 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 17:23:07,159 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 17:23:07,159 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 17:23:07,159 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 17:23:07,159 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 17:23:07,160 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 17:23:07,160 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 17:23:07,160 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 17:23:07,161 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 17:23:07,161 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 17:23:07,161 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 17:23:07,161 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 17:23:07,162 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 17:23:07,162 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 17:23:07,162 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 17:23:07,162 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 17:23:07,162 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 17:23:07,164 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 17:23:07,164 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 17:23:07,164 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 17:23:07,165 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 17:23:07,165 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 17:23:07,165 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 17:23:07,165 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 17:23:07,165 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 17:23:07,166 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 17:23:07,166 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 17:23:07,166 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 17:23:07,166 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 17:23:07,166 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 17:23:07,167 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 17:23:07,167 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 17:23:07,167 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 17:23:07,167 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 17:23:07,168 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 17:23:07,177 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@377dbc50
2023-04-15 17:23:07,177 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@377dbc50
2023-04-15 17:23:07,180 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@38a38ed4
2023-04-15 17:23:07,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@38a38ed4
2023-04-15 17:23:07,182 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@40b31a16
2023-04-15 17:23:07,183 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@25fa6889
2023-04-15 17:23:07,183 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@1de73d37
2023-04-15 17:23:07,184 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@31693a86
2023-04-15 17:23:07,184 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 17:23:07,184 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 17:23:07,184 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 17:23:07,185 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 17:23:07,185 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@3d71e10b
2023-04-15 17:23:07,258 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 17:23:07,260 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 17:23:07,289 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5fc7255c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@20a47036)
2023-04-15 17:23:07,289 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@70c205bf) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@43ab9ae9)
2023-04-15 17:23:07,289 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2520aa05) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@26865b57)
2023-04-15 17:23:07,290 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@46894dc5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@596afb2f)
2023-04-15 17:23:07,290 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@79ba0285) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6df2a206)
2023-04-15 17:23:07,290 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@61993d18) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6f240187)
2023-04-15 17:23:07,291 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@46a388cc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3e39f08c)
2023-04-15 17:23:07,291 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@16e07bae) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@598778cc)
2023-04-15 17:23:07,291 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3386ed8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@727453a3)
2023-04-15 17:23:07,293 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 17:23:07,294 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 17:23:07,295 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 17:23:07,297 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:23:07,297 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:23:07,301 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@63814bbe
2023-04-15 17:23:07,301 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@40b31a16`
2023-04-15 17:23:07,308 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:23:07,310 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:23:07,310 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:23:07,311 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:23:07,311 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:23:07,311 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:23:07,313 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7db162f2] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@64f3991e]
2023-04-15 17:23:07,719 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7db162f2] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@4ec27c4c]
2023-04-15 17:23:08,262 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 17:23:08,271 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@4ec27c4c] for TypeConfiguration
2023-04-15 17:23:08,273 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:23:08,648 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 17:23:09,217 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 4.61 seconds (process running for 5.725)
2023-04-15 17:23:09,220 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 17:23:09,367 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=27, type=class java.lang.Long, identifying=true}'}]
2023-04-15 17:23:09,412 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 17:23:09,459 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,460 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,461 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,461 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,462 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,462 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 01 00:00:00 CET 2024","effectiveDate": "Sun Jul 06 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,462 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 02 00:00:00 CET 2024","effectiveDate": "Mon Jul 07 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,463 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 03 00:00:00 CET 2024","effectiveDate": "Tue Jul 08 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,463 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 04 00:00:00 CET 2024","effectiveDate": "Wed Jul 09 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,464 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 05 00:00:00 CET 2024","effectiveDate": "Thu Jul 10 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,500 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 06 00:00:00 CET 2024","effectiveDate": "Fri Jul 11 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,500 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 07 00:00:00 CET 2024","effectiveDate": "Sat Jul 12 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,501 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 08 00:00:00 CET 2024","effectiveDate": "Sun Jul 13 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,501 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 09 00:00:00 CET 2024","effectiveDate": "Mon Jul 14 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,501 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 10 00:00:00 CET 2024","effectiveDate": "Tue Jul 15 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,503 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 11 00:00:00 CET 2024","effectiveDate": "Wed Jul 16 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,503 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 12 00:00:00 CET 2024","effectiveDate": "Thu Jul 17 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,503 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 13 00:00:00 CET 2024","effectiveDate": "Fri Jul 18 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,503 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 14 00:00:00 CET 2024","effectiveDate": "Sat Jul 19 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,504 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 15 00:00:00 CET 2024","effectiveDate": "Sun Jul 20 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,530 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 16 00:00:00 CET 2024","effectiveDate": "Mon Jul 21 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,530 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 17 00:00:00 CET 2024","effectiveDate": "Tue Jul 22 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,531 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 18 00:00:00 CET 2024","effectiveDate": "Wed Jul 23 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,531 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 19 00:00:00 CET 2024","effectiveDate": "Thu Jul 24 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,532 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 20 00:00:00 CET 2024","effectiveDate": "Fri Jul 25 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,532 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 21 00:00:00 CET 2024","effectiveDate": "Sat Jul 26 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,532 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 22 00:00:00 CET 2024","effectiveDate": "Sun Jul 27 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,533 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 23 00:00:00 CET 2024","effectiveDate": "Mon Jul 28 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,533 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 24 00:00:00 CET 2024","effectiveDate": "Tue Jul 29 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,533 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 25 00:00:00 CET 2024","effectiveDate": "Wed Jul 30 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,559 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 26 00:00:00 CET 2024","effectiveDate": "Thu Jul 31 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,559 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 27 00:00:00 CET 2024","effectiveDate": "Fri Aug 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,559 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 28 00:00:00 CET 2024","effectiveDate": "Sat Aug 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,560 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 29 00:00:00 CET 2024","effectiveDate": "Sun Aug 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,560 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 30 00:00:00 CET 2024","effectiveDate": "Mon Aug 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,560 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 31 00:00:00 CET 2024","effectiveDate": "Tue Aug 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,560 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 01 00:00:00 CET 2024","effectiveDate": "Wed Aug 06 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,561 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 02 00:00:00 CET 2024","effectiveDate": "Thu Aug 07 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,561 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 03 00:00:00 CET 2024","effectiveDate": "Fri Aug 08 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,561 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 04 00:00:00 CET 2024","effectiveDate": "Sat Aug 09 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,605 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 05 00:00:00 CET 2024","effectiveDate": "Sun Aug 10 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,605 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 06 00:00:00 CET 2024","effectiveDate": "Mon Aug 11 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,605 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 07 00:00:00 CET 2024","effectiveDate": "Tue Aug 12 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,605 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 08 00:00:00 CET 2024","effectiveDate": "Wed Aug 13 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,606 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 09 00:00:00 CET 2024","effectiveDate": "Thu Aug 14 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,606 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 10 00:00:00 CET 2024","effectiveDate": "Fri Aug 15 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,606 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 11 00:00:00 CET 2024","effectiveDate": "Sat Aug 16 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,606 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 12 00:00:00 CET 2024","effectiveDate": "Sun Aug 17 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,606 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 13 00:00:00 CET 2024","effectiveDate": "Mon Aug 18 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,607 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 14 00:00:00 CET 2024","effectiveDate": "Tue Aug 19 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,627 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 15 00:00:00 CET 2024","effectiveDate": "Wed Aug 20 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,628 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 16 00:00:00 CET 2024","effectiveDate": "Thu Aug 21 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,628 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 17 00:00:00 CET 2024","effectiveDate": "Fri Aug 22 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,628 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 18 00:00:00 CET 2024","effectiveDate": "Sat Aug 23 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,630 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 19 00:00:00 CET 2024","effectiveDate": "Sun Aug 24 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,630 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 20 00:00:00 CET 2024","effectiveDate": "Mon Aug 25 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,630 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 21 00:00:00 CET 2024","effectiveDate": "Tue Aug 26 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,630 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 22 00:00:00 CET 2024","effectiveDate": "Wed Aug 27 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,630 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 23 00:00:00 CET 2024","effectiveDate": "Thu Aug 28 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,630 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 24 00:00:00 CET 2024","effectiveDate": "Fri Aug 29 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,652 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 25 00:00:00 CET 2024","effectiveDate": "Sat Aug 30 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,653 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 26 00:00:00 CET 2024","effectiveDate": "Sun Aug 31 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,653 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 27 00:00:00 CET 2024","effectiveDate": "Mon Sep 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,653 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 28 00:00:00 CET 2024","effectiveDate": "Tue Sep 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,654 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 29 00:00:00 CET 2024","effectiveDate": "Wed Sep 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,654 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 01 00:00:00 CET 2024","effectiveDate": "Thu Sep 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,654 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 02 00:00:00 CET 2024","effectiveDate": "Fri Sep 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,654 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 03 00:00:00 CET 2024","effectiveDate": "Sat Sep 06 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,655 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 04 00:00:00 CET 2024","effectiveDate": "Sun Sep 07 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,655 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 05 00:00:00 CET 2024","effectiveDate": "Mon Sep 08 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,677 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 06 00:00:00 CET 2024","effectiveDate": "Tue Sep 09 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,678 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 07 00:00:00 CET 2024","effectiveDate": "Wed Sep 10 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,678 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 08 00:00:00 CET 2024","effectiveDate": "Thu Sep 11 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,679 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Sep 12 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,679 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 01 00:00:00 CET 2024","effectiveDate": "Sat Sep 13 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,679 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 02 00:00:00 CET 2024","effectiveDate": "Sun Sep 14 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,679 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 03 00:00:00 CET 2024","effectiveDate": "Mon Sep 15 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,680 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 04 00:00:00 CET 2024","effectiveDate": "Tue Sep 16 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,680 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 05 00:00:00 CET 2024","effectiveDate": "Wed Sep 17 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,680 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 06 00:00:00 CET 2024","effectiveDate": "Thu Sep 18 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,701 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 07 00:00:00 CET 2024","effectiveDate": "Fri Sep 19 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,701 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 08 00:00:00 CET 2024","effectiveDate": "Sat Sep 20 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,701 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 09 00:00:00 CET 2024","effectiveDate": "Sun Sep 21 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,702 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 10 00:00:00 CET 2024","effectiveDate": "Mon Sep 22 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,702 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 11 00:00:00 CET 2024","effectiveDate": "Tue Sep 23 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,702 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 12 00:00:00 CET 2024","effectiveDate": "Wed Sep 24 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,703 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 13 00:00:00 CET 2024","effectiveDate": "Thu Sep 25 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,703 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 14 00:00:00 CET 2024","effectiveDate": "Fri Sep 26 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,703 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 15 00:00:00 CET 2024","effectiveDate": "Sat Sep 27 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,704 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 16 00:00:00 CET 2024","effectiveDate": "Sun Sep 28 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,725 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 17 00:00:00 CET 2024","effectiveDate": "Mon Sep 29 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,725 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 18 00:00:00 CET 2024","effectiveDate": "Tue Sep 30 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,725 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 19 00:00:00 CET 2024","effectiveDate": "Wed Oct 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,726 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 20 00:00:00 CET 2024","effectiveDate": "Thu Oct 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,726 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 21 00:00:00 CET 2024","effectiveDate": "Fri Oct 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,726 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 22 00:00:00 CET 2024","effectiveDate": "Sat Oct 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,727 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 23 00:00:00 CET 2024","effectiveDate": "Sun Oct 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,727 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 24 00:00:00 CET 2024","effectiveDate": "Mon Oct 06 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,727 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 25 00:00:00 CET 2024","effectiveDate": "Tue Oct 07 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,727 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 26 00:00:00 CET 2024","effectiveDate": "Thu Jul 31 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,749 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 27 00:00:00 CET 2024","effectiveDate": "Fri Aug 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,749 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 28 00:00:00 CET 2024","effectiveDate": "Sat Aug 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,750 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 29 00:00:00 CET 2024","effectiveDate": "Sun Aug 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,750 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 30 00:00:00 CET 2024","effectiveDate": "Mon Aug 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,750 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 31 00:00:00 CET 2024","effectiveDate": "Tue Aug 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,751 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 01 00:00:00 CET 2024","effectiveDate": "Wed Aug 06 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,751 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 02 00:00:00 CET 2024","effectiveDate": "Thu Aug 07 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,751 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 03 00:00:00 CET 2024","effectiveDate": "Fri Aug 08 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,752 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 04 00:00:00 CET 2024","effectiveDate": "Sat Aug 09 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,752 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 05 00:00:00 CET 2024","effectiveDate": "Sun Aug 10 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,773 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 06 00:00:00 CET 2024","effectiveDate": "Mon Aug 11 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,773 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 07 00:00:00 CET 2024","effectiveDate": "Tue Aug 12 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,773 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 08 00:00:00 CET 2024","effectiveDate": "Wed Aug 13 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,773 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 09 00:00:00 CET 2024","effectiveDate": "Thu Aug 14 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,774 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 10 00:00:00 CET 2024","effectiveDate": "Fri Aug 15 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,774 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 11 00:00:00 CET 2024","effectiveDate": "Sat Aug 16 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,774 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 12 00:00:00 CET 2024","effectiveDate": "Sun Aug 17 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,775 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 13 00:00:00 CET 2024","effectiveDate": "Mon Aug 18 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,775 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 14 00:00:00 CET 2024","effectiveDate": "Tue Aug 19 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,775 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 15 00:00:00 CET 2024","effectiveDate": "Wed Aug 20 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,795 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 16 00:00:00 CET 2024","effectiveDate": "Thu Aug 21 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,796 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 17 00:00:00 CET 2024","effectiveDate": "Fri Aug 22 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,796 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 18 00:00:00 CET 2024","effectiveDate": "Sat Aug 23 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,797 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 19 00:00:00 CET 2024","effectiveDate": "Sun Aug 24 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,797 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 20 00:00:00 CET 2024","effectiveDate": "Mon Aug 25 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,797 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 21 00:00:00 CET 2024","effectiveDate": "Tue Aug 26 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,798 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 22 00:00:00 CET 2024","effectiveDate": "Wed Aug 27 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,798 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 23 00:00:00 CET 2024","effectiveDate": "Thu Aug 28 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,798 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 24 00:00:00 CET 2024","effectiveDate": "Fri Aug 29 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,798 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 25 00:00:00 CET 2024","effectiveDate": "Sat Aug 30 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,818 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 26 00:00:00 CET 2024","effectiveDate": "Sun Aug 31 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,818 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 27 00:00:00 CET 2024","effectiveDate": "Mon Sep 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,819 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 28 00:00:00 CET 2024","effectiveDate": "Tue Sep 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,819 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 29 00:00:00 CET 2024","effectiveDate": "Wed Sep 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,819 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 01 00:00:00 CET 2024","effectiveDate": "Thu Sep 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,820 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 02 00:00:00 CET 2024","effectiveDate": "Fri Sep 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,820 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 03 00:00:00 CET 2024","effectiveDate": "Sat Sep 06 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,820 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 04 00:00:00 CET 2024","effectiveDate": "Sun Sep 07 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,821 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 05 00:00:00 CET 2024","effectiveDate": "Mon Sep 08 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,821 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 06 00:00:00 CET 2024","effectiveDate": "Tue Sep 09 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,841 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 07 00:00:00 CET 2024","effectiveDate": "Wed Sep 10 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,841 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 08 00:00:00 CET 2024","effectiveDate": "Thu Sep 11 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,842 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 09 00:00:00 CET 2024","effectiveDate": "Fri Sep 12 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,842 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 10 00:00:00 CET 2024","effectiveDate": "Sat Sep 13 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,842 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 11 00:00:00 CET 2024","effectiveDate": "Sun Sep 14 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,842 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 12 00:00:00 CET 2024","effectiveDate": "Mon Sep 15 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,843 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 13 00:00:00 CET 2024","effectiveDate": "Tue Sep 16 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,843 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 14 00:00:00 CET 2024","effectiveDate": "Wed Sep 17 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,843 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 15 00:00:00 CET 2024","effectiveDate": "Thu Sep 18 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,844 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 16 00:00:00 CET 2024","effectiveDate": "Fri Sep 19 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,865 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 17 00:00:00 CET 2024","effectiveDate": "Sat Sep 20 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,866 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 18 00:00:00 CET 2024","effectiveDate": "Sun Sep 21 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,866 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 19 00:00:00 CET 2024","effectiveDate": "Mon Sep 22 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,866 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 20 00:00:00 CET 2024","effectiveDate": "Tue Sep 23 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,866 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 21 00:00:00 CET 2024","effectiveDate": "Wed Sep 24 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,867 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 22 00:00:00 CET 2024","effectiveDate": "Thu Sep 25 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,868 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 23 00:00:00 CET 2024","effectiveDate": "Fri Sep 26 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,868 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 24 00:00:00 CET 2024","effectiveDate": "Sat Sep 27 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,868 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 25 00:00:00 CET 2024","effectiveDate": "Sun Sep 28 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,868 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 26 00:00:00 CET 2024","effectiveDate": "Mon Sep 29 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,884 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 27 00:00:00 CET 2024","effectiveDate": "Tue Sep 30 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,885 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 28 00:00:00 CET 2024","effectiveDate": "Wed Oct 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,885 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 29 00:00:00 CET 2024","effectiveDate": "Thu Oct 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,886 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 30 00:00:00 CET 2024","effectiveDate": "Fri Oct 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,886 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 31 00:00:00 CET 2024","effectiveDate": "Sat Oct 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,886 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 01 00:00:00 CEST 2024","effectiveDate": "Sun Oct 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,886 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 02 00:00:00 CEST 2024","effectiveDate": "Mon Oct 06 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,886 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 03 00:00:00 CEST 2024","effectiveDate": "Tue Oct 07 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,887 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 04 00:00:00 CEST 2024","effectiveDate": "Wed Oct 08 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,887 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 05 00:00:00 CEST 2024","effectiveDate": "Thu Oct 09 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,903 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 06 00:00:00 CEST 2024","effectiveDate": "Fri Oct 10 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,904 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 07 00:00:00 CEST 2024","effectiveDate": "Sat Oct 11 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,904 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 08 00:00:00 CEST 2024","effectiveDate": "Sun Oct 12 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,904 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 31 00:00:00 CET 2024","effectiveDate": "Mon Oct 13 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,904 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 01 00:00:00 CET 2024","effectiveDate": "Tue Oct 14 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,905 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 02 00:00:00 CET 2024","effectiveDate": "Wed Oct 15 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,905 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 03 00:00:00 CET 2024","effectiveDate": "Thu Oct 16 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,905 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 04 00:00:00 CET 2024","effectiveDate": "Fri Oct 17 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,906 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 05 00:00:00 CET 2024","effectiveDate": "Sat Oct 18 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,906 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 06 00:00:00 CET 2024","effectiveDate": "Sun Oct 19 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,920 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 07 00:00:00 CET 2024","effectiveDate": "Mon Oct 20 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,922 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 08 00:00:00 CET 2024","effectiveDate": "Tue Oct 21 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,922 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 09 00:00:00 CET 2024","effectiveDate": "Wed Oct 22 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,922 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 10 00:00:00 CET 2024","effectiveDate": "Thu Oct 23 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,923 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 11 00:00:00 CET 2024","effectiveDate": "Fri Oct 24 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,923 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 12 00:00:00 CET 2024","effectiveDate": "Sat Oct 25 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,923 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 13 00:00:00 CET 2024","effectiveDate": "Sun Oct 26 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,923 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 14 00:00:00 CET 2024","effectiveDate": "Mon Oct 27 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:09,923 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 15 00:00:00 CET 2024","effectiveDate": "Tue Oct 28 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:09,924 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 16 00:00:00 CET 2024","effectiveDate": "Wed Oct 29 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:09,941 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 17 00:00:00 CET 2024","effectiveDate": "Thu Oct 30 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:09,941 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 18 00:00:00 CET 2024","effectiveDate": "Fri Oct 31 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:09,941 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 19 00:00:00 CET 2024","effectiveDate": "Sat Nov 01 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:09,942 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 20 00:00:00 CET 2024","effectiveDate": "Sun Nov 02 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:09,942 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 21 00:00:00 CET 2024","effectiveDate": "Mon Nov 03 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:09,942 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 22 00:00:00 CET 2024","effectiveDate": "Tue Nov 04 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:09,942 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 23 00:00:00 CET 2024","effectiveDate": "Wed Nov 05 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:09,942 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 24 00:00:00 CET 2024","effectiveDate": "Thu Nov 06 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:09,942 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 25 00:00:00 CET 2024","effectiveDate": "Fri Nov 07 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:09,943 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 26 00:00:00 CET 2024","effectiveDate": "Sun Aug 31 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,955 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 27 00:00:00 CET 2024","effectiveDate": "Mon Sep 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,955 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 28 00:00:00 CET 2024","effectiveDate": "Tue Sep 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,956 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 29 00:00:00 CET 2024","effectiveDate": "Wed Sep 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,956 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 01 00:00:00 CET 2024","effectiveDate": "Thu Sep 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,956 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 02 00:00:00 CET 2024","effectiveDate": "Fri Sep 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,956 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 03 00:00:00 CET 2024","effectiveDate": "Sat Sep 06 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,956 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 04 00:00:00 CET 2024","effectiveDate": "Sun Sep 07 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,956 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 05 00:00:00 CET 2024","effectiveDate": "Mon Sep 08 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,956 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 06 00:00:00 CET 2024","effectiveDate": "Tue Sep 09 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,956 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 07 00:00:00 CET 2024","effectiveDate": "Wed Sep 10 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,978 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 08 00:00:00 CET 2024","effectiveDate": "Thu Sep 11 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,978 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 09 00:00:00 CET 2024","effectiveDate": "Fri Sep 12 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,978 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 10 00:00:00 CET 2024","effectiveDate": "Sat Sep 13 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,978 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 11 00:00:00 CET 2024","effectiveDate": "Sun Sep 14 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,979 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 12 00:00:00 CET 2024","effectiveDate": "Mon Sep 15 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,979 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 13 00:00:00 CET 2024","effectiveDate": "Tue Sep 16 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,979 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 14 00:00:00 CET 2024","effectiveDate": "Wed Sep 17 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,979 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 15 00:00:00 CET 2024","effectiveDate": "Thu Sep 18 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,980 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 16 00:00:00 CET 2024","effectiveDate": "Fri Sep 19 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,980 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 17 00:00:00 CET 2024","effectiveDate": "Sat Sep 20 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,995 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 18 00:00:00 CET 2024","effectiveDate": "Sun Sep 21 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,995 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 19 00:00:00 CET 2024","effectiveDate": "Mon Sep 22 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,995 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 20 00:00:00 CET 2024","effectiveDate": "Tue Sep 23 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,995 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 21 00:00:00 CET 2024","effectiveDate": "Wed Sep 24 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,995 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 22 00:00:00 CET 2024","effectiveDate": "Thu Sep 25 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,995 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 23 00:00:00 CET 2024","effectiveDate": "Fri Sep 26 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,995 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 24 00:00:00 CET 2024","effectiveDate": "Sat Sep 27 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,995 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 25 00:00:00 CET 2024","effectiveDate": "Sun Sep 28 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,995 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 26 00:00:00 CET 2024","effectiveDate": "Mon Sep 29 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:09,996 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 27 00:00:00 CET 2024","effectiveDate": "Tue Sep 30 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,009 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 28 00:00:00 CET 2024","effectiveDate": "Wed Oct 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,009 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 29 00:00:00 CET 2024","effectiveDate": "Thu Oct 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,009 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 30 00:00:00 CET 2024","effectiveDate": "Fri Oct 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,009 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 31 00:00:00 CET 2024","effectiveDate": "Sat Oct 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,009 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 01 00:00:00 CEST 2024","effectiveDate": "Sun Oct 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,009 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 02 00:00:00 CEST 2024","effectiveDate": "Mon Oct 06 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,009 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 03 00:00:00 CEST 2024","effectiveDate": "Tue Oct 07 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,011 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 04 00:00:00 CEST 2024","effectiveDate": "Wed Oct 08 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,011 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 05 00:00:00 CEST 2024","effectiveDate": "Thu Oct 09 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,011 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 06 00:00:00 CEST 2024","effectiveDate": "Fri Oct 10 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,025 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 07 00:00:00 CEST 2024","effectiveDate": "Sat Oct 11 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,026 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 08 00:00:00 CEST 2024","effectiveDate": "Sun Oct 12 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,026 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 09 00:00:00 CEST 2024","effectiveDate": "Mon Oct 13 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,026 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 10 00:00:00 CEST 2024","effectiveDate": "Tue Oct 14 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,026 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 11 00:00:00 CEST 2024","effectiveDate": "Wed Oct 15 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,027 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 12 00:00:00 CEST 2024","effectiveDate": "Thu Oct 16 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,027 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 13 00:00:00 CEST 2024","effectiveDate": "Fri Oct 17 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,027 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 14 00:00:00 CEST 2024","effectiveDate": "Sat Oct 18 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,027 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 15 00:00:00 CEST 2024","effectiveDate": "Sun Oct 19 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,028 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 16 00:00:00 CEST 2024","effectiveDate": "Mon Oct 20 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,044 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 17 00:00:00 CEST 2024","effectiveDate": "Tue Oct 21 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,045 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 18 00:00:00 CEST 2024","effectiveDate": "Wed Oct 22 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,045 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 19 00:00:00 CEST 2024","effectiveDate": "Thu Oct 23 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,045 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 20 00:00:00 CEST 2024","effectiveDate": "Fri Oct 24 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,045 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 21 00:00:00 CEST 2024","effectiveDate": "Sat Oct 25 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,045 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 22 00:00:00 CEST 2024","effectiveDate": "Sun Oct 26 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,047 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 23 00:00:00 CEST 2024","effectiveDate": "Mon Oct 27 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,047 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 24 00:00:00 CEST 2024","effectiveDate": "Tue Oct 28 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,047 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 25 00:00:00 CEST 2024","effectiveDate": "Wed Oct 29 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,047 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 26 00:00:00 CEST 2024","effectiveDate": "Thu Oct 30 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,064 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 27 00:00:00 CEST 2024","effectiveDate": "Fri Oct 31 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,064 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 28 00:00:00 CEST 2024","effectiveDate": "Sat Nov 01 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,065 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 29 00:00:00 CEST 2024","effectiveDate": "Sun Nov 02 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,065 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 30 00:00:00 CEST 2024","effectiveDate": "Mon Nov 03 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,065 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 01 00:00:00 CEST 2024","effectiveDate": "Tue Nov 04 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,065 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 02 00:00:00 CEST 2024","effectiveDate": "Wed Nov 05 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,066 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 03 00:00:00 CEST 2024","effectiveDate": "Thu Nov 06 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,066 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 04 00:00:00 CEST 2024","effectiveDate": "Fri Nov 07 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,066 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 05 00:00:00 CEST 2024","effectiveDate": "Sat Nov 08 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,067 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 06 00:00:00 CEST 2024","effectiveDate": "Sun Nov 09 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,083 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 07 00:00:00 CEST 2024","effectiveDate": "Mon Nov 10 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,084 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 08 00:00:00 CEST 2024","effectiveDate": "Tue Nov 11 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,084 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 09 00:00:00 CEST 2024","effectiveDate": "Wed Nov 12 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,084 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 29 00:00:00 CET 2024","effectiveDate": "Thu Nov 13 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,084 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 01 00:00:00 CET 2024","effectiveDate": "Fri Nov 14 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,084 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 02 00:00:00 CET 2024","effectiveDate": "Sat Nov 15 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,085 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 03 00:00:00 CET 2024","effectiveDate": "Sun Nov 16 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,085 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 04 00:00:00 CET 2024","effectiveDate": "Mon Nov 17 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,085 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 05 00:00:00 CET 2024","effectiveDate": "Tue Nov 18 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,085 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 06 00:00:00 CET 2024","effectiveDate": "Wed Nov 19 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,099 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 07 00:00:00 CET 2024","effectiveDate": "Thu Nov 20 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,099 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 08 00:00:00 CET 2024","effectiveDate": "Fri Nov 21 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,099 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 09 00:00:00 CET 2024","effectiveDate": "Sat Nov 22 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,099 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 10 00:00:00 CET 2024","effectiveDate": "Sun Nov 23 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,099 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 11 00:00:00 CET 2024","effectiveDate": "Mon Nov 24 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,099 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 12 00:00:00 CET 2024","effectiveDate": "Tue Nov 25 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,101 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 13 00:00:00 CET 2024","effectiveDate": "Wed Nov 26 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,101 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 14 00:00:00 CET 2024","effectiveDate": "Thu Nov 27 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,101 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 15 00:00:00 CET 2024","effectiveDate": "Fri Nov 28 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,101 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 16 00:00:00 CET 2024","effectiveDate": "Sat Nov 29 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,116 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 17 00:00:00 CET 2024","effectiveDate": "Sun Nov 30 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,116 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 18 00:00:00 CET 2024","effectiveDate": "Mon Dec 01 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,117 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 19 00:00:00 CET 2024","effectiveDate": "Tue Dec 02 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,117 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 20 00:00:00 CET 2024","effectiveDate": "Wed Dec 03 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,117 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 21 00:00:00 CET 2024","effectiveDate": "Thu Dec 04 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,117 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 22 00:00:00 CET 2024","effectiveDate": "Fri Dec 05 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,117 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 23 00:00:00 CET 2024","effectiveDate": "Sat Dec 06 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,118 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 24 00:00:00 CET 2024","effectiveDate": "Sun Dec 07 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,118 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 25 00:00:00 CET 2024","effectiveDate": "Mon Dec 08 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,118 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 26 00:00:00 CET 2024","effectiveDate": "Tue Sep 30 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,130 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 27 00:00:00 CET 2024","effectiveDate": "Wed Oct 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,130 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 28 00:00:00 CET 2024","effectiveDate": "Thu Oct 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,130 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 29 00:00:00 CET 2024","effectiveDate": "Fri Oct 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,130 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 30 00:00:00 CET 2024","effectiveDate": "Sat Oct 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,130 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 31 00:00:00 CET 2024","effectiveDate": "Sun Oct 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,131 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 01 00:00:00 CEST 2024","effectiveDate": "Mon Oct 06 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,131 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 02 00:00:00 CEST 2024","effectiveDate": "Tue Oct 07 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,131 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 03 00:00:00 CEST 2024","effectiveDate": "Wed Oct 08 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,131 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 04 00:00:00 CEST 2024","effectiveDate": "Thu Oct 09 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,131 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 05 00:00:00 CEST 2024","effectiveDate": "Fri Oct 10 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,144 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 06 00:00:00 CEST 2024","effectiveDate": "Sat Oct 11 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,145 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 07 00:00:00 CEST 2024","effectiveDate": "Sun Oct 12 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,145 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 08 00:00:00 CEST 2024","effectiveDate": "Mon Oct 13 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,145 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 09 00:00:00 CEST 2024","effectiveDate": "Tue Oct 14 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,145 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 10 00:00:00 CEST 2024","effectiveDate": "Wed Oct 15 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,145 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 11 00:00:00 CEST 2024","effectiveDate": "Thu Oct 16 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,145 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 12 00:00:00 CEST 2024","effectiveDate": "Fri Oct 17 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,145 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 13 00:00:00 CEST 2024","effectiveDate": "Sat Oct 18 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,145 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 14 00:00:00 CEST 2024","effectiveDate": "Sun Oct 19 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,146 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 15 00:00:00 CEST 2024","effectiveDate": "Mon Oct 20 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,159 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 16 00:00:00 CEST 2024","effectiveDate": "Tue Oct 21 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,159 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 17 00:00:00 CEST 2024","effectiveDate": "Wed Oct 22 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,160 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 18 00:00:00 CEST 2024","effectiveDate": "Thu Oct 23 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,160 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 19 00:00:00 CEST 2024","effectiveDate": "Fri Oct 24 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,160 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 20 00:00:00 CEST 2024","effectiveDate": "Sat Oct 25 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,160 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 21 00:00:00 CEST 2024","effectiveDate": "Sun Oct 26 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:23:10,160 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 22 00:00:00 CEST 2024","effectiveDate": "Mon Oct 27 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,161 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 23 00:00:00 CEST 2024","effectiveDate": "Tue Oct 28 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,161 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 24 00:00:00 CEST 2024","effectiveDate": "Wed Oct 29 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,161 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 25 00:00:00 CEST 2024","effectiveDate": "Thu Oct 30 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,176 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 26 00:00:00 CEST 2024","effectiveDate": "Fri Oct 31 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,177 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 27 00:00:00 CEST 2024","effectiveDate": "Sat Nov 01 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,177 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 28 00:00:00 CEST 2024","effectiveDate": "Sun Nov 02 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,177 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 29 00:00:00 CEST 2024","effectiveDate": "Mon Nov 03 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,177 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 30 00:00:00 CEST 2024","effectiveDate": "Tue Nov 04 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,177 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 01 00:00:00 CEST 2024","effectiveDate": "Wed Nov 05 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,177 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 02 00:00:00 CEST 2024","effectiveDate": "Thu Nov 06 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,178 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 03 00:00:00 CEST 2024","effectiveDate": "Fri Nov 07 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,178 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 04 00:00:00 CEST 2024","effectiveDate": "Sat Nov 08 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,178 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 05 00:00:00 CEST 2024","effectiveDate": "Sun Nov 09 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,190 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 06 00:00:00 CEST 2024","effectiveDate": "Mon Nov 10 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,190 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 07 00:00:00 CEST 2024","effectiveDate": "Tue Nov 11 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,191 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 08 00:00:00 CEST 2024","effectiveDate": "Wed Nov 12 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,191 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 09 00:00:00 CEST 2024","effectiveDate": "Thu Nov 13 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,191 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 10 00:00:00 CEST 2024","effectiveDate": "Fri Nov 14 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,191 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 11 00:00:00 CEST 2024","effectiveDate": "Sat Nov 15 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,191 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 12 00:00:00 CEST 2024","effectiveDate": "Sun Nov 16 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,192 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 13 00:00:00 CEST 2024","effectiveDate": "Mon Nov 17 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,192 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 14 00:00:00 CEST 2024","effectiveDate": "Tue Nov 18 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,192 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 15 00:00:00 CEST 2024","effectiveDate": "Wed Nov 19 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,203 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 16 00:00:00 CEST 2024","effectiveDate": "Thu Nov 20 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,203 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 17 00:00:00 CEST 2024","effectiveDate": "Fri Nov 21 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,203 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 18 00:00:00 CEST 2024","effectiveDate": "Sat Nov 22 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,203 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 19 00:00:00 CEST 2024","effectiveDate": "Sun Nov 23 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,204 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 20 00:00:00 CEST 2024","effectiveDate": "Mon Nov 24 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,204 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 21 00:00:00 CEST 2024","effectiveDate": "Tue Nov 25 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,204 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 22 00:00:00 CEST 2024","effectiveDate": "Wed Nov 26 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,204 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 23 00:00:00 CEST 2024","effectiveDate": "Thu Nov 27 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,204 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 24 00:00:00 CEST 2024","effectiveDate": "Fri Nov 28 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,205 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 25 00:00:00 CEST 2024","effectiveDate": "Sat Nov 29 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,216 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 26 00:00:00 CEST 2024","effectiveDate": "Sun Nov 30 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,216 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 27 00:00:00 CEST 2024","effectiveDate": "Mon Dec 01 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,216 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 28 00:00:00 CEST 2024","effectiveDate": "Tue Dec 02 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,217 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 29 00:00:00 CEST 2024","effectiveDate": "Wed Dec 03 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,217 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 30 00:00:00 CEST 2024","effectiveDate": "Thu Dec 04 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,217 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 31 00:00:00 CEST 2024","effectiveDate": "Fri Dec 05 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,217 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 01 00:00:00 CEST 2024","effectiveDate": "Sat Dec 06 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,217 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 02 00:00:00 CEST 2024","effectiveDate": "Sun Dec 07 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,217 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 03 00:00:00 CEST 2024","effectiveDate": "Mon Dec 08 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,217 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 04 00:00:00 CEST 2024","effectiveDate": "Tue Dec 09 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,228 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 05 00:00:00 CEST 2024","effectiveDate": "Wed Dec 10 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,228 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 06 00:00:00 CEST 2024","effectiveDate": "Thu Dec 11 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,228 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 07 00:00:00 CEST 2024","effectiveDate": "Fri Dec 12 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,228 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 31 00:00:00 CET 2024","effectiveDate": "Sat Dec 13 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,229 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 01 00:00:00 CEST 2024","effectiveDate": "Sun Dec 14 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,229 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 02 00:00:00 CEST 2024","effectiveDate": "Mon Dec 15 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,229 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 03 00:00:00 CEST 2024","effectiveDate": "Tue Dec 16 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,229 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 04 00:00:00 CEST 2024","effectiveDate": "Wed Dec 17 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,229 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 05 00:00:00 CEST 2024","effectiveDate": "Thu Dec 18 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,229 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 06 00:00:00 CEST 2024","effectiveDate": "Fri Dec 19 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,240 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 07 00:00:00 CEST 2024","effectiveDate": "Sat Dec 20 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,240 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 08 00:00:00 CEST 2024","effectiveDate": "Sun Dec 21 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,240 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 09 00:00:00 CEST 2024","effectiveDate": "Mon Dec 22 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,240 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 10 00:00:00 CEST 2024","effectiveDate": "Tue Dec 23 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,241 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 11 00:00:00 CEST 2024","effectiveDate": "Wed Dec 24 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,241 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 12 00:00:00 CEST 2024","effectiveDate": "Thu Dec 25 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,241 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 13 00:00:00 CEST 2024","effectiveDate": "Fri Dec 26 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,241 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 14 00:00:00 CEST 2024","effectiveDate": "Sat Dec 27 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,241 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 15 00:00:00 CEST 2024","effectiveDate": "Sun Dec 28 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,241 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 16 00:00:00 CEST 2024","effectiveDate": "Mon Dec 29 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,254 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 17 00:00:00 CEST 2024","effectiveDate": "Tue Dec 30 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,254 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 18 00:00:00 CEST 2024","effectiveDate": "Wed Dec 31 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,254 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 19 00:00:00 CEST 2024","effectiveDate": "Thu Jan 01 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,254 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 20 00:00:00 CEST 2024","effectiveDate": "Fri Jan 02 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,255 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 21 00:00:00 CEST 2024","effectiveDate": "Sat Jan 03 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,255 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 22 00:00:00 CEST 2024","effectiveDate": "Sun Jan 04 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,255 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 23 00:00:00 CEST 2024","effectiveDate": "Mon Jan 05 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,255 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 24 00:00:00 CEST 2024","effectiveDate": "Tue Jan 06 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,256 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 25 00:00:00 CEST 2024","effectiveDate": "Wed Jan 07 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,256 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 26 00:00:00 CEST 2024","effectiveDate": "Fri Oct 31 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,265 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 27 00:00:00 CEST 2024","effectiveDate": "Sat Nov 01 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,266 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 28 00:00:00 CEST 2024","effectiveDate": "Sun Nov 02 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,266 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 29 00:00:00 CEST 2024","effectiveDate": "Mon Nov 03 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,266 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 30 00:00:00 CEST 2024","effectiveDate": "Tue Nov 04 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,266 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 01 00:00:00 CEST 2024","effectiveDate": "Wed Nov 05 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,266 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 02 00:00:00 CEST 2024","effectiveDate": "Thu Nov 06 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,266 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 03 00:00:00 CEST 2024","effectiveDate": "Fri Nov 07 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,268 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 04 00:00:00 CEST 2024","effectiveDate": "Sat Nov 08 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,268 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 05 00:00:00 CEST 2024","effectiveDate": "Sun Nov 09 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,268 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 06 00:00:00 CEST 2024","effectiveDate": "Mon Nov 10 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,278 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 07 00:00:00 CEST 2024","effectiveDate": "Tue Nov 11 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,279 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 08 00:00:00 CEST 2024","effectiveDate": "Wed Nov 12 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,279 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 09 00:00:00 CEST 2024","effectiveDate": "Thu Nov 13 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,279 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 10 00:00:00 CEST 2024","effectiveDate": "Fri Nov 14 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,279 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 11 00:00:00 CEST 2024","effectiveDate": "Sat Nov 15 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,279 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 12 00:00:00 CEST 2024","effectiveDate": "Sun Nov 16 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,279 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 13 00:00:00 CEST 2024","effectiveDate": "Mon Nov 17 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,279 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 14 00:00:00 CEST 2024","effectiveDate": "Tue Nov 18 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,279 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 15 00:00:00 CEST 2024","effectiveDate": "Wed Nov 19 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,279 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 16 00:00:00 CEST 2024","effectiveDate": "Thu Nov 20 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,291 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 17 00:00:00 CEST 2024","effectiveDate": "Fri Nov 21 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,291 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 18 00:00:00 CEST 2024","effectiveDate": "Sat Nov 22 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,291 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 19 00:00:00 CEST 2024","effectiveDate": "Sun Nov 23 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,292 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 20 00:00:00 CEST 2024","effectiveDate": "Mon Nov 24 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,292 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 21 00:00:00 CEST 2024","effectiveDate": "Tue Nov 25 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,292 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 22 00:00:00 CEST 2024","effectiveDate": "Wed Nov 26 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,292 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 23 00:00:00 CEST 2024","effectiveDate": "Thu Nov 27 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,292 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 24 00:00:00 CEST 2024","effectiveDate": "Fri Nov 28 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,292 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 25 00:00:00 CEST 2024","effectiveDate": "Sat Nov 29 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,292 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 26 00:00:00 CEST 2024","effectiveDate": "Sun Nov 30 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,306 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 27 00:00:00 CEST 2024","effectiveDate": "Mon Dec 01 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,306 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 28 00:00:00 CEST 2024","effectiveDate": "Tue Dec 02 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,306 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 29 00:00:00 CEST 2024","effectiveDate": "Wed Dec 03 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,306 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 30 00:00:00 CEST 2024","effectiveDate": "Thu Dec 04 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,307 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 31 00:00:00 CEST 2024","effectiveDate": "Fri Dec 05 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,307 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 01 00:00:00 CEST 2024","effectiveDate": "Sat Dec 06 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,307 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 02 00:00:00 CEST 2024","effectiveDate": "Sun Dec 07 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,307 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 03 00:00:00 CEST 2024","effectiveDate": "Mon Dec 08 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,307 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 04 00:00:00 CEST 2024","effectiveDate": "Tue Dec 09 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,307 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 05 00:00:00 CEST 2024","effectiveDate": "Wed Dec 10 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,319 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 06 00:00:00 CEST 2024","effectiveDate": "Thu Dec 11 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,320 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 07 00:00:00 CEST 2024","effectiveDate": "Fri Dec 12 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,320 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 08 00:00:00 CEST 2024","effectiveDate": "Sat Dec 13 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,320 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 09 00:00:00 CEST 2024","effectiveDate": "Sun Dec 14 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,320 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 10 00:00:00 CEST 2024","effectiveDate": "Mon Dec 15 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,320 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 11 00:00:00 CEST 2024","effectiveDate": "Tue Dec 16 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,321 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 12 00:00:00 CEST 2024","effectiveDate": "Wed Dec 17 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,321 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 13 00:00:00 CEST 2024","effectiveDate": "Thu Dec 18 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,321 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 14 00:00:00 CEST 2024","effectiveDate": "Fri Dec 19 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,321 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 15 00:00:00 CEST 2024","effectiveDate": "Sat Dec 20 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,333 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 16 00:00:00 CEST 2024","effectiveDate": "Sun Dec 21 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,334 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 17 00:00:00 CEST 2024","effectiveDate": "Mon Dec 22 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,334 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 18 00:00:00 CEST 2024","effectiveDate": "Tue Dec 23 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,334 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 19 00:00:00 CEST 2024","effectiveDate": "Wed Dec 24 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,334 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 20 00:00:00 CEST 2024","effectiveDate": "Thu Dec 25 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,335 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 21 00:00:00 CEST 2024","effectiveDate": "Fri Dec 26 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,335 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 22 00:00:00 CEST 2024","effectiveDate": "Sat Dec 27 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,335 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 23 00:00:00 CEST 2024","effectiveDate": "Sun Dec 28 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,335 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 24 00:00:00 CEST 2024","effectiveDate": "Mon Dec 29 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,335 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 25 00:00:00 CEST 2024","effectiveDate": "Tue Dec 30 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,347 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 26 00:00:00 CEST 2024","effectiveDate": "Wed Dec 31 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,347 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 27 00:00:00 CEST 2024","effectiveDate": "Thu Jan 01 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,347 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 28 00:00:00 CEST 2024","effectiveDate": "Fri Jan 02 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,347 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 29 00:00:00 CEST 2024","effectiveDate": "Sat Jan 03 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,347 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 30 00:00:00 CEST 2024","effectiveDate": "Sun Jan 04 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,347 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 01 00:00:00 CEST 2024","effectiveDate": "Mon Jan 05 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,348 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 02 00:00:00 CEST 2024","effectiveDate": "Tue Jan 06 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,348 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 03 00:00:00 CEST 2024","effectiveDate": "Wed Jan 07 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,348 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 04 00:00:00 CEST 2024","effectiveDate": "Thu Jan 08 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,348 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 05 00:00:00 CEST 2024","effectiveDate": "Fri Jan 09 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,359 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 06 00:00:00 CEST 2024","effectiveDate": "Sat Jan 10 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,360 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 07 00:00:00 CEST 2024","effectiveDate": "Sun Jan 11 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,360 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 08 00:00:00 CEST 2024","effectiveDate": "Mon Jan 12 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,360 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 30 00:00:00 CEST 2024","effectiveDate": "Tue Jan 13 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,360 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 01 00:00:00 CEST 2024","effectiveDate": "Wed Jan 14 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,360 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 02 00:00:00 CEST 2024","effectiveDate": "Thu Jan 15 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,360 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 03 00:00:00 CEST 2024","effectiveDate": "Fri Jan 16 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,360 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 04 00:00:00 CEST 2024","effectiveDate": "Sat Jan 17 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,360 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 05 00:00:00 CEST 2024","effectiveDate": "Sun Jan 18 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,360 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 06 00:00:00 CEST 2024","effectiveDate": "Mon Jan 19 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,373 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 07 00:00:00 CEST 2024","effectiveDate": "Tue Jan 20 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,374 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 08 00:00:00 CEST 2024","effectiveDate": "Wed Jan 21 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,374 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 09 00:00:00 CEST 2024","effectiveDate": "Thu Jan 22 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,374 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 10 00:00:00 CEST 2024","effectiveDate": "Fri Jan 23 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,375 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 11 00:00:00 CEST 2024","effectiveDate": "Sat Jan 24 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,375 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 12 00:00:00 CEST 2024","effectiveDate": "Sun Jan 25 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,375 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 13 00:00:00 CEST 2024","effectiveDate": "Mon Jan 26 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,375 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 14 00:00:00 CEST 2024","effectiveDate": "Tue Jan 27 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,375 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 15 00:00:00 CEST 2024","effectiveDate": "Wed Jan 28 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,375 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 16 00:00:00 CEST 2024","effectiveDate": "Thu Jan 29 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,388 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 17 00:00:00 CEST 2024","effectiveDate": "Fri Jan 30 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,388 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 18 00:00:00 CEST 2024","effectiveDate": "Sat Jan 31 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,388 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 19 00:00:00 CEST 2024","effectiveDate": "Sun Feb 01 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,388 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 20 00:00:00 CEST 2024","effectiveDate": "Mon Feb 02 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,388 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 21 00:00:00 CEST 2024","effectiveDate": "Tue Feb 03 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,389 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 22 00:00:00 CEST 2024","effectiveDate": "Wed Feb 04 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,389 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 23 00:00:00 CEST 2024","effectiveDate": "Thu Feb 05 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,389 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 24 00:00:00 CEST 2024","effectiveDate": "Fri Feb 06 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,389 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 25 00:00:00 CEST 2024","effectiveDate": "Sat Feb 07 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,389 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 26 00:00:00 CEST 2024","effectiveDate": "Sun Nov 30 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,398 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 27 00:00:00 CEST 2024","effectiveDate": "Mon Dec 01 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,398 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 28 00:00:00 CEST 2024","effectiveDate": "Tue Dec 02 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,398 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 29 00:00:00 CEST 2024","effectiveDate": "Wed Dec 03 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,398 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 30 00:00:00 CEST 2024","effectiveDate": "Thu Dec 04 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,398 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 31 00:00:00 CEST 2024","effectiveDate": "Fri Dec 05 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,400 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 01 00:00:00 CEST 2024","effectiveDate": "Sat Dec 06 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,400 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 02 00:00:00 CEST 2024","effectiveDate": "Sun Dec 07 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,400 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 03 00:00:00 CEST 2024","effectiveDate": "Mon Dec 08 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,400 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 04 00:00:00 CEST 2024","effectiveDate": "Tue Dec 09 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,400 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 05 00:00:00 CEST 2024","effectiveDate": "Wed Dec 10 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,410 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 06 00:00:00 CEST 2024","effectiveDate": "Thu Dec 11 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,411 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 07 00:00:00 CEST 2024","effectiveDate": "Fri Dec 12 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,411 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 08 00:00:00 CEST 2024","effectiveDate": "Sat Dec 13 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,411 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 09 00:00:00 CEST 2024","effectiveDate": "Sun Dec 14 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,411 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 10 00:00:00 CEST 2024","effectiveDate": "Mon Dec 15 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,411 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 11 00:00:00 CEST 2024","effectiveDate": "Tue Dec 16 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,411 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 12 00:00:00 CEST 2024","effectiveDate": "Wed Dec 17 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,412 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 13 00:00:00 CEST 2024","effectiveDate": "Thu Dec 18 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,412 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 14 00:00:00 CEST 2024","effectiveDate": "Fri Dec 19 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,412 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 15 00:00:00 CEST 2024","effectiveDate": "Sat Dec 20 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,424 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 16 00:00:00 CEST 2024","effectiveDate": "Sun Dec 21 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,425 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 17 00:00:00 CEST 2024","effectiveDate": "Mon Dec 22 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,425 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 18 00:00:00 CEST 2024","effectiveDate": "Tue Dec 23 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,425 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 19 00:00:00 CEST 2024","effectiveDate": "Wed Dec 24 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,425 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 20 00:00:00 CEST 2024","effectiveDate": "Thu Dec 25 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,425 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 21 00:00:00 CEST 2024","effectiveDate": "Fri Dec 26 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,426 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 22 00:00:00 CEST 2024","effectiveDate": "Sat Dec 27 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,426 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 23 00:00:00 CEST 2024","effectiveDate": "Sun Dec 28 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,426 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 24 00:00:00 CEST 2024","effectiveDate": "Mon Dec 29 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,426 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 25 00:00:00 CEST 2024","effectiveDate": "Tue Dec 30 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,437 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 26 00:00:00 CEST 2024","effectiveDate": "Wed Dec 31 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,438 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 27 00:00:00 CEST 2024","effectiveDate": "Thu Jan 01 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,438 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 28 00:00:00 CEST 2024","effectiveDate": "Fri Jan 02 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,438 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 29 00:00:00 CEST 2024","effectiveDate": "Sat Jan 03 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,438 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 30 00:00:00 CEST 2024","effectiveDate": "Sun Jan 04 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,439 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 01 00:00:00 CEST 2024","effectiveDate": "Mon Jan 05 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,439 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 02 00:00:00 CEST 2024","effectiveDate": "Tue Jan 06 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,439 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 03 00:00:00 CEST 2024","effectiveDate": "Wed Jan 07 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,439 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 04 00:00:00 CEST 2024","effectiveDate": "Thu Jan 08 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,439 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 05 00:00:00 CEST 2024","effectiveDate": "Fri Jan 09 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,451 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 06 00:00:00 CEST 2024","effectiveDate": "Sat Jan 10 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,451 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 07 00:00:00 CEST 2024","effectiveDate": "Sun Jan 11 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,451 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 08 00:00:00 CEST 2024","effectiveDate": "Mon Jan 12 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,451 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 09 00:00:00 CEST 2024","effectiveDate": "Tue Jan 13 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,451 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 10 00:00:00 CEST 2024","effectiveDate": "Wed Jan 14 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,451 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 11 00:00:00 CEST 2024","effectiveDate": "Thu Jan 15 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,451 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 12 00:00:00 CEST 2024","effectiveDate": "Fri Jan 16 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,451 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 13 00:00:00 CEST 2024","effectiveDate": "Sat Jan 17 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,451 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 14 00:00:00 CEST 2024","effectiveDate": "Sun Jan 18 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,451 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 15 00:00:00 CEST 2024","effectiveDate": "Mon Jan 19 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,463 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 16 00:00:00 CEST 2024","effectiveDate": "Tue Jan 20 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,464 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 17 00:00:00 CEST 2024","effectiveDate": "Wed Jan 21 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,464 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 18 00:00:00 CEST 2024","effectiveDate": "Thu Jan 22 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,464 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 19 00:00:00 CEST 2024","effectiveDate": "Fri Jan 23 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,464 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 20 00:00:00 CEST 2024","effectiveDate": "Sat Jan 24 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,464 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 21 00:00:00 CEST 2024","effectiveDate": "Sun Jan 25 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,464 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 22 00:00:00 CEST 2024","effectiveDate": "Mon Jan 26 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,464 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 23 00:00:00 CEST 2024","effectiveDate": "Tue Jan 27 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,464 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 24 00:00:00 CEST 2024","effectiveDate": "Wed Jan 28 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,464 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 25 00:00:00 CEST 2024","effectiveDate": "Thu Jan 29 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,480 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 26 00:00:00 CEST 2024","effectiveDate": "Fri Jan 30 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,480 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 27 00:00:00 CEST 2024","effectiveDate": "Sat Jan 31 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,480 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 28 00:00:00 CEST 2024","effectiveDate": "Sun Feb 01 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,480 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 29 00:00:00 CEST 2024","effectiveDate": "Mon Feb 02 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,480 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 30 00:00:00 CEST 2024","effectiveDate": "Tue Feb 03 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,480 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 31 00:00:00 CEST 2024","effectiveDate": "Wed Feb 04 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,480 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 01 00:00:00 CEST 2024","effectiveDate": "Thu Feb 05 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,480 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 02 00:00:00 CEST 2024","effectiveDate": "Fri Feb 06 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,481 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 03 00:00:00 CEST 2024","effectiveDate": "Sat Feb 07 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,481 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 04 00:00:00 CEST 2024","effectiveDate": "Sun Feb 08 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,492 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 05 00:00:00 CEST 2024","effectiveDate": "Mon Feb 09 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,492 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 06 00:00:00 CEST 2024","effectiveDate": "Tue Feb 10 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,492 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 07 00:00:00 CEST 2024","effectiveDate": "Wed Feb 11 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,492 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 31 00:00:00 CEST 2024","effectiveDate": "Thu Feb 12 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,492 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 01 00:00:00 CEST 2024","effectiveDate": "Fri Feb 13 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,492 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 02 00:00:00 CEST 2024","effectiveDate": "Sat Feb 14 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,492 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 03 00:00:00 CEST 2024","effectiveDate": "Sun Feb 15 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,493 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 04 00:00:00 CEST 2024","effectiveDate": "Mon Feb 16 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,493 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 05 00:00:00 CEST 2024","effectiveDate": "Tue Feb 17 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,493 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 06 00:00:00 CEST 2024","effectiveDate": "Wed Feb 18 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,512 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 07 00:00:00 CEST 2024","effectiveDate": "Thu Feb 19 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,512 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 08 00:00:00 CEST 2024","effectiveDate": "Fri Feb 20 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,512 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 09 00:00:00 CEST 2024","effectiveDate": "Sat Feb 21 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,512 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 10 00:00:00 CEST 2024","effectiveDate": "Sun Feb 22 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,512 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 11 00:00:00 CEST 2024","effectiveDate": "Mon Feb 23 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,512 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 12 00:00:00 CEST 2024","effectiveDate": "Tue Feb 24 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,512 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 13 00:00:00 CEST 2024","effectiveDate": "Wed Feb 25 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,513 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 14 00:00:00 CEST 2024","effectiveDate": "Thu Feb 26 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,513 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 15 00:00:00 CEST 2024","effectiveDate": "Fri Feb 27 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,513 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 16 00:00:00 CEST 2024","effectiveDate": "Sat Feb 28 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,525 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 17 00:00:00 CEST 2024","effectiveDate": "Sun Mar 01 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,525 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 18 00:00:00 CEST 2024","effectiveDate": "Mon Mar 02 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,525 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 19 00:00:00 CEST 2024","effectiveDate": "Tue Mar 03 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,526 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 20 00:00:00 CEST 2024","effectiveDate": "Wed Mar 04 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,526 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 21 00:00:00 CEST 2024","effectiveDate": "Thu Mar 05 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,526 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 22 00:00:00 CEST 2024","effectiveDate": "Fri Mar 06 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,526 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 23 00:00:00 CEST 2024","effectiveDate": "Sat Mar 07 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,526 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 24 00:00:00 CEST 2024","effectiveDate": "Sun Mar 08 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,526 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 25 00:00:00 CEST 2024","effectiveDate": "Mon Mar 09 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,526 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 26 00:00:00 CEST 2024","effectiveDate": "Wed Dec 31 00:00:00 CET 2025"
	  }]
})
2023-04-15 17:23:10,540 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 27 00:00:00 CEST 2024","effectiveDate": "Thu Jan 01 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,541 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 28 00:00:00 CEST 2024","effectiveDate": "Fri Jan 02 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,541 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 29 00:00:00 CEST 2024","effectiveDate": "Sat Jan 03 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,541 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 30 00:00:00 CEST 2024","effectiveDate": "Sun Jan 04 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,542 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 01 00:00:00 CEST 2024","effectiveDate": "Mon Jan 05 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,542 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 02 00:00:00 CEST 2024","effectiveDate": "Tue Jan 06 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,542 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 03 00:00:00 CEST 2024","effectiveDate": "Wed Jan 07 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,542 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 04 00:00:00 CEST 2024","effectiveDate": "Thu Jan 08 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,543 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 05 00:00:00 CEST 2024","effectiveDate": "Fri Jan 09 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,543 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 06 00:00:00 CEST 2024","effectiveDate": "Sat Jan 10 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,556 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 07 00:00:00 CEST 2024","effectiveDate": "Sun Jan 11 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,557 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 08 00:00:00 CEST 2024","effectiveDate": "Mon Jan 12 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,557 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 09 00:00:00 CEST 2024","effectiveDate": "Tue Jan 13 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,557 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 10 00:00:00 CEST 2024","effectiveDate": "Wed Jan 14 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,557 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 11 00:00:00 CEST 2024","effectiveDate": "Thu Jan 15 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,558 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 12 00:00:00 CEST 2024","effectiveDate": "Fri Jan 16 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,558 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 13 00:00:00 CEST 2024","effectiveDate": "Sat Jan 17 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,558 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 14 00:00:00 CEST 2024","effectiveDate": "Sun Jan 18 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,558 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 15 00:00:00 CEST 2024","effectiveDate": "Mon Jan 19 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,559 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 16 00:00:00 CEST 2024","effectiveDate": "Tue Jan 20 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,574 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 17 00:00:00 CEST 2024","effectiveDate": "Wed Jan 21 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,574 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 18 00:00:00 CEST 2024","effectiveDate": "Thu Jan 22 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,574 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 19 00:00:00 CEST 2024","effectiveDate": "Fri Jan 23 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,574 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 20 00:00:00 CEST 2024","effectiveDate": "Sat Jan 24 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,574 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 21 00:00:00 CEST 2024","effectiveDate": "Sun Jan 25 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,575 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 22 00:00:00 CEST 2024","effectiveDate": "Mon Jan 26 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,575 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 23 00:00:00 CEST 2024","effectiveDate": "Tue Jan 27 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,575 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 24 00:00:00 CEST 2024","effectiveDate": "Wed Jan 28 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,575 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 25 00:00:00 CEST 2024","effectiveDate": "Thu Jan 29 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,575 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 26 00:00:00 CEST 2024","effectiveDate": "Fri Jan 30 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,600 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 27 00:00:00 CEST 2024","effectiveDate": "Sat Jan 31 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,600 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 28 00:00:00 CEST 2024","effectiveDate": "Sun Feb 01 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,600 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 29 00:00:00 CEST 2024","effectiveDate": "Mon Feb 02 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,600 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 30 00:00:00 CEST 2024","effectiveDate": "Tue Feb 03 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,601 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 31 00:00:00 CEST 2024","effectiveDate": "Wed Feb 04 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,601 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 01 00:00:00 CEST 2024","effectiveDate": "Thu Feb 05 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,601 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 02 00:00:00 CEST 2024","effectiveDate": "Fri Feb 06 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,601 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 03 00:00:00 CEST 2024","effectiveDate": "Sat Feb 07 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,601 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 04 00:00:00 CEST 2024","effectiveDate": "Sun Feb 08 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,601 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 05 00:00:00 CEST 2024","effectiveDate": "Mon Feb 09 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,614 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 06 00:00:00 CEST 2024","effectiveDate": "Tue Feb 10 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,615 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 07 00:00:00 CEST 2024","effectiveDate": "Wed Feb 11 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,615 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 08 00:00:00 CEST 2024","effectiveDate": "Thu Feb 12 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,615 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 09 00:00:00 CEST 2024","effectiveDate": "Fri Feb 13 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,615 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 10 00:00:00 CEST 2024","effectiveDate": "Sat Feb 14 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,615 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 11 00:00:00 CEST 2024","effectiveDate": "Sun Feb 15 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,616 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 12 00:00:00 CEST 2024","effectiveDate": "Mon Feb 16 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,616 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 13 00:00:00 CEST 2024","effectiveDate": "Tue Feb 17 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,616 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 14 00:00:00 CEST 2024","effectiveDate": "Wed Feb 18 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,616 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 15 00:00:00 CEST 2024","effectiveDate": "Thu Feb 19 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,629 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 16 00:00:00 CEST 2024","effectiveDate": "Fri Feb 20 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,629 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 17 00:00:00 CEST 2024","effectiveDate": "Sat Feb 21 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,630 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 18 00:00:00 CEST 2024","effectiveDate": "Sun Feb 22 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,630 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 19 00:00:00 CEST 2024","effectiveDate": "Mon Feb 23 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,630 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 20 00:00:00 CEST 2024","effectiveDate": "Tue Feb 24 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,630 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 21 00:00:00 CEST 2024","effectiveDate": "Wed Feb 25 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,630 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 22 00:00:00 CEST 2024","effectiveDate": "Thu Feb 26 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,630 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 23 00:00:00 CEST 2024","effectiveDate": "Fri Feb 27 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,631 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 24 00:00:00 CEST 2024","effectiveDate": "Sat Feb 28 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,631 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 25 00:00:00 CEST 2024","effectiveDate": "Sun Mar 01 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,640 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 26 00:00:00 CEST 2024","effectiveDate": "Mon Mar 02 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,640 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 27 00:00:00 CEST 2024","effectiveDate": "Tue Mar 03 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,640 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 28 00:00:00 CEST 2024","effectiveDate": "Wed Mar 04 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,640 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 29 00:00:00 CEST 2024","effectiveDate": "Thu Mar 05 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,641 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 30 00:00:00 CEST 2024","effectiveDate": "Fri Mar 06 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,641 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 31 00:00:00 CEST 2024","effectiveDate": "Sat Mar 07 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,641 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 01 00:00:00 CEST 2024","effectiveDate": "Sun Mar 08 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,641 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 02 00:00:00 CEST 2024","effectiveDate": "Mon Mar 09 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,641 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 03 00:00:00 CEST 2024","effectiveDate": "Tue Mar 10 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,641 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 04 00:00:00 CEST 2024","effectiveDate": "Wed Mar 11 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,653 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 05 00:00:00 CEST 2024","effectiveDate": "Thu Mar 12 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,653 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 06 00:00:00 CEST 2024","effectiveDate": "Fri Mar 13 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,653 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 07 00:00:00 CEST 2024","effectiveDate": "Sat Mar 14 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,653 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 30 00:00:00 CEST 2024","effectiveDate": "Sun Mar 15 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,653 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 01 00:00:00 CEST 2024","effectiveDate": "Mon Mar 16 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,654 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 02 00:00:00 CEST 2024","effectiveDate": "Tue Mar 17 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,654 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 03 00:00:00 CEST 2024","effectiveDate": "Wed Mar 18 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,654 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 04 00:00:00 CEST 2024","effectiveDate": "Thu Mar 19 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,654 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 05 00:00:00 CEST 2024","effectiveDate": "Fri Mar 20 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,654 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 06 00:00:00 CEST 2024","effectiveDate": "Sat Mar 21 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,664 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 07 00:00:00 CEST 2024","effectiveDate": "Sun Mar 22 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,664 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 08 00:00:00 CEST 2024","effectiveDate": "Mon Mar 23 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,664 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 09 00:00:00 CEST 2024","effectiveDate": "Tue Mar 24 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,666 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 10 00:00:00 CEST 2024","effectiveDate": "Wed Mar 25 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,666 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 11 00:00:00 CEST 2024","effectiveDate": "Thu Mar 26 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,666 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 12 00:00:00 CEST 2024","effectiveDate": "Fri Mar 27 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,666 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 13 00:00:00 CEST 2024","effectiveDate": "Sat Mar 28 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,666 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 14 00:00:00 CEST 2024","effectiveDate": "Sun Mar 29 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,666 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 15 00:00:00 CEST 2024","effectiveDate": "Mon Mar 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,666 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 16 00:00:00 CEST 2024","effectiveDate": "Tue Mar 31 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,676 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 17 00:00:00 CEST 2024","effectiveDate": "Wed Apr 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,678 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 18 00:00:00 CEST 2024","effectiveDate": "Thu Apr 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,678 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 19 00:00:00 CEST 2024","effectiveDate": "Fri Apr 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,678 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 20 00:00:00 CEST 2024","effectiveDate": "Sat Apr 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,678 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 21 00:00:00 CEST 2024","effectiveDate": "Sun Apr 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,679 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 22 00:00:00 CEST 2024","effectiveDate": "Mon Apr 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,679 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 23 00:00:00 CEST 2024","effectiveDate": "Tue Apr 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,679 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 24 00:00:00 CEST 2024","effectiveDate": "Wed Apr 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,679 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 25 00:00:00 CEST 2024","effectiveDate": "Thu Apr 09 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,679 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 26 00:00:00 CEST 2024","effectiveDate": "Sat Jan 31 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,690 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 27 00:00:00 CEST 2024","effectiveDate": "Sun Feb 01 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,690 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 28 00:00:00 CEST 2024","effectiveDate": "Mon Feb 02 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,690 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 29 00:00:00 CEST 2024","effectiveDate": "Tue Feb 03 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,690 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 30 00:00:00 CEST 2024","effectiveDate": "Wed Feb 04 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,691 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 31 00:00:00 CEST 2024","effectiveDate": "Thu Feb 05 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,691 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 01 00:00:00 CEST 2024","effectiveDate": "Fri Feb 06 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,691 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 02 00:00:00 CEST 2024","effectiveDate": "Sat Feb 07 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,691 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 03 00:00:00 CEST 2024","effectiveDate": "Sun Feb 08 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,691 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 04 00:00:00 CEST 2024","effectiveDate": "Mon Feb 09 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,691 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 05 00:00:00 CEST 2024","effectiveDate": "Tue Feb 10 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,701 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 06 00:00:00 CEST 2024","effectiveDate": "Wed Feb 11 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,701 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 07 00:00:00 CEST 2024","effectiveDate": "Thu Feb 12 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,702 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 08 00:00:00 CEST 2024","effectiveDate": "Fri Feb 13 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,702 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 09 00:00:00 CEST 2024","effectiveDate": "Sat Feb 14 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,702 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 10 00:00:00 CEST 2024","effectiveDate": "Sun Feb 15 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,702 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 11 00:00:00 CEST 2024","effectiveDate": "Mon Feb 16 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,702 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 12 00:00:00 CEST 2024","effectiveDate": "Tue Feb 17 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,702 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 13 00:00:00 CEST 2024","effectiveDate": "Wed Feb 18 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,702 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 14 00:00:00 CEST 2024","effectiveDate": "Thu Feb 19 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,702 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 15 00:00:00 CEST 2024","effectiveDate": "Fri Feb 20 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,715 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 16 00:00:00 CEST 2024","effectiveDate": "Sat Feb 21 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,716 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 17 00:00:00 CEST 2024","effectiveDate": "Sun Feb 22 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,716 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 18 00:00:00 CEST 2024","effectiveDate": "Mon Feb 23 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,716 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 19 00:00:00 CEST 2024","effectiveDate": "Tue Feb 24 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,716 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 20 00:00:00 CEST 2024","effectiveDate": "Wed Feb 25 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,716 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 21 00:00:00 CEST 2024","effectiveDate": "Thu Feb 26 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,716 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 22 00:00:00 CEST 2024","effectiveDate": "Fri Feb 27 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,716 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 23 00:00:00 CEST 2024","effectiveDate": "Sat Feb 28 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,716 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 24 00:00:00 CEST 2024","effectiveDate": "Sun Mar 01 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,716 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 25 00:00:00 CEST 2024","effectiveDate": "Mon Mar 02 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,726 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 26 00:00:00 CEST 2024","effectiveDate": "Tue Mar 03 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,726 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 27 00:00:00 CEST 2024","effectiveDate": "Wed Mar 04 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,726 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 28 00:00:00 CEST 2024","effectiveDate": "Thu Mar 05 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,726 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 29 00:00:00 CEST 2024","effectiveDate": "Fri Mar 06 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,726 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 30 00:00:00 CEST 2024","effectiveDate": "Sat Mar 07 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,727 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 31 00:00:00 CEST 2024","effectiveDate": "Sun Mar 08 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,727 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 01 00:00:00 CEST 2024","effectiveDate": "Mon Mar 09 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,727 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 02 00:00:00 CEST 2024","effectiveDate": "Tue Mar 10 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,727 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 03 00:00:00 CEST 2024","effectiveDate": "Wed Mar 11 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,727 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 04 00:00:00 CEST 2024","effectiveDate": "Thu Mar 12 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,737 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 05 00:00:00 CEST 2024","effectiveDate": "Fri Mar 13 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,738 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 06 00:00:00 CEST 2024","effectiveDate": "Sat Mar 14 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,738 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 07 00:00:00 CEST 2024","effectiveDate": "Sun Mar 15 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,738 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 08 00:00:00 CEST 2024","effectiveDate": "Mon Mar 16 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,738 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 09 00:00:00 CEST 2024","effectiveDate": "Tue Mar 17 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,738 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 10 00:00:00 CEST 2024","effectiveDate": "Wed Mar 18 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,738 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 11 00:00:00 CEST 2024","effectiveDate": "Thu Mar 19 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,739 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 12 00:00:00 CEST 2024","effectiveDate": "Fri Mar 20 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,739 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 13 00:00:00 CEST 2024","effectiveDate": "Sat Mar 21 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,739 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 14 00:00:00 CEST 2024","effectiveDate": "Sun Mar 22 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,751 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 15 00:00:00 CEST 2024","effectiveDate": "Mon Mar 23 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,752 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 16 00:00:00 CEST 2024","effectiveDate": "Tue Mar 24 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,752 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 17 00:00:00 CEST 2024","effectiveDate": "Wed Mar 25 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,752 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 18 00:00:00 CEST 2024","effectiveDate": "Thu Mar 26 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,753 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 19 00:00:00 CEST 2024","effectiveDate": "Fri Mar 27 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,753 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 20 00:00:00 CEST 2024","effectiveDate": "Sat Mar 28 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,753 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 21 00:00:00 CEST 2024","effectiveDate": "Sun Mar 29 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,753 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 22 00:00:00 CEST 2024","effectiveDate": "Mon Mar 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,753 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 23 00:00:00 CEST 2024","effectiveDate": "Tue Mar 31 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,753 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 24 00:00:00 CEST 2024","effectiveDate": "Wed Apr 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,765 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 25 00:00:00 CEST 2024","effectiveDate": "Thu Apr 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,766 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 26 00:00:00 CEST 2024","effectiveDate": "Fri Apr 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,766 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 27 00:00:00 CEST 2024","effectiveDate": "Sat Apr 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,766 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 28 00:00:00 CEST 2024","effectiveDate": "Sun Apr 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,766 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 29 00:00:00 CEST 2024","effectiveDate": "Mon Apr 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,766 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 30 00:00:00 CEST 2024","effectiveDate": "Tue Apr 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,766 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 01 00:00:00 CEST 2024","effectiveDate": "Wed Apr 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,767 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 02 00:00:00 CEST 2024","effectiveDate": "Thu Apr 09 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,767 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 03 00:00:00 CEST 2024","effectiveDate": "Fri Apr 10 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,767 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 04 00:00:00 CEST 2024","effectiveDate": "Sat Apr 11 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,777 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 05 00:00:00 CEST 2024","effectiveDate": "Sun Apr 12 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,778 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 06 00:00:00 CEST 2024","effectiveDate": "Mon Apr 13 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,778 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 07 00:00:00 CEST 2024","effectiveDate": "Tue Apr 14 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,778 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 31 00:00:00 CEST 2024","effectiveDate": "Wed Apr 15 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,778 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 01 00:00:00 CEST 2024","effectiveDate": "Thu Apr 16 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,778 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 02 00:00:00 CEST 2024","effectiveDate": "Fri Apr 17 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,778 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 03 00:00:00 CEST 2024","effectiveDate": "Sat Apr 18 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,779 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 04 00:00:00 CEST 2024","effectiveDate": "Sun Apr 19 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,779 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 05 00:00:00 CEST 2024","effectiveDate": "Mon Apr 20 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,779 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 06 00:00:00 CEST 2024","effectiveDate": "Tue Apr 21 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,797 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 07 00:00:00 CEST 2024","effectiveDate": "Wed Apr 22 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,798 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 08 00:00:00 CEST 2024","effectiveDate": "Thu Apr 23 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,798 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 09 00:00:00 CEST 2024","effectiveDate": "Fri Apr 24 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,798 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 10 00:00:00 CEST 2024","effectiveDate": "Sat Apr 25 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,798 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 11 00:00:00 CEST 2024","effectiveDate": "Sun Apr 26 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,798 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 12 00:00:00 CEST 2024","effectiveDate": "Mon Apr 27 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,798 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 13 00:00:00 CEST 2024","effectiveDate": "Tue Apr 28 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,798 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 14 00:00:00 CEST 2024","effectiveDate": "Wed Apr 29 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,798 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 15 00:00:00 CEST 2024","effectiveDate": "Thu Apr 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,798 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 16 00:00:00 CEST 2024","effectiveDate": "Fri May 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,812 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 17 00:00:00 CEST 2024","effectiveDate": "Sat May 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,812 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 18 00:00:00 CEST 2024","effectiveDate": "Sun May 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,813 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 19 00:00:00 CEST 2024","effectiveDate": "Mon May 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,813 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 20 00:00:00 CEST 2024","effectiveDate": "Tue May 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,813 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 21 00:00:00 CEST 2024","effectiveDate": "Wed May 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,813 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 22 00:00:00 CEST 2024","effectiveDate": "Thu May 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,813 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 23 00:00:00 CEST 2024","effectiveDate": "Fri May 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,813 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 24 00:00:00 CEST 2024","effectiveDate": "Sat May 09 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,814 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 25 00:00:00 CEST 2024","effectiveDate": "Sun May 10 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,814 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 26 00:00:00 CEST 2024","effectiveDate": "Sat Feb 28 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,827 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 27 00:00:00 CEST 2024","effectiveDate": "Sun Mar 01 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,828 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 28 00:00:00 CEST 2024","effectiveDate": "Mon Mar 02 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,828 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 29 00:00:00 CEST 2024","effectiveDate": "Tue Mar 03 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,828 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 30 00:00:00 CEST 2024","effectiveDate": "Wed Mar 04 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,828 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 31 00:00:00 CEST 2024","effectiveDate": "Thu Mar 05 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,828 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 01 00:00:00 CEST 2024","effectiveDate": "Fri Mar 06 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,828 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 02 00:00:00 CEST 2024","effectiveDate": "Sat Mar 07 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,829 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 03 00:00:00 CEST 2024","effectiveDate": "Sun Mar 08 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,829 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 04 00:00:00 CEST 2024","effectiveDate": "Mon Mar 09 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,829 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 05 00:00:00 CEST 2024","effectiveDate": "Tue Mar 10 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,841 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 06 00:00:00 CEST 2024","effectiveDate": "Wed Mar 11 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,842 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 07 00:00:00 CEST 2024","effectiveDate": "Thu Mar 12 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,842 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 08 00:00:00 CEST 2024","effectiveDate": "Fri Mar 13 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,843 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 09 00:00:00 CEST 2024","effectiveDate": "Sat Mar 14 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,843 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 10 00:00:00 CEST 2024","effectiveDate": "Sun Mar 15 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,843 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 11 00:00:00 CEST 2024","effectiveDate": "Mon Mar 16 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,843 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 12 00:00:00 CEST 2024","effectiveDate": "Tue Mar 17 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,843 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 13 00:00:00 CEST 2024","effectiveDate": "Wed Mar 18 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,843 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 14 00:00:00 CEST 2024","effectiveDate": "Thu Mar 19 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,844 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 15 00:00:00 CEST 2024","effectiveDate": "Fri Mar 20 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,857 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 16 00:00:00 CEST 2024","effectiveDate": "Sat Mar 21 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,857 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 17 00:00:00 CEST 2024","effectiveDate": "Sun Mar 22 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,858 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 18 00:00:00 CEST 2024","effectiveDate": "Mon Mar 23 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,858 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 19 00:00:00 CEST 2024","effectiveDate": "Tue Mar 24 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,858 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 20 00:00:00 CEST 2024","effectiveDate": "Wed Mar 25 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,858 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 21 00:00:00 CEST 2024","effectiveDate": "Thu Mar 26 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,858 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 22 00:00:00 CEST 2024","effectiveDate": "Fri Mar 27 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,858 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 23 00:00:00 CEST 2024","effectiveDate": "Sat Mar 28 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,859 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 24 00:00:00 CEST 2024","effectiveDate": "Sun Mar 29 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:10,859 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 25 00:00:00 CEST 2024","effectiveDate": "Mon Mar 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,872 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 26 00:00:00 CEST 2024","effectiveDate": "Tue Mar 31 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,872 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 27 00:00:00 CEST 2024","effectiveDate": "Wed Apr 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,874 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 28 00:00:00 CEST 2024","effectiveDate": "Thu Apr 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,874 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 29 00:00:00 CEST 2024","effectiveDate": "Fri Apr 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,874 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 30 00:00:00 CEST 2024","effectiveDate": "Sat Apr 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,874 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 01 00:00:00 CEST 2024","effectiveDate": "Sun Apr 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,875 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 02 00:00:00 CEST 2024","effectiveDate": "Mon Apr 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,875 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 03 00:00:00 CEST 2024","effectiveDate": "Tue Apr 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,875 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 04 00:00:00 CEST 2024","effectiveDate": "Wed Apr 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,875 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 05 00:00:00 CEST 2024","effectiveDate": "Thu Apr 09 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,888 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 06 00:00:00 CEST 2024","effectiveDate": "Fri Apr 10 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,889 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 07 00:00:00 CEST 2024","effectiveDate": "Sat Apr 11 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,889 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 08 00:00:00 CEST 2024","effectiveDate": "Sun Apr 12 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,889 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 09 00:00:00 CEST 2024","effectiveDate": "Mon Apr 13 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,890 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 10 00:00:00 CEST 2024","effectiveDate": "Tue Apr 14 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,890 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 11 00:00:00 CEST 2024","effectiveDate": "Wed Apr 15 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,890 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 12 00:00:00 CEST 2024","effectiveDate": "Thu Apr 16 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,890 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 13 00:00:00 CEST 2024","effectiveDate": "Fri Apr 17 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,890 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 14 00:00:00 CEST 2024","effectiveDate": "Sat Apr 18 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,890 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 15 00:00:00 CEST 2024","effectiveDate": "Sun Apr 19 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,904 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 16 00:00:00 CEST 2024","effectiveDate": "Mon Apr 20 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,904 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 17 00:00:00 CEST 2024","effectiveDate": "Tue Apr 21 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,905 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 18 00:00:00 CEST 2024","effectiveDate": "Wed Apr 22 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,905 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 19 00:00:00 CEST 2024","effectiveDate": "Thu Apr 23 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,905 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 20 00:00:00 CEST 2024","effectiveDate": "Fri Apr 24 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,905 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 21 00:00:00 CEST 2024","effectiveDate": "Sat Apr 25 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,906 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 22 00:00:00 CEST 2024","effectiveDate": "Sun Apr 26 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,906 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 23 00:00:00 CEST 2024","effectiveDate": "Mon Apr 27 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,906 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 24 00:00:00 CEST 2024","effectiveDate": "Tue Apr 28 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,906 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 25 00:00:00 CEST 2024","effectiveDate": "Wed Apr 29 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,918 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 26 00:00:00 CEST 2024","effectiveDate": "Thu Apr 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,919 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 27 00:00:00 CEST 2024","effectiveDate": "Fri May 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,919 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 28 00:00:00 CET 2024","effectiveDate": "Sat May 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,919 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 29 00:00:00 CET 2024","effectiveDate": "Sun May 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,919 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 30 00:00:00 CET 2024","effectiveDate": "Mon May 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,919 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 31 00:00:00 CET 2024","effectiveDate": "Tue May 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,919 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 01 00:00:00 CET 2024","effectiveDate": "Wed May 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,919 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 02 00:00:00 CET 2024","effectiveDate": "Thu May 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,919 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 03 00:00:00 CET 2024","effectiveDate": "Fri May 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,919 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 04 00:00:00 CET 2024","effectiveDate": "Sat May 09 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,931 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 05 00:00:00 CET 2024","effectiveDate": "Sun May 10 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,931 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 06 00:00:00 CET 2024","effectiveDate": "Mon May 11 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,931 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 07 00:00:00 CET 2024","effectiveDate": "Tue May 12 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,933 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 31 00:00:00 CEST 2024","effectiveDate": "Wed May 13 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,933 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 01 00:00:00 CEST 2024","effectiveDate": "Thu May 14 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,933 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 02 00:00:00 CEST 2024","effectiveDate": "Fri May 15 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,933 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 03 00:00:00 CEST 2024","effectiveDate": "Sat May 16 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,933 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 04 00:00:00 CEST 2024","effectiveDate": "Sun May 17 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,933 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 05 00:00:00 CEST 2024","effectiveDate": "Mon May 18 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,934 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 06 00:00:00 CEST 2024","effectiveDate": "Tue May 19 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,947 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 07 00:00:00 CEST 2024","effectiveDate": "Wed May 20 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,949 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 08 00:00:00 CEST 2024","effectiveDate": "Thu May 21 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,949 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 09 00:00:00 CEST 2024","effectiveDate": "Fri May 22 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,949 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 10 00:00:00 CEST 2024","effectiveDate": "Sat May 23 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,949 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 11 00:00:00 CEST 2024","effectiveDate": "Sun May 24 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,950 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 12 00:00:00 CEST 2024","effectiveDate": "Mon May 25 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,950 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 13 00:00:00 CEST 2024","effectiveDate": "Tue May 26 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,950 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 14 00:00:00 CEST 2024","effectiveDate": "Wed May 27 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,950 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 15 00:00:00 CEST 2024","effectiveDate": "Thu May 28 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,950 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 16 00:00:00 CEST 2024","effectiveDate": "Fri May 29 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,963 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 17 00:00:00 CEST 2024","effectiveDate": "Sat May 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,964 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 18 00:00:00 CEST 2024","effectiveDate": "Sun May 31 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,964 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 19 00:00:00 CEST 2024","effectiveDate": "Mon Jun 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,964 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 20 00:00:00 CEST 2024","effectiveDate": "Tue Jun 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,964 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 21 00:00:00 CEST 2024","effectiveDate": "Wed Jun 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,965 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 22 00:00:00 CEST 2024","effectiveDate": "Thu Jun 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,965 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 23 00:00:00 CEST 2024","effectiveDate": "Fri Jun 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,965 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 24 00:00:00 CEST 2024","effectiveDate": "Sat Jun 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,965 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 25 00:00:00 CEST 2024","effectiveDate": "Sun Jun 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,965 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 26 00:00:00 CEST 2024","effectiveDate": "Tue Mar 31 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,978 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 27 00:00:00 CEST 2024","effectiveDate": "Wed Apr 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,978 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 28 00:00:00 CEST 2024","effectiveDate": "Thu Apr 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,979 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 29 00:00:00 CEST 2024","effectiveDate": "Fri Apr 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,979 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 30 00:00:00 CEST 2024","effectiveDate": "Sat Apr 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,979 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 01 00:00:00 CEST 2024","effectiveDate": "Sun Apr 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,979 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 02 00:00:00 CEST 2024","effectiveDate": "Mon Apr 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,979 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 03 00:00:00 CEST 2024","effectiveDate": "Tue Apr 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,979 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 04 00:00:00 CEST 2024","effectiveDate": "Wed Apr 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,979 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 05 00:00:00 CEST 2024","effectiveDate": "Thu Apr 09 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,979 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 06 00:00:00 CEST 2024","effectiveDate": "Fri Apr 10 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,992 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 07 00:00:00 CEST 2024","effectiveDate": "Sat Apr 11 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,992 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 08 00:00:00 CEST 2024","effectiveDate": "Sun Apr 12 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,992 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 09 00:00:00 CEST 2024","effectiveDate": "Mon Apr 13 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,992 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 10 00:00:00 CEST 2024","effectiveDate": "Tue Apr 14 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,993 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 11 00:00:00 CEST 2024","effectiveDate": "Wed Apr 15 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,993 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 12 00:00:00 CEST 2024","effectiveDate": "Thu Apr 16 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,993 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 13 00:00:00 CEST 2024","effectiveDate": "Fri Apr 17 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,993 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 14 00:00:00 CEST 2024","effectiveDate": "Sat Apr 18 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,993 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 15 00:00:00 CEST 2024","effectiveDate": "Sun Apr 19 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:10,993 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 16 00:00:00 CEST 2024","effectiveDate": "Mon Apr 20 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,004 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 17 00:00:00 CEST 2024","effectiveDate": "Tue Apr 21 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,005 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 18 00:00:00 CEST 2024","effectiveDate": "Wed Apr 22 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,005 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 19 00:00:00 CEST 2024","effectiveDate": "Thu Apr 23 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,005 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 20 00:00:00 CEST 2024","effectiveDate": "Fri Apr 24 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,005 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 21 00:00:00 CEST 2024","effectiveDate": "Sat Apr 25 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,005 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 22 00:00:00 CEST 2024","effectiveDate": "Sun Apr 26 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,005 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 23 00:00:00 CEST 2024","effectiveDate": "Mon Apr 27 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,007 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 24 00:00:00 CEST 2024","effectiveDate": "Tue Apr 28 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,007 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 25 00:00:00 CEST 2024","effectiveDate": "Wed Apr 29 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,007 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 26 00:00:00 CEST 2024","effectiveDate": "Thu Apr 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,017 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 27 00:00:00 CEST 2024","effectiveDate": "Fri May 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,018 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 28 00:00:00 CET 2024","effectiveDate": "Sat May 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,018 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 29 00:00:00 CET 2024","effectiveDate": "Sun May 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,018 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 30 00:00:00 CET 2024","effectiveDate": "Mon May 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,018 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 31 00:00:00 CET 2024","effectiveDate": "Tue May 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,018 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 01 00:00:00 CET 2024","effectiveDate": "Wed May 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,018 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 02 00:00:00 CET 2024","effectiveDate": "Thu May 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,020 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 03 00:00:00 CET 2024","effectiveDate": "Fri May 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,020 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 04 00:00:00 CET 2024","effectiveDate": "Sat May 09 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,020 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 05 00:00:00 CET 2024","effectiveDate": "Sun May 10 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,030 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 06 00:00:00 CET 2024","effectiveDate": "Mon May 11 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,030 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 07 00:00:00 CET 2024","effectiveDate": "Tue May 12 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,030 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 08 00:00:00 CET 2024","effectiveDate": "Wed May 13 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,030 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 09 00:00:00 CET 2024","effectiveDate": "Thu May 14 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,030 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 10 00:00:00 CET 2024","effectiveDate": "Fri May 15 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,030 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 11 00:00:00 CET 2024","effectiveDate": "Sat May 16 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,031 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 12 00:00:00 CET 2024","effectiveDate": "Sun May 17 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,031 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 13 00:00:00 CET 2024","effectiveDate": "Mon May 18 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,031 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 14 00:00:00 CET 2024","effectiveDate": "Tue May 19 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,031 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 15 00:00:00 CET 2024","effectiveDate": "Wed May 20 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,043 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 16 00:00:00 CET 2024","effectiveDate": "Thu May 21 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,043 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 17 00:00:00 CET 2024","effectiveDate": "Fri May 22 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,043 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 18 00:00:00 CET 2024","effectiveDate": "Sat May 23 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,043 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 19 00:00:00 CET 2024","effectiveDate": "Sun May 24 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,043 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 20 00:00:00 CET 2024","effectiveDate": "Mon May 25 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,045 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 21 00:00:00 CET 2024","effectiveDate": "Tue May 26 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,045 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 22 00:00:00 CET 2024","effectiveDate": "Wed May 27 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,045 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 23 00:00:00 CET 2024","effectiveDate": "Thu May 28 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,045 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 24 00:00:00 CET 2024","effectiveDate": "Fri May 29 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,045 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 25 00:00:00 CET 2024","effectiveDate": "Sat May 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,056 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 26 00:00:00 CET 2024","effectiveDate": "Sun May 31 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,056 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 27 00:00:00 CET 2024","effectiveDate": "Mon Jun 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,056 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 28 00:00:00 CET 2024","effectiveDate": "Tue Jun 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,057 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 29 00:00:00 CET 2024","effectiveDate": "Wed Jun 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,057 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 30 00:00:00 CET 2024","effectiveDate": "Thu Jun 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,057 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 01 00:00:00 CET 2024","effectiveDate": "Fri Jun 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,057 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 02 00:00:00 CET 2024","effectiveDate": "Sat Jun 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,057 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 03 00:00:00 CET 2024","effectiveDate": "Sun Jun 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,057 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 04 00:00:00 CET 2024","effectiveDate": "Mon Jun 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,057 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 05 00:00:00 CET 2024","effectiveDate": "Tue Jun 09 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,070 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 06 00:00:00 CET 2024","effectiveDate": "Wed Jun 10 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,071 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 07 00:00:00 CET 2024","effectiveDate": "Thu Jun 11 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,071 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 08 00:00:00 CET 2024","effectiveDate": "Fri Jun 12 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,071 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 30 00:00:00 CEST 2024","effectiveDate": "Sat Jun 13 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,071 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 01 00:00:00 CEST 2024","effectiveDate": "Sun Jun 14 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,071 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 02 00:00:00 CEST 2024","effectiveDate": "Mon Jun 15 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,072 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 03 00:00:00 CEST 2024","effectiveDate": "Tue Jun 16 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,072 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 04 00:00:00 CEST 2024","effectiveDate": "Wed Jun 17 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,072 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 05 00:00:00 CEST 2024","effectiveDate": "Thu Jun 18 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,072 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 06 00:00:00 CEST 2024","effectiveDate": "Fri Jun 19 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,084 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 07 00:00:00 CEST 2024","effectiveDate": "Sat Jun 20 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,084 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 08 00:00:00 CEST 2024","effectiveDate": "Sun Jun 21 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,084 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 09 00:00:00 CEST 2024","effectiveDate": "Mon Jun 22 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,084 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 10 00:00:00 CEST 2024","effectiveDate": "Tue Jun 23 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,084 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 11 00:00:00 CEST 2024","effectiveDate": "Wed Jun 24 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,085 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 12 00:00:00 CEST 2024","effectiveDate": "Thu Jun 25 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,085 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 13 00:00:00 CEST 2024","effectiveDate": "Fri Jun 26 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,085 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 14 00:00:00 CEST 2024","effectiveDate": "Sat Jun 27 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,085 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 15 00:00:00 CEST 2024","effectiveDate": "Sun Jun 28 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,085 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 16 00:00:00 CEST 2024","effectiveDate": "Mon Jun 29 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,102 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 17 00:00:00 CEST 2024","effectiveDate": "Tue Jun 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,102 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 18 00:00:00 CEST 2024","effectiveDate": "Wed Jul 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,102 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 19 00:00:00 CEST 2024","effectiveDate": "Thu Jul 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,103 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 20 00:00:00 CEST 2024","effectiveDate": "Fri Jul 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,103 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 21 00:00:00 CEST 2024","effectiveDate": "Sat Jul 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,103 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 22 00:00:00 CEST 2024","effectiveDate": "Sun Jul 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,103 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 23 00:00:00 CEST 2024","effectiveDate": "Mon Jul 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,103 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 24 00:00:00 CEST 2024","effectiveDate": "Tue Jul 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,103 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 25 00:00:00 CEST 2024","effectiveDate": "Wed Jul 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,104 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 26 00:00:00 CEST 2024","effectiveDate": "Thu Apr 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,117 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 27 00:00:00 CEST 2024","effectiveDate": "Fri May 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,117 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 28 00:00:00 CET 2024","effectiveDate": "Sat May 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,118 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 29 00:00:00 CET 2024","effectiveDate": "Sun May 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,118 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 30 00:00:00 CET 2024","effectiveDate": "Mon May 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,118 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 31 00:00:00 CET 2024","effectiveDate": "Tue May 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,118 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 01 00:00:00 CET 2024","effectiveDate": "Wed May 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,118 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 02 00:00:00 CET 2024","effectiveDate": "Thu May 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,118 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 03 00:00:00 CET 2024","effectiveDate": "Fri May 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,118 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 04 00:00:00 CET 2024","effectiveDate": "Sat May 09 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,118 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 05 00:00:00 CET 2024","effectiveDate": "Sun May 10 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,127 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 06 00:00:00 CET 2024","effectiveDate": "Mon May 11 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,127 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 07 00:00:00 CET 2024","effectiveDate": "Tue May 12 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,127 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 08 00:00:00 CET 2024","effectiveDate": "Wed May 13 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,127 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 09 00:00:00 CET 2024","effectiveDate": "Thu May 14 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,127 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 10 00:00:00 CET 2024","effectiveDate": "Fri May 15 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,128 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 11 00:00:00 CET 2024","effectiveDate": "Sat May 16 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,128 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 12 00:00:00 CET 2024","effectiveDate": "Sun May 17 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,128 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 13 00:00:00 CET 2024","effectiveDate": "Mon May 18 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,128 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 14 00:00:00 CET 2024","effectiveDate": "Tue May 19 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,128 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 15 00:00:00 CET 2024","effectiveDate": "Wed May 20 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,136 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 16 00:00:00 CET 2024","effectiveDate": "Thu May 21 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,136 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 17 00:00:00 CET 2024","effectiveDate": "Fri May 22 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,136 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 18 00:00:00 CET 2024","effectiveDate": "Sat May 23 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,137 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 19 00:00:00 CET 2024","effectiveDate": "Sun May 24 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,137 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 20 00:00:00 CET 2024","effectiveDate": "Mon May 25 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,137 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 21 00:00:00 CET 2024","effectiveDate": "Tue May 26 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,138 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 22 00:00:00 CET 2024","effectiveDate": "Wed May 27 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,138 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 23 00:00:00 CET 2024","effectiveDate": "Thu May 28 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,138 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 24 00:00:00 CET 2024","effectiveDate": "Fri May 29 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,138 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 25 00:00:00 CET 2024","effectiveDate": "Sat May 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,149 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 26 00:00:00 CET 2024","effectiveDate": "Sun May 31 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,150 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 27 00:00:00 CET 2024","effectiveDate": "Mon Jun 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,150 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 28 00:00:00 CET 2024","effectiveDate": "Tue Jun 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,150 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 29 00:00:00 CET 2024","effectiveDate": "Wed Jun 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,150 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 30 00:00:00 CET 2024","effectiveDate": "Thu Jun 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,150 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 01 00:00:00 CET 2024","effectiveDate": "Fri Jun 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,150 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 02 00:00:00 CET 2024","effectiveDate": "Sat Jun 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,150 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 03 00:00:00 CET 2024","effectiveDate": "Sun Jun 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,150 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 04 00:00:00 CET 2024","effectiveDate": "Mon Jun 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,150 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 05 00:00:00 CET 2024","effectiveDate": "Tue Jun 09 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,158 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 06 00:00:00 CET 2024","effectiveDate": "Wed Jun 10 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,158 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 07 00:00:00 CET 2024","effectiveDate": "Thu Jun 11 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,158 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 08 00:00:00 CET 2024","effectiveDate": "Fri Jun 12 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,158 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 09 00:00:00 CET 2024","effectiveDate": "Sat Jun 13 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,158 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 10 00:00:00 CET 2024","effectiveDate": "Sun Jun 14 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,158 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 11 00:00:00 CET 2024","effectiveDate": "Mon Jun 15 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,158 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 12 00:00:00 CET 2024","effectiveDate": "Tue Jun 16 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,158 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 13 00:00:00 CET 2024","effectiveDate": "Wed Jun 17 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,158 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 14 00:00:00 CET 2024","effectiveDate": "Thu Jun 18 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,158 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 15 00:00:00 CET 2024","effectiveDate": "Fri Jun 19 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,167 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 16 00:00:00 CET 2024","effectiveDate": "Sat Jun 20 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,167 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 17 00:00:00 CET 2024","effectiveDate": "Sun Jun 21 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,167 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 18 00:00:00 CET 2024","effectiveDate": "Mon Jun 22 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,167 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 19 00:00:00 CET 2024","effectiveDate": "Tue Jun 23 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,168 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 20 00:00:00 CET 2024","effectiveDate": "Wed Jun 24 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,168 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 21 00:00:00 CET 2024","effectiveDate": "Thu Jun 25 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,168 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 22 00:00:00 CET 2024","effectiveDate": "Fri Jun 26 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,168 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 23 00:00:00 CET 2024","effectiveDate": "Sat Jun 27 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,168 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 24 00:00:00 CET 2024","effectiveDate": "Sun Jun 28 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,168 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 25 00:00:00 CET 2024","effectiveDate": "Mon Jun 29 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,179 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 26 00:00:00 CET 2024","effectiveDate": "Tue Jun 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,179 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 27 00:00:00 CET 2024","effectiveDate": "Wed Jul 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,179 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 28 00:00:00 CET 2024","effectiveDate": "Thu Jul 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,179 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 29 00:00:00 CET 2024","effectiveDate": "Fri Jul 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,179 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 30 00:00:00 CET 2024","effectiveDate": "Sat Jul 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,180 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 31 00:00:00 CET 2024","effectiveDate": "Sun Jul 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,180 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 01 00:00:00 CET 2025","effectiveDate": "Mon Jul 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,180 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 02 00:00:00 CET 2025","effectiveDate": "Tue Jul 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,180 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 03 00:00:00 CET 2025","effectiveDate": "Wed Jul 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,180 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 04 00:00:00 CET 2025","effectiveDate": "Thu Jul 09 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,190 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 05 00:00:00 CET 2025","effectiveDate": "Fri Jul 10 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,191 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 06 00:00:00 CET 2025","effectiveDate": "Sat Jul 11 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,191 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 07 00:00:00 CET 2025","effectiveDate": "Sun Jul 12 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,191 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 31 00:00:00 CET 2024","effectiveDate": "Mon Jul 13 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,192 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 01 00:00:00 CET 2024","effectiveDate": "Tue Jul 14 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,192 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 02 00:00:00 CET 2024","effectiveDate": "Wed Jul 15 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,192 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 03 00:00:00 CET 2024","effectiveDate": "Thu Jul 16 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,192 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 04 00:00:00 CET 2024","effectiveDate": "Fri Jul 17 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,193 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 05 00:00:00 CET 2024","effectiveDate": "Sat Jul 18 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,193 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 06 00:00:00 CET 2024","effectiveDate": "Sun Jul 19 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,208 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 07 00:00:00 CET 2024","effectiveDate": "Mon Jul 20 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,208 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 08 00:00:00 CET 2024","effectiveDate": "Tue Jul 21 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,209 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 09 00:00:00 CET 2024","effectiveDate": "Wed Jul 22 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,209 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 10 00:00:00 CET 2024","effectiveDate": "Thu Jul 23 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,209 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 11 00:00:00 CET 2024","effectiveDate": "Fri Jul 24 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,209 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 12 00:00:00 CET 2024","effectiveDate": "Sat Jul 25 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,209 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 13 00:00:00 CET 2024","effectiveDate": "Sun Jul 26 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,209 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 14 00:00:00 CET 2024","effectiveDate": "Mon Jul 27 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,209 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 15 00:00:00 CET 2024","effectiveDate": "Tue Jul 28 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,210 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 16 00:00:00 CET 2024","effectiveDate": "Wed Jul 29 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,221 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 17 00:00:00 CET 2024","effectiveDate": "Thu Jul 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,221 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 18 00:00:00 CET 2024","effectiveDate": "Fri Jul 31 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,221 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 19 00:00:00 CET 2024","effectiveDate": "Sat Aug 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,222 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 20 00:00:00 CET 2024","effectiveDate": "Sun Aug 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,222 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 21 00:00:00 CET 2024","effectiveDate": "Mon Aug 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,222 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 22 00:00:00 CET 2024","effectiveDate": "Tue Aug 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,222 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 23 00:00:00 CET 2024","effectiveDate": "Wed Aug 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,222 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 24 00:00:00 CET 2024","effectiveDate": "Thu Aug 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,223 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 25 00:00:00 CET 2024","effectiveDate": "Fri Aug 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,223 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 26 00:00:00 CET 2024","effectiveDate": "Sun May 31 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,236 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 27 00:00:00 CET 2024","effectiveDate": "Mon Jun 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,236 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 28 00:00:00 CET 2024","effectiveDate": "Tue Jun 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,236 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 29 00:00:00 CET 2024","effectiveDate": "Wed Jun 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,237 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 30 00:00:00 CET 2024","effectiveDate": "Thu Jun 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,237 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 01 00:00:00 CET 2024","effectiveDate": "Fri Jun 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,237 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 02 00:00:00 CET 2024","effectiveDate": "Sat Jun 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,237 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 03 00:00:00 CET 2024","effectiveDate": "Sun Jun 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,237 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 04 00:00:00 CET 2024","effectiveDate": "Mon Jun 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,238 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 05 00:00:00 CET 2024","effectiveDate": "Tue Jun 09 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,238 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 06 00:00:00 CET 2024","effectiveDate": "Wed Jun 10 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,251 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 07 00:00:00 CET 2024","effectiveDate": "Thu Jun 11 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,252 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 08 00:00:00 CET 2024","effectiveDate": "Fri Jun 12 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,252 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 09 00:00:00 CET 2024","effectiveDate": "Sat Jun 13 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,252 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 10 00:00:00 CET 2024","effectiveDate": "Sun Jun 14 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,253 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 11 00:00:00 CET 2024","effectiveDate": "Mon Jun 15 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,253 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 12 00:00:00 CET 2024","effectiveDate": "Tue Jun 16 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,253 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 13 00:00:00 CET 2024","effectiveDate": "Wed Jun 17 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,254 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 14 00:00:00 CET 2024","effectiveDate": "Thu Jun 18 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,254 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 15 00:00:00 CET 2024","effectiveDate": "Fri Jun 19 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,255 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 16 00:00:00 CET 2024","effectiveDate": "Sat Jun 20 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,268 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 17 00:00:00 CET 2024","effectiveDate": "Sun Jun 21 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,268 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 18 00:00:00 CET 2024","effectiveDate": "Mon Jun 22 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,269 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 19 00:00:00 CET 2024","effectiveDate": "Tue Jun 23 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,269 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 20 00:00:00 CET 2024","effectiveDate": "Wed Jun 24 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,269 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 21 00:00:00 CET 2024","effectiveDate": "Thu Jun 25 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,269 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 22 00:00:00 CET 2024","effectiveDate": "Fri Jun 26 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,270 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 23 00:00:00 CET 2024","effectiveDate": "Sat Jun 27 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,270 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 24 00:00:00 CET 2024","effectiveDate": "Sun Jun 28 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,270 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 25 00:00:00 CET 2024","effectiveDate": "Mon Jun 29 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,270 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 26 00:00:00 CET 2024","effectiveDate": "Tue Jun 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,283 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 27 00:00:00 CET 2024","effectiveDate": "Wed Jul 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,283 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 28 00:00:00 CET 2024","effectiveDate": "Thu Jul 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,284 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 29 00:00:00 CET 2024","effectiveDate": "Fri Jul 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,284 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 30 00:00:00 CET 2024","effectiveDate": "Sat Jul 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,284 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 31 00:00:00 CET 2024","effectiveDate": "Sun Jul 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,284 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 01 00:00:00 CET 2025","effectiveDate": "Mon Jul 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,285 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 02 00:00:00 CET 2025","effectiveDate": "Tue Jul 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,285 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 03 00:00:00 CET 2025","effectiveDate": "Wed Jul 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,285 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 04 00:00:00 CET 2025","effectiveDate": "Thu Jul 09 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,285 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 05 00:00:00 CET 2025","effectiveDate": "Fri Jul 10 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,299 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 06 00:00:00 CET 2025","effectiveDate": "Sat Jul 11 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,300 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 07 00:00:00 CET 2025","effectiveDate": "Sun Jul 12 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,300 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 08 00:00:00 CET 2025","effectiveDate": "Mon Jul 13 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,300 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 09 00:00:00 CET 2025","effectiveDate": "Tue Jul 14 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,300 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 10 00:00:00 CET 2025","effectiveDate": "Wed Jul 15 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,300 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 11 00:00:00 CET 2025","effectiveDate": "Thu Jul 16 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,301 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 12 00:00:00 CET 2025","effectiveDate": "Fri Jul 17 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,301 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 13 00:00:00 CET 2025","effectiveDate": "Sat Jul 18 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,301 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 14 00:00:00 CET 2025","effectiveDate": "Sun Jul 19 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,301 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 15 00:00:00 CET 2025","effectiveDate": "Mon Jul 20 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,313 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 16 00:00:00 CET 2025","effectiveDate": "Tue Jul 21 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,314 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 17 00:00:00 CET 2025","effectiveDate": "Wed Jul 22 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,314 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 18 00:00:00 CET 2025","effectiveDate": "Thu Jul 23 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,314 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 19 00:00:00 CET 2025","effectiveDate": "Fri Jul 24 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,315 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 20 00:00:00 CET 2025","effectiveDate": "Sat Jul 25 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,315 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 21 00:00:00 CET 2025","effectiveDate": "Sun Jul 26 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,315 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 22 00:00:00 CET 2025","effectiveDate": "Mon Jul 27 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,315 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 23 00:00:00 CET 2025","effectiveDate": "Tue Jul 28 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,315 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 24 00:00:00 CET 2025","effectiveDate": "Wed Jul 29 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,315 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 25 00:00:00 CET 2025","effectiveDate": "Thu Jul 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,331 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 26 00:00:00 CET 2025","effectiveDate": "Fri Jul 31 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,331 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 27 00:00:00 CET 2025","effectiveDate": "Sat Aug 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,331 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 28 00:00:00 CET 2025","effectiveDate": "Sun Aug 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,332 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 29 00:00:00 CET 2025","effectiveDate": "Mon Aug 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,332 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 30 00:00:00 CET 2025","effectiveDate": "Tue Aug 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,332 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 31 00:00:00 CET 2025","effectiveDate": "Wed Aug 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,332 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 01 00:00:00 CET 2025","effectiveDate": "Thu Aug 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,332 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 02 00:00:00 CET 2025","effectiveDate": "Fri Aug 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,333 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 03 00:00:00 CET 2025","effectiveDate": "Sat Aug 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,333 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 04 00:00:00 CET 2025","effectiveDate": "Sun Aug 09 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,355 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 05 00:00:00 CET 2025","effectiveDate": "Mon Aug 10 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,355 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 06 00:00:00 CET 2025","effectiveDate": "Tue Aug 11 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,357 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 07 00:00:00 CET 2025","effectiveDate": "Wed Aug 12 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,357 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 30 00:00:00 CET 2024","effectiveDate": "Thu Aug 13 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,357 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 01 00:00:00 CET 2024","effectiveDate": "Fri Aug 14 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,357 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 02 00:00:00 CET 2024","effectiveDate": "Sat Aug 15 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,357 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 03 00:00:00 CET 2024","effectiveDate": "Sun Aug 16 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,358 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 04 00:00:00 CET 2024","effectiveDate": "Mon Aug 17 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,358 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 05 00:00:00 CET 2024","effectiveDate": "Tue Aug 18 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,358 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 06 00:00:00 CET 2024","effectiveDate": "Wed Aug 19 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,368 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 07 00:00:00 CET 2024","effectiveDate": "Thu Aug 20 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,368 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 08 00:00:00 CET 2024","effectiveDate": "Fri Aug 21 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,368 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 09 00:00:00 CET 2024","effectiveDate": "Sat Aug 22 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,368 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 10 00:00:00 CET 2024","effectiveDate": "Sun Aug 23 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,368 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 11 00:00:00 CET 2024","effectiveDate": "Mon Aug 24 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,368 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 12 00:00:00 CET 2024","effectiveDate": "Tue Aug 25 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,370 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 13 00:00:00 CET 2024","effectiveDate": "Wed Aug 26 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,370 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 14 00:00:00 CET 2024","effectiveDate": "Thu Aug 27 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,370 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 15 00:00:00 CET 2024","effectiveDate": "Fri Aug 28 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,370 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 16 00:00:00 CET 2024","effectiveDate": "Sat Aug 29 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,381 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 17 00:00:00 CET 2024","effectiveDate": "Sun Aug 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,382 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 18 00:00:00 CET 2024","effectiveDate": "Mon Aug 31 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,382 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 19 00:00:00 CET 2024","effectiveDate": "Tue Sep 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,382 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 20 00:00:00 CET 2024","effectiveDate": "Wed Sep 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,382 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 21 00:00:00 CET 2024","effectiveDate": "Thu Sep 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,383 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 22 00:00:00 CET 2024","effectiveDate": "Fri Sep 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,383 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 23 00:00:00 CET 2024","effectiveDate": "Sat Sep 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,383 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 24 00:00:00 CET 2024","effectiveDate": "Sun Sep 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,383 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 25 00:00:00 CET 2024","effectiveDate": "Mon Sep 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,383 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 26 00:00:00 CET 2024","effectiveDate": "Tue Jun 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,394 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 27 00:00:00 CET 2024","effectiveDate": "Wed Jul 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,394 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 28 00:00:00 CET 2024","effectiveDate": "Thu Jul 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,394 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 29 00:00:00 CET 2024","effectiveDate": "Fri Jul 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,394 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 30 00:00:00 CET 2024","effectiveDate": "Sat Jul 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,394 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 31 00:00:00 CET 2024","effectiveDate": "Sun Jul 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,395 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 01 00:00:00 CET 2025","effectiveDate": "Mon Jul 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,395 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 02 00:00:00 CET 2025","effectiveDate": "Tue Jul 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,395 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 03 00:00:00 CET 2025","effectiveDate": "Wed Jul 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,395 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 04 00:00:00 CET 2025","effectiveDate": "Thu Jul 09 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,395 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 05 00:00:00 CET 2025","effectiveDate": "Fri Jul 10 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,407 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 06 00:00:00 CET 2025","effectiveDate": "Sat Jul 11 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,407 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 07 00:00:00 CET 2025","effectiveDate": "Sun Jul 12 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,407 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 08 00:00:00 CET 2025","effectiveDate": "Mon Jul 13 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,407 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 09 00:00:00 CET 2025","effectiveDate": "Tue Jul 14 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,407 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 10 00:00:00 CET 2025","effectiveDate": "Wed Jul 15 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,408 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 11 00:00:00 CET 2025","effectiveDate": "Thu Jul 16 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,408 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 12 00:00:00 CET 2025","effectiveDate": "Fri Jul 17 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,408 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 13 00:00:00 CET 2025","effectiveDate": "Sat Jul 18 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,408 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 14 00:00:00 CET 2025","effectiveDate": "Sun Jul 19 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,408 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 15 00:00:00 CET 2025","effectiveDate": "Mon Jul 20 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,421 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 16 00:00:00 CET 2025","effectiveDate": "Tue Jul 21 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,421 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 17 00:00:00 CET 2025","effectiveDate": "Wed Jul 22 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,421 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 18 00:00:00 CET 2025","effectiveDate": "Thu Jul 23 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,422 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 19 00:00:00 CET 2025","effectiveDate": "Fri Jul 24 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,422 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 20 00:00:00 CET 2025","effectiveDate": "Sat Jul 25 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,422 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 21 00:00:00 CET 2025","effectiveDate": "Sun Jul 26 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,422 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 22 00:00:00 CET 2025","effectiveDate": "Mon Jul 27 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,422 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 23 00:00:00 CET 2025","effectiveDate": "Tue Jul 28 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,422 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 24 00:00:00 CET 2025","effectiveDate": "Wed Jul 29 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,422 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 25 00:00:00 CET 2025","effectiveDate": "Thu Jul 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,432 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 26 00:00:00 CET 2025","effectiveDate": "Fri Jul 31 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,432 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 27 00:00:00 CET 2025","effectiveDate": "Sat Aug 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,432 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 28 00:00:00 CET 2025","effectiveDate": "Sun Aug 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,432 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 29 00:00:00 CET 2025","effectiveDate": "Mon Aug 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,433 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 30 00:00:00 CET 2025","effectiveDate": "Tue Aug 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,433 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 31 00:00:00 CET 2025","effectiveDate": "Wed Aug 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,433 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 01 00:00:00 CET 2025","effectiveDate": "Thu Aug 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,433 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 02 00:00:00 CET 2025","effectiveDate": "Fri Aug 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,433 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 03 00:00:00 CET 2025","effectiveDate": "Sat Aug 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,433 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 04 00:00:00 CET 2025","effectiveDate": "Sun Aug 09 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,446 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 05 00:00:00 CET 2025","effectiveDate": "Mon Aug 10 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,446 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 06 00:00:00 CET 2025","effectiveDate": "Tue Aug 11 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,446 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 07 00:00:00 CET 2025","effectiveDate": "Wed Aug 12 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,446 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 08 00:00:00 CET 2025","effectiveDate": "Thu Aug 13 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,446 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 09 00:00:00 CET 2025","effectiveDate": "Fri Aug 14 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,447 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 10 00:00:00 CET 2025","effectiveDate": "Sat Aug 15 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,447 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 11 00:00:00 CET 2025","effectiveDate": "Sun Aug 16 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,447 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 12 00:00:00 CET 2025","effectiveDate": "Mon Aug 17 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,447 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 13 00:00:00 CET 2025","effectiveDate": "Tue Aug 18 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,447 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 14 00:00:00 CET 2025","effectiveDate": "Wed Aug 19 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,456 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 15 00:00:00 CET 2025","effectiveDate": "Thu Aug 20 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,458 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 16 00:00:00 CET 2025","effectiveDate": "Fri Aug 21 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,458 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 17 00:00:00 CET 2025","effectiveDate": "Sat Aug 22 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,458 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 18 00:00:00 CET 2025","effectiveDate": "Sun Aug 23 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,459 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 19 00:00:00 CET 2025","effectiveDate": "Mon Aug 24 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,459 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 20 00:00:00 CET 2025","effectiveDate": "Tue Aug 25 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,459 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 21 00:00:00 CET 2025","effectiveDate": "Wed Aug 26 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,459 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 22 00:00:00 CET 2025","effectiveDate": "Thu Aug 27 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,459 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 23 00:00:00 CET 2025","effectiveDate": "Fri Aug 28 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,459 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 24 00:00:00 CET 2025","effectiveDate": "Sat Aug 29 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,468 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 25 00:00:00 CET 2025","effectiveDate": "Sun Aug 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,468 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 26 00:00:00 CET 2025","effectiveDate": "Mon Aug 31 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,468 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 27 00:00:00 CET 2025","effectiveDate": "Tue Sep 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,468 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 28 00:00:00 CET 2025","effectiveDate": "Wed Sep 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,469 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 01 00:00:00 CET 2025","effectiveDate": "Thu Sep 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,469 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 02 00:00:00 CET 2025","effectiveDate": "Fri Sep 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,469 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 03 00:00:00 CET 2025","effectiveDate": "Sat Sep 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,469 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 04 00:00:00 CET 2025","effectiveDate": "Sun Sep 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,469 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 05 00:00:00 CET 2025","effectiveDate": "Mon Sep 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,469 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 06 00:00:00 CET 2025","effectiveDate": "Tue Sep 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,479 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 07 00:00:00 CET 2025","effectiveDate": "Wed Sep 09 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,479 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 08 00:00:00 CET 2025","effectiveDate": "Thu Sep 10 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,479 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 09 00:00:00 CET 2025","effectiveDate": "Fri Sep 11 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,479 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 31 00:00:00 CET 2024","effectiveDate": "Sat Sep 12 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,479 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 01 00:00:00 CET 2025","effectiveDate": "Sun Sep 13 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,479 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 02 00:00:00 CET 2025","effectiveDate": "Mon Sep 14 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,480 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 03 00:00:00 CET 2025","effectiveDate": "Tue Sep 15 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,480 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 04 00:00:00 CET 2025","effectiveDate": "Wed Sep 16 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,480 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 05 00:00:00 CET 2025","effectiveDate": "Thu Sep 17 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,480 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 06 00:00:00 CET 2025","effectiveDate": "Fri Sep 18 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,489 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 07 00:00:00 CET 2025","effectiveDate": "Sat Sep 19 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,489 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 08 00:00:00 CET 2025","effectiveDate": "Sun Sep 20 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,490 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 09 00:00:00 CET 2025","effectiveDate": "Mon Sep 21 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,490 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 10 00:00:00 CET 2025","effectiveDate": "Tue Sep 22 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,490 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 11 00:00:00 CET 2025","effectiveDate": "Wed Sep 23 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,490 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 12 00:00:00 CET 2025","effectiveDate": "Thu Sep 24 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,490 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 13 00:00:00 CET 2025","effectiveDate": "Fri Sep 25 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,490 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 14 00:00:00 CET 2025","effectiveDate": "Sat Sep 26 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,490 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 15 00:00:00 CET 2025","effectiveDate": "Sun Sep 27 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,491 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 16 00:00:00 CET 2025","effectiveDate": "Mon Sep 28 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,499 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 17 00:00:00 CET 2025","effectiveDate": "Tue Sep 29 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,499 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 18 00:00:00 CET 2025","effectiveDate": "Wed Sep 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,499 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 19 00:00:00 CET 2025","effectiveDate": "Thu Oct 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,499 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 20 00:00:00 CET 2025","effectiveDate": "Fri Oct 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,499 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 21 00:00:00 CET 2025","effectiveDate": "Sat Oct 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,499 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 22 00:00:00 CET 2025","effectiveDate": "Sun Oct 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,499 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 23 00:00:00 CET 2025","effectiveDate": "Mon Oct 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,499 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 24 00:00:00 CET 2025","effectiveDate": "Tue Oct 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,499 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 25 00:00:00 CET 2025","effectiveDate": "Wed Oct 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,500 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 26 00:00:00 CET 2025","effectiveDate": "Fri Jul 31 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,508 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 27 00:00:00 CET 2025","effectiveDate": "Sat Aug 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,508 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 28 00:00:00 CET 2025","effectiveDate": "Sun Aug 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,508 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 29 00:00:00 CET 2025","effectiveDate": "Mon Aug 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,509 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 30 00:00:00 CET 2025","effectiveDate": "Tue Aug 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,509 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 31 00:00:00 CET 2025","effectiveDate": "Wed Aug 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,509 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 01 00:00:00 CET 2025","effectiveDate": "Thu Aug 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,509 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 02 00:00:00 CET 2025","effectiveDate": "Fri Aug 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,509 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 03 00:00:00 CET 2025","effectiveDate": "Sat Aug 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,509 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 04 00:00:00 CET 2025","effectiveDate": "Sun Aug 09 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,510 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 05 00:00:00 CET 2025","effectiveDate": "Mon Aug 10 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,520 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 06 00:00:00 CET 2025","effectiveDate": "Tue Aug 11 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,520 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 07 00:00:00 CET 2025","effectiveDate": "Wed Aug 12 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,520 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 08 00:00:00 CET 2025","effectiveDate": "Thu Aug 13 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,520 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 09 00:00:00 CET 2025","effectiveDate": "Fri Aug 14 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,520 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 10 00:00:00 CET 2025","effectiveDate": "Sat Aug 15 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,520 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 11 00:00:00 CET 2025","effectiveDate": "Sun Aug 16 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,521 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 12 00:00:00 CET 2025","effectiveDate": "Mon Aug 17 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,521 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 13 00:00:00 CET 2025","effectiveDate": "Tue Aug 18 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,521 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 14 00:00:00 CET 2025","effectiveDate": "Wed Aug 19 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,521 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 15 00:00:00 CET 2025","effectiveDate": "Thu Aug 20 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,531 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 16 00:00:00 CET 2025","effectiveDate": "Fri Aug 21 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,531 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 17 00:00:00 CET 2025","effectiveDate": "Sat Aug 22 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,531 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 18 00:00:00 CET 2025","effectiveDate": "Sun Aug 23 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,531 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 19 00:00:00 CET 2025","effectiveDate": "Mon Aug 24 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,532 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 20 00:00:00 CET 2025","effectiveDate": "Tue Aug 25 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,532 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 21 00:00:00 CET 2025","effectiveDate": "Wed Aug 26 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,532 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 22 00:00:00 CET 2025","effectiveDate": "Thu Aug 27 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,532 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 23 00:00:00 CET 2025","effectiveDate": "Fri Aug 28 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,532 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 24 00:00:00 CET 2025","effectiveDate": "Sat Aug 29 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,532 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 25 00:00:00 CET 2025","effectiveDate": "Sun Aug 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,543 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 26 00:00:00 CET 2025","effectiveDate": "Mon Aug 31 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,543 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 27 00:00:00 CET 2025","effectiveDate": "Tue Sep 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,543 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 28 00:00:00 CET 2025","effectiveDate": "Wed Sep 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,544 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 01 00:00:00 CET 2025","effectiveDate": "Thu Sep 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,544 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 02 00:00:00 CET 2025","effectiveDate": "Fri Sep 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,544 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 03 00:00:00 CET 2025","effectiveDate": "Sat Sep 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,544 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 04 00:00:00 CET 2025","effectiveDate": "Sun Sep 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,544 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 05 00:00:00 CET 2025","effectiveDate": "Mon Sep 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,544 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 06 00:00:00 CET 2025","effectiveDate": "Tue Sep 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,544 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 07 00:00:00 CET 2025","effectiveDate": "Wed Sep 09 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,555 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 08 00:00:00 CET 2025","effectiveDate": "Thu Sep 10 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,556 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 09 00:00:00 CET 2025","effectiveDate": "Fri Sep 11 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,556 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 10 00:00:00 CET 2025","effectiveDate": "Sat Sep 12 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,556 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 11 00:00:00 CET 2025","effectiveDate": "Sun Sep 13 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,556 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 12 00:00:00 CET 2025","effectiveDate": "Mon Sep 14 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,556 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 13 00:00:00 CET 2025","effectiveDate": "Tue Sep 15 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,556 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 14 00:00:00 CET 2025","effectiveDate": "Wed Sep 16 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,558 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 15 00:00:00 CET 2025","effectiveDate": "Thu Sep 17 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,558 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 16 00:00:00 CET 2025","effectiveDate": "Fri Sep 18 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,558 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 17 00:00:00 CET 2025","effectiveDate": "Sat Sep 19 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,567 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 18 00:00:00 CET 2025","effectiveDate": "Sun Sep 20 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,567 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 19 00:00:00 CET 2025","effectiveDate": "Mon Sep 21 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,568 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 20 00:00:00 CET 2025","effectiveDate": "Tue Sep 22 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,568 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 21 00:00:00 CET 2025","effectiveDate": "Wed Sep 23 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,568 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 22 00:00:00 CET 2025","effectiveDate": "Thu Sep 24 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,568 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 23 00:00:00 CET 2025","effectiveDate": "Fri Sep 25 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,568 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 24 00:00:00 CET 2025","effectiveDate": "Sat Sep 26 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,568 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 25 00:00:00 CET 2025","effectiveDate": "Sun Sep 27 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,568 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 26 00:00:00 CET 2025","effectiveDate": "Mon Sep 28 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,568 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 27 00:00:00 CET 2025","effectiveDate": "Tue Sep 29 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,576 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 28 00:00:00 CET 2025","effectiveDate": "Wed Sep 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,577 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 29 00:00:00 CET 2025","effectiveDate": "Thu Oct 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,577 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 30 00:00:00 CET 2025","effectiveDate": "Fri Oct 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,577 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 31 00:00:00 CEST 2025","effectiveDate": "Sat Oct 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,577 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 01 00:00:00 CEST 2025","effectiveDate": "Sun Oct 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,578 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 02 00:00:00 CEST 2025","effectiveDate": "Mon Oct 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,578 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 03 00:00:00 CEST 2025","effectiveDate": "Tue Oct 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,578 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 04 00:00:00 CEST 2025","effectiveDate": "Wed Oct 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,578 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 05 00:00:00 CEST 2025","effectiveDate": "Thu Oct 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,578 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 06 00:00:00 CEST 2025","effectiveDate": "Fri Oct 09 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,591 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 07 00:00:00 CEST 2025","effectiveDate": "Sat Oct 10 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,591 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 08 00:00:00 CEST 2025","effectiveDate": "Sun Oct 11 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,591 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 09 00:00:00 CEST 2025","effectiveDate": "Mon Oct 12 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,591 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 31 00:00:00 CET 2025","effectiveDate": "Tue Oct 13 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,591 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 01 00:00:00 CET 2025","effectiveDate": "Wed Oct 14 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,591 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 02 00:00:00 CET 2025","effectiveDate": "Thu Oct 15 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,592 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 03 00:00:00 CET 2025","effectiveDate": "Fri Oct 16 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,592 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 04 00:00:00 CET 2025","effectiveDate": "Sat Oct 17 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,592 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 05 00:00:00 CET 2025","effectiveDate": "Sun Oct 18 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,592 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 06 00:00:00 CET 2025","effectiveDate": "Mon Oct 19 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,601 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 07 00:00:00 CET 2025","effectiveDate": "Tue Oct 20 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,601 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 08 00:00:00 CET 2025","effectiveDate": "Wed Oct 21 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,602 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 09 00:00:00 CET 2025","effectiveDate": "Thu Oct 22 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,602 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 10 00:00:00 CET 2025","effectiveDate": "Fri Oct 23 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,602 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 11 00:00:00 CET 2025","effectiveDate": "Sat Oct 24 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,602 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 12 00:00:00 CET 2025","effectiveDate": "Sun Oct 25 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,602 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 13 00:00:00 CET 2025","effectiveDate": "Mon Oct 26 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,602 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 14 00:00:00 CET 2025","effectiveDate": "Tue Oct 27 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,602 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 15 00:00:00 CET 2025","effectiveDate": "Wed Oct 28 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,602 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 16 00:00:00 CET 2025","effectiveDate": "Thu Oct 29 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,611 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 17 00:00:00 CET 2025","effectiveDate": "Fri Oct 30 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,611 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 18 00:00:00 CET 2025","effectiveDate": "Sat Oct 31 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,613 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 19 00:00:00 CET 2025","effectiveDate": "Sun Nov 01 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,613 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 20 00:00:00 CET 2025","effectiveDate": "Mon Nov 02 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,613 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 21 00:00:00 CET 2025","effectiveDate": "Tue Nov 03 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,613 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 22 00:00:00 CET 2025","effectiveDate": "Wed Nov 04 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,613 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 23 00:00:00 CET 2025","effectiveDate": "Thu Nov 05 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,614 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 24 00:00:00 CET 2025","effectiveDate": "Fri Nov 06 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,614 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 25 00:00:00 CET 2025","effectiveDate": "Sat Nov 07 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,614 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 26 00:00:00 CET 2025","effectiveDate": "Mon Aug 31 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,624 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 27 00:00:00 CET 2025","effectiveDate": "Tue Sep 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,625 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 28 00:00:00 CET 2025","effectiveDate": "Wed Sep 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,625 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 01 00:00:00 CET 2025","effectiveDate": "Thu Sep 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,628 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 02 00:00:00 CET 2025","effectiveDate": "Fri Sep 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,629 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 03 00:00:00 CET 2025","effectiveDate": "Sat Sep 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,629 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 04 00:00:00 CET 2025","effectiveDate": "Sun Sep 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,629 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 05 00:00:00 CET 2025","effectiveDate": "Mon Sep 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,629 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 06 00:00:00 CET 2025","effectiveDate": "Tue Sep 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,629 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 07 00:00:00 CET 2025","effectiveDate": "Wed Sep 09 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,629 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 08 00:00:00 CET 2025","effectiveDate": "Thu Sep 10 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,640 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 09 00:00:00 CET 2025","effectiveDate": "Fri Sep 11 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,640 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 10 00:00:00 CET 2025","effectiveDate": "Sat Sep 12 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,641 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 11 00:00:00 CET 2025","effectiveDate": "Sun Sep 13 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,641 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 12 00:00:00 CET 2025","effectiveDate": "Mon Sep 14 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,641 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 13 00:00:00 CET 2025","effectiveDate": "Tue Sep 15 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,641 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 14 00:00:00 CET 2025","effectiveDate": "Wed Sep 16 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,641 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 15 00:00:00 CET 2025","effectiveDate": "Thu Sep 17 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,641 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 16 00:00:00 CET 2025","effectiveDate": "Fri Sep 18 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,641 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 17 00:00:00 CET 2025","effectiveDate": "Sat Sep 19 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,642 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 18 00:00:00 CET 2025","effectiveDate": "Sun Sep 20 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,651 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 19 00:00:00 CET 2025","effectiveDate": "Mon Sep 21 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,651 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 20 00:00:00 CET 2025","effectiveDate": "Tue Sep 22 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,651 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 21 00:00:00 CET 2025","effectiveDate": "Wed Sep 23 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,651 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 22 00:00:00 CET 2025","effectiveDate": "Thu Sep 24 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,651 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 23 00:00:00 CET 2025","effectiveDate": "Fri Sep 25 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,651 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 24 00:00:00 CET 2025","effectiveDate": "Sat Sep 26 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,652 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 25 00:00:00 CET 2025","effectiveDate": "Sun Sep 27 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,652 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 26 00:00:00 CET 2025","effectiveDate": "Mon Sep 28 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,652 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 27 00:00:00 CET 2025","effectiveDate": "Tue Sep 29 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,652 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 28 00:00:00 CET 2025","effectiveDate": "Wed Sep 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,662 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 29 00:00:00 CET 2025","effectiveDate": "Thu Oct 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,662 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 30 00:00:00 CET 2025","effectiveDate": "Fri Oct 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,663 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 31 00:00:00 CEST 2025","effectiveDate": "Sat Oct 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,663 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 01 00:00:00 CEST 2025","effectiveDate": "Sun Oct 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,663 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 02 00:00:00 CEST 2025","effectiveDate": "Mon Oct 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,663 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 03 00:00:00 CEST 2025","effectiveDate": "Tue Oct 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,663 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 04 00:00:00 CEST 2025","effectiveDate": "Wed Oct 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,663 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 05 00:00:00 CEST 2025","effectiveDate": "Thu Oct 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,663 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 06 00:00:00 CEST 2025","effectiveDate": "Fri Oct 09 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,663 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 07 00:00:00 CEST 2025","effectiveDate": "Sat Oct 10 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,673 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 08 00:00:00 CEST 2025","effectiveDate": "Sun Oct 11 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,673 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 09 00:00:00 CEST 2025","effectiveDate": "Mon Oct 12 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,674 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 10 00:00:00 CEST 2025","effectiveDate": "Tue Oct 13 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,674 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 11 00:00:00 CEST 2025","effectiveDate": "Wed Oct 14 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,674 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 12 00:00:00 CEST 2025","effectiveDate": "Thu Oct 15 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,674 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 13 00:00:00 CEST 2025","effectiveDate": "Fri Oct 16 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,674 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 14 00:00:00 CEST 2025","effectiveDate": "Sat Oct 17 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,674 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 15 00:00:00 CEST 2025","effectiveDate": "Sun Oct 18 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,674 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 16 00:00:00 CEST 2025","effectiveDate": "Mon Oct 19 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,674 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 17 00:00:00 CEST 2025","effectiveDate": "Tue Oct 20 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,687 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 18 00:00:00 CEST 2025","effectiveDate": "Wed Oct 21 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,688 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 19 00:00:00 CEST 2025","effectiveDate": "Thu Oct 22 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,688 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 20 00:00:00 CEST 2025","effectiveDate": "Fri Oct 23 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,688 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 21 00:00:00 CEST 2025","effectiveDate": "Sat Oct 24 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,688 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 22 00:00:00 CEST 2025","effectiveDate": "Sun Oct 25 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,688 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 23 00:00:00 CEST 2025","effectiveDate": "Mon Oct 26 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,688 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 24 00:00:00 CEST 2025","effectiveDate": "Tue Oct 27 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,689 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 25 00:00:00 CEST 2025","effectiveDate": "Wed Oct 28 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,689 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 26 00:00:00 CEST 2025","effectiveDate": "Thu Oct 29 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,689 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 27 00:00:00 CEST 2025","effectiveDate": "Fri Oct 30 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,703 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 28 00:00:00 CEST 2025","effectiveDate": "Sat Oct 31 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,704 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 29 00:00:00 CEST 2025","effectiveDate": "Sun Nov 01 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,704 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 30 00:00:00 CEST 2025","effectiveDate": "Mon Nov 02 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,704 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 01 00:00:00 CEST 2025","effectiveDate": "Tue Nov 03 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,704 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 02 00:00:00 CEST 2025","effectiveDate": "Wed Nov 04 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,704 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 03 00:00:00 CEST 2025","effectiveDate": "Thu Nov 05 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,705 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 04 00:00:00 CEST 2025","effectiveDate": "Fri Nov 06 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,705 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 05 00:00:00 CEST 2025","effectiveDate": "Sat Nov 07 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,705 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 06 00:00:00 CEST 2025","effectiveDate": "Sun Nov 08 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,705 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 07 00:00:00 CEST 2025","effectiveDate": "Mon Nov 09 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,715 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 08 00:00:00 CEST 2025","effectiveDate": "Tue Nov 10 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,717 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 09 00:00:00 CEST 2025","effectiveDate": "Wed Nov 11 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,717 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 10 00:00:00 CEST 2025","effectiveDate": "Thu Nov 12 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,718 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 28 00:00:00 CET 2025","effectiveDate": "Fri Nov 13 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,718 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 01 00:00:00 CET 2025","effectiveDate": "Sat Nov 14 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,718 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 02 00:00:00 CET 2025","effectiveDate": "Sun Nov 15 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,718 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 03 00:00:00 CET 2025","effectiveDate": "Mon Nov 16 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,718 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 04 00:00:00 CET 2025","effectiveDate": "Tue Nov 17 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,718 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 05 00:00:00 CET 2025","effectiveDate": "Wed Nov 18 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,718 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 06 00:00:00 CET 2025","effectiveDate": "Thu Nov 19 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,730 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 07 00:00:00 CET 2025","effectiveDate": "Fri Nov 20 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,730 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 08 00:00:00 CET 2025","effectiveDate": "Sat Nov 21 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,731 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 09 00:00:00 CET 2025","effectiveDate": "Sun Nov 22 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,731 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 10 00:00:00 CET 2025","effectiveDate": "Mon Nov 23 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,731 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 11 00:00:00 CET 2025","effectiveDate": "Tue Nov 24 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,731 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 12 00:00:00 CET 2025","effectiveDate": "Wed Nov 25 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,731 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 13 00:00:00 CET 2025","effectiveDate": "Thu Nov 26 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,731 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 14 00:00:00 CET 2025","effectiveDate": "Fri Nov 27 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,731 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 15 00:00:00 CET 2025","effectiveDate": "Sat Nov 28 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,732 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 16 00:00:00 CET 2025","effectiveDate": "Sun Nov 29 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,742 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 17 00:00:00 CET 2025","effectiveDate": "Mon Nov 30 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,743 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 18 00:00:00 CET 2025","effectiveDate": "Tue Dec 01 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,743 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 19 00:00:00 CET 2025","effectiveDate": "Wed Dec 02 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,743 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 20 00:00:00 CET 2025","effectiveDate": "Thu Dec 03 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,743 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 21 00:00:00 CET 2025","effectiveDate": "Fri Dec 04 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,743 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 22 00:00:00 CET 2025","effectiveDate": "Sat Dec 05 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,743 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 23 00:00:00 CET 2025","effectiveDate": "Sun Dec 06 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,745 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 24 00:00:00 CET 2025","effectiveDate": "Mon Dec 07 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,745 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 25 00:00:00 CET 2025","effectiveDate": "Tue Dec 08 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,745 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 26 00:00:00 CET 2025","effectiveDate": "Wed Sep 30 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,757 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 27 00:00:00 CET 2025","effectiveDate": "Thu Oct 01 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,757 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 28 00:00:00 CET 2025","effectiveDate": "Fri Oct 02 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,757 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 29 00:00:00 CET 2025","effectiveDate": "Sat Oct 03 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,758 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 30 00:00:00 CET 2025","effectiveDate": "Sun Oct 04 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,758 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 31 00:00:00 CEST 2025","effectiveDate": "Mon Oct 05 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,758 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 01 00:00:00 CEST 2025","effectiveDate": "Tue Oct 06 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,758 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 02 00:00:00 CEST 2025","effectiveDate": "Wed Oct 07 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,758 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 03 00:00:00 CEST 2025","effectiveDate": "Thu Oct 08 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,758 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 04 00:00:00 CEST 2025","effectiveDate": "Fri Oct 09 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,758 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 05 00:00:00 CEST 2025","effectiveDate": "Sat Oct 10 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,769 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 06 00:00:00 CEST 2025","effectiveDate": "Sun Oct 11 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,769 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 07 00:00:00 CEST 2025","effectiveDate": "Mon Oct 12 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,770 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 08 00:00:00 CEST 2025","effectiveDate": "Tue Oct 13 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,770 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 09 00:00:00 CEST 2025","effectiveDate": "Wed Oct 14 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,770 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 10 00:00:00 CEST 2025","effectiveDate": "Thu Oct 15 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,770 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 11 00:00:00 CEST 2025","effectiveDate": "Fri Oct 16 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,770 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 12 00:00:00 CEST 2025","effectiveDate": "Sat Oct 17 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,770 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 13 00:00:00 CEST 2025","effectiveDate": "Sun Oct 18 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,771 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 14 00:00:00 CEST 2025","effectiveDate": "Mon Oct 19 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,771 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 15 00:00:00 CEST 2025","effectiveDate": "Tue Oct 20 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,781 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 16 00:00:00 CEST 2025","effectiveDate": "Wed Oct 21 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,781 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 17 00:00:00 CEST 2025","effectiveDate": "Thu Oct 22 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,781 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 18 00:00:00 CEST 2025","effectiveDate": "Fri Oct 23 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,781 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 19 00:00:00 CEST 2025","effectiveDate": "Sat Oct 24 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,781 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 20 00:00:00 CEST 2025","effectiveDate": "Sun Oct 25 00:00:00 CEST 2026"
	  }]
})
2023-04-15 17:23:11,781 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 21 00:00:00 CEST 2025","effectiveDate": "Mon Oct 26 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,782 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 22 00:00:00 CEST 2025","effectiveDate": "Tue Oct 27 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,782 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 23 00:00:00 CEST 2025","effectiveDate": "Wed Oct 28 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,782 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 24 00:00:00 CEST 2025","effectiveDate": "Thu Oct 29 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,782 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 25 00:00:00 CEST 2025","effectiveDate": "Fri Oct 30 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,792 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 26 00:00:00 CEST 2025","effectiveDate": "Sat Oct 31 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,793 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 27 00:00:00 CEST 2025","effectiveDate": "Sun Nov 01 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,793 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 28 00:00:00 CEST 2025","effectiveDate": "Mon Nov 02 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,793 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 29 00:00:00 CEST 2025","effectiveDate": "Tue Nov 03 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,793 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 30 00:00:00 CEST 2025","effectiveDate": "Wed Nov 04 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,793 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 01 00:00:00 CEST 2025","effectiveDate": "Thu Nov 05 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,794 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 02 00:00:00 CEST 2025","effectiveDate": "Fri Nov 06 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,794 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 03 00:00:00 CEST 2025","effectiveDate": "Sat Nov 07 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,794 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 04 00:00:00 CEST 2025","effectiveDate": "Sun Nov 08 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,794 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 05 00:00:00 CEST 2025","effectiveDate": "Mon Nov 09 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,804 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 06 00:00:00 CEST 2025","effectiveDate": "Tue Nov 10 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,805 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 07 00:00:00 CEST 2025","effectiveDate": "Wed Nov 11 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,805 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 08 00:00:00 CEST 2025","effectiveDate": "Thu Nov 12 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,805 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 09 00:00:00 CEST 2025","effectiveDate": "Fri Nov 13 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,805 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 10 00:00:00 CEST 2025","effectiveDate": "Sat Nov 14 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,805 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 11 00:00:00 CEST 2025","effectiveDate": "Sun Nov 15 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,805 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 12 00:00:00 CEST 2025","effectiveDate": "Mon Nov 16 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,806 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 13 00:00:00 CEST 2025","effectiveDate": "Tue Nov 17 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,806 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 14 00:00:00 CEST 2025","effectiveDate": "Wed Nov 18 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,806 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 15 00:00:00 CEST 2025","effectiveDate": "Thu Nov 19 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,816 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 16 00:00:00 CEST 2025","effectiveDate": "Fri Nov 20 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,818 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 17 00:00:00 CEST 2025","effectiveDate": "Sat Nov 21 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,818 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 18 00:00:00 CEST 2025","effectiveDate": "Sun Nov 22 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,818 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 19 00:00:00 CEST 2025","effectiveDate": "Mon Nov 23 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,819 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 20 00:00:00 CEST 2025","effectiveDate": "Tue Nov 24 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,819 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 21 00:00:00 CEST 2025","effectiveDate": "Wed Nov 25 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,819 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 22 00:00:00 CEST 2025","effectiveDate": "Thu Nov 26 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,819 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 23 00:00:00 CEST 2025","effectiveDate": "Fri Nov 27 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,819 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 24 00:00:00 CEST 2025","effectiveDate": "Sat Nov 28 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,819 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 25 00:00:00 CEST 2025","effectiveDate": "Sun Nov 29 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,830 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 26 00:00:00 CEST 2025","effectiveDate": "Mon Nov 30 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,830 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 27 00:00:00 CEST 2025","effectiveDate": "Tue Dec 01 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,831 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 28 00:00:00 CEST 2025","effectiveDate": "Wed Dec 02 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,831 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 29 00:00:00 CEST 2025","effectiveDate": "Thu Dec 03 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,831 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 30 00:00:00 CEST 2025","effectiveDate": "Fri Dec 04 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,831 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 31 00:00:00 CEST 2025","effectiveDate": "Sat Dec 05 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,831 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 01 00:00:00 CEST 2025","effectiveDate": "Sun Dec 06 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,831 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 02 00:00:00 CEST 2025","effectiveDate": "Mon Dec 07 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,831 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 03 00:00:00 CEST 2025","effectiveDate": "Tue Dec 08 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,832 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 04 00:00:00 CEST 2025","effectiveDate": "Wed Dec 09 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,843 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 05 00:00:00 CEST 2025","effectiveDate": "Thu Dec 10 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,843 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 06 00:00:00 CEST 2025","effectiveDate": "Fri Dec 11 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,843 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 07 00:00:00 CEST 2025","effectiveDate": "Sat Dec 12 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,843 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 31 00:00:00 CEST 2025","effectiveDate": "Sun Dec 13 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,844 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 01 00:00:00 CEST 2025","effectiveDate": "Mon Dec 14 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,844 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 02 00:00:00 CEST 2025","effectiveDate": "Tue Dec 15 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,844 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 03 00:00:00 CEST 2025","effectiveDate": "Wed Dec 16 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,844 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 04 00:00:00 CEST 2025","effectiveDate": "Thu Dec 17 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,844 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 05 00:00:00 CEST 2025","effectiveDate": "Fri Dec 18 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,845 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 06 00:00:00 CEST 2025","effectiveDate": "Sat Dec 19 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,855 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 07 00:00:00 CEST 2025","effectiveDate": "Sun Dec 20 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,855 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 08 00:00:00 CEST 2025","effectiveDate": "Mon Dec 21 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,855 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 09 00:00:00 CEST 2025","effectiveDate": "Tue Dec 22 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,855 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 10 00:00:00 CEST 2025","effectiveDate": "Wed Dec 23 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,855 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 11 00:00:00 CEST 2025","effectiveDate": "Thu Dec 24 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,856 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 12 00:00:00 CEST 2025","effectiveDate": "Fri Dec 25 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,856 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 13 00:00:00 CEST 2025","effectiveDate": "Sat Dec 26 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,856 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 14 00:00:00 CEST 2025","effectiveDate": "Sun Dec 27 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,856 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 15 00:00:00 CEST 2025","effectiveDate": "Mon Dec 28 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,856 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 16 00:00:00 CEST 2025","effectiveDate": "Tue Dec 29 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,866 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 17 00:00:00 CEST 2025","effectiveDate": "Wed Dec 30 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,866 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 18 00:00:00 CEST 2025","effectiveDate": "Thu Dec 31 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,866 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 19 00:00:00 CEST 2025","effectiveDate": "Fri Jan 01 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,866 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 20 00:00:00 CEST 2025","effectiveDate": "Sat Jan 02 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,867 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 21 00:00:00 CEST 2025","effectiveDate": "Sun Jan 03 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,867 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 22 00:00:00 CEST 2025","effectiveDate": "Mon Jan 04 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,867 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 23 00:00:00 CEST 2025","effectiveDate": "Tue Jan 05 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,867 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 24 00:00:00 CEST 2025","effectiveDate": "Wed Jan 06 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,867 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 25 00:00:00 CEST 2025","effectiveDate": "Thu Jan 07 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,867 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 26 00:00:00 CEST 2025","effectiveDate": "Sat Oct 31 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,875 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 27 00:00:00 CEST 2025","effectiveDate": "Sun Nov 01 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,875 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 28 00:00:00 CEST 2025","effectiveDate": "Mon Nov 02 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,876 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 29 00:00:00 CEST 2025","effectiveDate": "Tue Nov 03 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,876 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 30 00:00:00 CEST 2025","effectiveDate": "Wed Nov 04 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,876 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 01 00:00:00 CEST 2025","effectiveDate": "Thu Nov 05 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,876 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 02 00:00:00 CEST 2025","effectiveDate": "Fri Nov 06 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,876 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 03 00:00:00 CEST 2025","effectiveDate": "Sat Nov 07 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,876 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 04 00:00:00 CEST 2025","effectiveDate": "Sun Nov 08 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,876 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 05 00:00:00 CEST 2025","effectiveDate": "Mon Nov 09 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,876 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 06 00:00:00 CEST 2025","effectiveDate": "Tue Nov 10 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,884 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 07 00:00:00 CEST 2025","effectiveDate": "Wed Nov 11 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,884 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 08 00:00:00 CEST 2025","effectiveDate": "Thu Nov 12 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,886 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 09 00:00:00 CEST 2025","effectiveDate": "Fri Nov 13 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,886 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 10 00:00:00 CEST 2025","effectiveDate": "Sat Nov 14 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,886 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 11 00:00:00 CEST 2025","effectiveDate": "Sun Nov 15 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,886 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 12 00:00:00 CEST 2025","effectiveDate": "Mon Nov 16 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,886 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 13 00:00:00 CEST 2025","effectiveDate": "Tue Nov 17 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,886 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 14 00:00:00 CEST 2025","effectiveDate": "Wed Nov 18 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,886 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 15 00:00:00 CEST 2025","effectiveDate": "Thu Nov 19 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,886 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 16 00:00:00 CEST 2025","effectiveDate": "Fri Nov 20 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,897 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 17 00:00:00 CEST 2025","effectiveDate": "Sat Nov 21 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,897 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 18 00:00:00 CEST 2025","effectiveDate": "Sun Nov 22 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,897 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 19 00:00:00 CEST 2025","effectiveDate": "Mon Nov 23 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,897 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 20 00:00:00 CEST 2025","effectiveDate": "Tue Nov 24 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,897 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 21 00:00:00 CEST 2025","effectiveDate": "Wed Nov 25 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,898 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 22 00:00:00 CEST 2025","effectiveDate": "Thu Nov 26 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,898 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 23 00:00:00 CEST 2025","effectiveDate": "Fri Nov 27 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,898 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 24 00:00:00 CEST 2025","effectiveDate": "Sat Nov 28 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,898 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 25 00:00:00 CEST 2025","effectiveDate": "Sun Nov 29 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,898 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 26 00:00:00 CEST 2025","effectiveDate": "Mon Nov 30 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,907 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 27 00:00:00 CEST 2025","effectiveDate": "Tue Dec 01 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,907 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 28 00:00:00 CEST 2025","effectiveDate": "Wed Dec 02 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,907 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 29 00:00:00 CEST 2025","effectiveDate": "Thu Dec 03 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,907 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 30 00:00:00 CEST 2025","effectiveDate": "Fri Dec 04 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,907 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 31 00:00:00 CEST 2025","effectiveDate": "Sat Dec 05 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,907 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 01 00:00:00 CEST 2025","effectiveDate": "Sun Dec 06 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,908 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 02 00:00:00 CEST 2025","effectiveDate": "Mon Dec 07 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,908 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 03 00:00:00 CEST 2025","effectiveDate": "Tue Dec 08 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,908 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 04 00:00:00 CEST 2025","effectiveDate": "Wed Dec 09 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,908 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 05 00:00:00 CEST 2025","effectiveDate": "Thu Dec 10 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,914 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 06 00:00:00 CEST 2025","effectiveDate": "Fri Dec 11 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,914 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 07 00:00:00 CEST 2025","effectiveDate": "Sat Dec 12 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,914 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 08 00:00:00 CEST 2025","effectiveDate": "Sun Dec 13 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,914 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 09 00:00:00 CEST 2025","effectiveDate": "Mon Dec 14 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,914 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 10 00:00:00 CEST 2025","effectiveDate": "Tue Dec 15 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,915 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 11 00:00:00 CEST 2025","effectiveDate": "Wed Dec 16 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,915 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 12 00:00:00 CEST 2025","effectiveDate": "Thu Dec 17 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,915 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 13 00:00:00 CEST 2025","effectiveDate": "Fri Dec 18 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,915 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 14 00:00:00 CEST 2025","effectiveDate": "Sat Dec 19 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,915 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 15 00:00:00 CEST 2025","effectiveDate": "Sun Dec 20 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,923 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 16 00:00:00 CEST 2025","effectiveDate": "Mon Dec 21 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,924 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 17 00:00:00 CEST 2025","effectiveDate": "Tue Dec 22 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,924 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 18 00:00:00 CEST 2025","effectiveDate": "Wed Dec 23 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,924 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 19 00:00:00 CEST 2025","effectiveDate": "Thu Dec 24 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,924 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 20 00:00:00 CEST 2025","effectiveDate": "Fri Dec 25 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,924 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 21 00:00:00 CEST 2025","effectiveDate": "Sat Dec 26 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,924 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 22 00:00:00 CEST 2025","effectiveDate": "Sun Dec 27 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,925 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 23 00:00:00 CEST 2025","effectiveDate": "Mon Dec 28 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,925 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 24 00:00:00 CEST 2025","effectiveDate": "Tue Dec 29 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,925 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 25 00:00:00 CEST 2025","effectiveDate": "Wed Dec 30 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,933 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 26 00:00:00 CEST 2025","effectiveDate": "Thu Dec 31 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,933 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 27 00:00:00 CEST 2025","effectiveDate": "Fri Jan 01 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,934 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 28 00:00:00 CEST 2025","effectiveDate": "Sat Jan 02 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,934 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 29 00:00:00 CEST 2025","effectiveDate": "Sun Jan 03 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,934 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 30 00:00:00 CEST 2025","effectiveDate": "Mon Jan 04 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,934 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 01 00:00:00 CEST 2025","effectiveDate": "Tue Jan 05 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,934 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 02 00:00:00 CEST 2025","effectiveDate": "Wed Jan 06 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,934 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 03 00:00:00 CEST 2025","effectiveDate": "Thu Jan 07 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,934 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 04 00:00:00 CEST 2025","effectiveDate": "Fri Jan 08 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,934 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 05 00:00:00 CEST 2025","effectiveDate": "Sat Jan 09 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,944 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 06 00:00:00 CEST 2025","effectiveDate": "Sun Jan 10 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,944 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 07 00:00:00 CEST 2025","effectiveDate": "Mon Jan 11 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,945 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 08 00:00:00 CEST 2025","effectiveDate": "Tue Jan 12 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,945 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 30 00:00:00 CEST 2025","effectiveDate": "Wed Jan 13 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,945 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 01 00:00:00 CEST 2025","effectiveDate": "Thu Jan 14 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,945 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 02 00:00:00 CEST 2025","effectiveDate": "Fri Jan 15 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,945 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 03 00:00:00 CEST 2025","effectiveDate": "Sat Jan 16 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,946 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 04 00:00:00 CEST 2025","effectiveDate": "Sun Jan 17 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,946 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 05 00:00:00 CEST 2025","effectiveDate": "Mon Jan 18 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,946 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 06 00:00:00 CEST 2025","effectiveDate": "Tue Jan 19 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,954 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 07 00:00:00 CEST 2025","effectiveDate": "Wed Jan 20 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,955 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 08 00:00:00 CEST 2025","effectiveDate": "Thu Jan 21 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,955 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 09 00:00:00 CEST 2025","effectiveDate": "Fri Jan 22 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,955 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 10 00:00:00 CEST 2025","effectiveDate": "Sat Jan 23 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,955 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 11 00:00:00 CEST 2025","effectiveDate": "Sun Jan 24 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,955 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 12 00:00:00 CEST 2025","effectiveDate": "Mon Jan 25 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,955 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 13 00:00:00 CEST 2025","effectiveDate": "Tue Jan 26 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,955 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 14 00:00:00 CEST 2025","effectiveDate": "Wed Jan 27 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,955 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 15 00:00:00 CEST 2025","effectiveDate": "Thu Jan 28 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,955 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 16 00:00:00 CEST 2025","effectiveDate": "Fri Jan 29 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,964 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 17 00:00:00 CEST 2025","effectiveDate": "Sat Jan 30 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,965 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 18 00:00:00 CEST 2025","effectiveDate": "Sun Jan 31 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,965 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 19 00:00:00 CEST 2025","effectiveDate": "Mon Feb 01 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,965 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 20 00:00:00 CEST 2025","effectiveDate": "Tue Feb 02 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,966 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 21 00:00:00 CEST 2025","effectiveDate": "Wed Feb 03 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,966 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 22 00:00:00 CEST 2025","effectiveDate": "Thu Feb 04 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,966 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 23 00:00:00 CEST 2025","effectiveDate": "Fri Feb 05 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,966 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 24 00:00:00 CEST 2025","effectiveDate": "Sat Feb 06 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,966 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 25 00:00:00 CEST 2025","effectiveDate": "Sun Feb 07 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:11,967 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 26 00:00:00 CEST 2025","effectiveDate": "Mon Nov 30 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,978 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 27 00:00:00 CEST 2025","effectiveDate": "Tue Dec 01 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,978 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 28 00:00:00 CEST 2025","effectiveDate": "Wed Dec 02 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,979 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 29 00:00:00 CEST 2025","effectiveDate": "Thu Dec 03 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,979 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 30 00:00:00 CEST 2025","effectiveDate": "Fri Dec 04 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,979 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 31 00:00:00 CEST 2025","effectiveDate": "Sat Dec 05 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,979 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 01 00:00:00 CEST 2025","effectiveDate": "Sun Dec 06 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,979 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 02 00:00:00 CEST 2025","effectiveDate": "Mon Dec 07 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,980 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 03 00:00:00 CEST 2025","effectiveDate": "Tue Dec 08 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,980 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 04 00:00:00 CEST 2025","effectiveDate": "Wed Dec 09 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,980 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 05 00:00:00 CEST 2025","effectiveDate": "Thu Dec 10 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,989 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 06 00:00:00 CEST 2025","effectiveDate": "Fri Dec 11 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,989 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 07 00:00:00 CEST 2025","effectiveDate": "Sat Dec 12 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,990 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 08 00:00:00 CEST 2025","effectiveDate": "Sun Dec 13 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,990 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 09 00:00:00 CEST 2025","effectiveDate": "Mon Dec 14 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,990 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 10 00:00:00 CEST 2025","effectiveDate": "Tue Dec 15 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,990 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 11 00:00:00 CEST 2025","effectiveDate": "Wed Dec 16 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,990 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 12 00:00:00 CEST 2025","effectiveDate": "Thu Dec 17 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,990 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 13 00:00:00 CEST 2025","effectiveDate": "Fri Dec 18 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,990 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 14 00:00:00 CEST 2025","effectiveDate": "Sat Dec 19 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:11,990 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 15 00:00:00 CEST 2025","effectiveDate": "Sun Dec 20 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:12,000 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 16 00:00:00 CEST 2025","effectiveDate": "Mon Dec 21 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:12,000 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 17 00:00:00 CEST 2025","effectiveDate": "Tue Dec 22 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:12,001 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 18 00:00:00 CEST 2025","effectiveDate": "Wed Dec 23 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:12,001 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 19 00:00:00 CEST 2025","effectiveDate": "Thu Dec 24 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:12,001 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 20 00:00:00 CEST 2025","effectiveDate": "Fri Dec 25 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:12,001 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 21 00:00:00 CEST 2025","effectiveDate": "Sat Dec 26 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:12,001 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 22 00:00:00 CEST 2025","effectiveDate": "Sun Dec 27 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:12,001 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 23 00:00:00 CEST 2025","effectiveDate": "Mon Dec 28 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:12,001 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 24 00:00:00 CEST 2025","effectiveDate": "Tue Dec 29 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:12,002 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 25 00:00:00 CEST 2025","effectiveDate": "Wed Dec 30 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:12,011 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 26 00:00:00 CEST 2025","effectiveDate": "Thu Dec 31 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:12,011 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 27 00:00:00 CEST 2025","effectiveDate": "Fri Jan 01 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,012 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 28 00:00:00 CEST 2025","effectiveDate": "Sat Jan 02 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,012 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 29 00:00:00 CEST 2025","effectiveDate": "Sun Jan 03 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,012 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 30 00:00:00 CEST 2025","effectiveDate": "Mon Jan 04 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,012 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 01 00:00:00 CEST 2025","effectiveDate": "Tue Jan 05 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,012 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 02 00:00:00 CEST 2025","effectiveDate": "Wed Jan 06 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,012 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 03 00:00:00 CEST 2025","effectiveDate": "Thu Jan 07 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,012 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 04 00:00:00 CEST 2025","effectiveDate": "Fri Jan 08 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,013 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 05 00:00:00 CEST 2025","effectiveDate": "Sat Jan 09 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,023 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 06 00:00:00 CEST 2025","effectiveDate": "Sun Jan 10 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,023 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 07 00:00:00 CEST 2025","effectiveDate": "Mon Jan 11 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,023 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 08 00:00:00 CEST 2025","effectiveDate": "Tue Jan 12 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,023 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 09 00:00:00 CEST 2025","effectiveDate": "Wed Jan 13 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,023 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 10 00:00:00 CEST 2025","effectiveDate": "Thu Jan 14 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,023 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 11 00:00:00 CEST 2025","effectiveDate": "Fri Jan 15 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,024 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 12 00:00:00 CEST 2025","effectiveDate": "Sat Jan 16 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,024 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 13 00:00:00 CEST 2025","effectiveDate": "Sun Jan 17 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,024 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 14 00:00:00 CEST 2025","effectiveDate": "Mon Jan 18 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,024 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 15 00:00:00 CEST 2025","effectiveDate": "Tue Jan 19 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,034 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 16 00:00:00 CEST 2025","effectiveDate": "Wed Jan 20 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,035 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 17 00:00:00 CEST 2025","effectiveDate": "Thu Jan 21 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,035 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 18 00:00:00 CEST 2025","effectiveDate": "Fri Jan 22 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,035 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 19 00:00:00 CEST 2025","effectiveDate": "Sat Jan 23 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,035 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 20 00:00:00 CEST 2025","effectiveDate": "Sun Jan 24 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,035 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 21 00:00:00 CEST 2025","effectiveDate": "Mon Jan 25 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,035 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 22 00:00:00 CEST 2025","effectiveDate": "Tue Jan 26 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,036 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 23 00:00:00 CEST 2025","effectiveDate": "Wed Jan 27 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,036 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 24 00:00:00 CEST 2025","effectiveDate": "Thu Jan 28 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,036 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 25 00:00:00 CEST 2025","effectiveDate": "Fri Jan 29 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,046 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 26 00:00:00 CEST 2025","effectiveDate": "Sat Jan 30 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,047 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 27 00:00:00 CEST 2025","effectiveDate": "Sun Jan 31 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,047 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 28 00:00:00 CEST 2025","effectiveDate": "Mon Feb 01 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,047 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 29 00:00:00 CEST 2025","effectiveDate": "Tue Feb 02 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,047 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 30 00:00:00 CEST 2025","effectiveDate": "Wed Feb 03 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,047 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 31 00:00:00 CEST 2025","effectiveDate": "Thu Feb 04 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,047 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 01 00:00:00 CEST 2025","effectiveDate": "Fri Feb 05 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,047 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 02 00:00:00 CEST 2025","effectiveDate": "Sat Feb 06 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,048 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 03 00:00:00 CEST 2025","effectiveDate": "Sun Feb 07 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,048 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 04 00:00:00 CEST 2025","effectiveDate": "Mon Feb 08 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,058 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 05 00:00:00 CEST 2025","effectiveDate": "Tue Feb 09 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,059 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 06 00:00:00 CEST 2025","effectiveDate": "Wed Feb 10 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,059 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 07 00:00:00 CEST 2025","effectiveDate": "Thu Feb 11 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,059 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 31 00:00:00 CEST 2025","effectiveDate": "Fri Feb 12 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,059 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 01 00:00:00 CEST 2025","effectiveDate": "Sat Feb 13 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,059 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 02 00:00:00 CEST 2025","effectiveDate": "Sun Feb 14 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,059 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 03 00:00:00 CEST 2025","effectiveDate": "Mon Feb 15 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,060 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 04 00:00:00 CEST 2025","effectiveDate": "Tue Feb 16 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,060 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 05 00:00:00 CEST 2025","effectiveDate": "Wed Feb 17 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,060 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 06 00:00:00 CEST 2025","effectiveDate": "Thu Feb 18 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,072 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 07 00:00:00 CEST 2025","effectiveDate": "Fri Feb 19 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,073 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 08 00:00:00 CEST 2025","effectiveDate": "Sat Feb 20 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,073 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 09 00:00:00 CEST 2025","effectiveDate": "Sun Feb 21 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,073 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 10 00:00:00 CEST 2025","effectiveDate": "Mon Feb 22 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,073 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 11 00:00:00 CEST 2025","effectiveDate": "Tue Feb 23 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,073 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 12 00:00:00 CEST 2025","effectiveDate": "Wed Feb 24 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,073 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 13 00:00:00 CEST 2025","effectiveDate": "Thu Feb 25 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,074 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 14 00:00:00 CEST 2025","effectiveDate": "Fri Feb 26 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,074 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 15 00:00:00 CEST 2025","effectiveDate": "Sat Feb 27 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,074 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 16 00:00:00 CEST 2025","effectiveDate": "Sun Feb 28 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,084 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 17 00:00:00 CEST 2025","effectiveDate": "Mon Mar 01 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,085 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 18 00:00:00 CEST 2025","effectiveDate": "Tue Mar 02 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,085 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 19 00:00:00 CEST 2025","effectiveDate": "Wed Mar 03 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,085 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 20 00:00:00 CEST 2025","effectiveDate": "Thu Mar 04 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,085 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 21 00:00:00 CEST 2025","effectiveDate": "Fri Mar 05 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,086 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 22 00:00:00 CEST 2025","effectiveDate": "Sat Mar 06 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,086 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 23 00:00:00 CEST 2025","effectiveDate": "Sun Mar 07 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,086 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 24 00:00:00 CEST 2025","effectiveDate": "Mon Mar 08 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,086 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 25 00:00:00 CEST 2025","effectiveDate": "Tue Mar 09 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,086 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 26 00:00:00 CEST 2025","effectiveDate": "Thu Dec 31 00:00:00 CET 2026"
	  }]
})
2023-04-15 17:23:12,103 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 27 00:00:00 CEST 2025","effectiveDate": "Fri Jan 01 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,103 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 28 00:00:00 CEST 2025","effectiveDate": "Sat Jan 02 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,103 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 29 00:00:00 CEST 2025","effectiveDate": "Sun Jan 03 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,103 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 30 00:00:00 CEST 2025","effectiveDate": "Mon Jan 04 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,103 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 01 00:00:00 CEST 2025","effectiveDate": "Tue Jan 05 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,103 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 02 00:00:00 CEST 2025","effectiveDate": "Wed Jan 06 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,103 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 03 00:00:00 CEST 2025","effectiveDate": "Thu Jan 07 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,104 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 04 00:00:00 CEST 2025","effectiveDate": "Fri Jan 08 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,104 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 05 00:00:00 CEST 2025","effectiveDate": "Sat Jan 09 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,104 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 06 00:00:00 CEST 2025","effectiveDate": "Sun Jan 10 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,116 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 07 00:00:00 CEST 2025","effectiveDate": "Mon Jan 11 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,116 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 08 00:00:00 CEST 2025","effectiveDate": "Tue Jan 12 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,117 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 09 00:00:00 CEST 2025","effectiveDate": "Wed Jan 13 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,117 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 10 00:00:00 CEST 2025","effectiveDate": "Thu Jan 14 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,117 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 11 00:00:00 CEST 2025","effectiveDate": "Fri Jan 15 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,117 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 12 00:00:00 CEST 2025","effectiveDate": "Sat Jan 16 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,117 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 13 00:00:00 CEST 2025","effectiveDate": "Sun Jan 17 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,117 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 14 00:00:00 CEST 2025","effectiveDate": "Mon Jan 18 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,118 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 15 00:00:00 CEST 2025","effectiveDate": "Tue Jan 19 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,118 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 16 00:00:00 CEST 2025","effectiveDate": "Wed Jan 20 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,129 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 17 00:00:00 CEST 2025","effectiveDate": "Thu Jan 21 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,129 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 18 00:00:00 CEST 2025","effectiveDate": "Fri Jan 22 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,130 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 19 00:00:00 CEST 2025","effectiveDate": "Sat Jan 23 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,130 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 20 00:00:00 CEST 2025","effectiveDate": "Sun Jan 24 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,130 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 21 00:00:00 CEST 2025","effectiveDate": "Mon Jan 25 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,130 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 22 00:00:00 CEST 2025","effectiveDate": "Tue Jan 26 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,130 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 23 00:00:00 CEST 2025","effectiveDate": "Wed Jan 27 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,130 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 24 00:00:00 CEST 2025","effectiveDate": "Thu Jan 28 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,130 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 25 00:00:00 CEST 2025","effectiveDate": "Fri Jan 29 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,130 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 26 00:00:00 CEST 2025","effectiveDate": "Sat Jan 30 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,141 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 27 00:00:00 CEST 2025","effectiveDate": "Sun Jan 31 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,141 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 28 00:00:00 CEST 2025","effectiveDate": "Mon Feb 01 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,141 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 29 00:00:00 CEST 2025","effectiveDate": "Tue Feb 02 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,141 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 30 00:00:00 CEST 2025","effectiveDate": "Wed Feb 03 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,142 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 31 00:00:00 CEST 2025","effectiveDate": "Thu Feb 04 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,142 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 01 00:00:00 CEST 2025","effectiveDate": "Fri Feb 05 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,142 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 02 00:00:00 CEST 2025","effectiveDate": "Sat Feb 06 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,142 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 03 00:00:00 CEST 2025","effectiveDate": "Sun Feb 07 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,142 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 04 00:00:00 CEST 2025","effectiveDate": "Mon Feb 08 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,142 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 05 00:00:00 CEST 2025","effectiveDate": "Tue Feb 09 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,149 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 06 00:00:00 CEST 2025","effectiveDate": "Wed Feb 10 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,149 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 07 00:00:00 CEST 2025","effectiveDate": "Thu Feb 11 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,149 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 08 00:00:00 CEST 2025","effectiveDate": "Fri Feb 12 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,149 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 09 00:00:00 CEST 2025","effectiveDate": "Sat Feb 13 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,149 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 10 00:00:00 CEST 2025","effectiveDate": "Sun Feb 14 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,149 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 11 00:00:00 CEST 2025","effectiveDate": "Mon Feb 15 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,149 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 12 00:00:00 CEST 2025","effectiveDate": "Tue Feb 16 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,149 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 13 00:00:00 CEST 2025","effectiveDate": "Wed Feb 17 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,150 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 14 00:00:00 CEST 2025","effectiveDate": "Thu Feb 18 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,150 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 15 00:00:00 CEST 2025","effectiveDate": "Fri Feb 19 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,158 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 16 00:00:00 CEST 2025","effectiveDate": "Sat Feb 20 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,158 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 17 00:00:00 CEST 2025","effectiveDate": "Sun Feb 21 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,158 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 18 00:00:00 CEST 2025","effectiveDate": "Mon Feb 22 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,158 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 19 00:00:00 CEST 2025","effectiveDate": "Tue Feb 23 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,158 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 20 00:00:00 CEST 2025","effectiveDate": "Wed Feb 24 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,158 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 21 00:00:00 CEST 2025","effectiveDate": "Thu Feb 25 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,158 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 22 00:00:00 CEST 2025","effectiveDate": "Fri Feb 26 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,159 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 23 00:00:00 CEST 2025","effectiveDate": "Sat Feb 27 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,159 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 24 00:00:00 CEST 2025","effectiveDate": "Sun Feb 28 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,159 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 25 00:00:00 CEST 2025","effectiveDate": "Mon Mar 01 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,168 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 26 00:00:00 CEST 2025","effectiveDate": "Tue Mar 02 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,168 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 27 00:00:00 CEST 2025","effectiveDate": "Wed Mar 03 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,168 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 28 00:00:00 CEST 2025","effectiveDate": "Thu Mar 04 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,168 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 29 00:00:00 CEST 2025","effectiveDate": "Fri Mar 05 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,168 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 30 00:00:00 CEST 2025","effectiveDate": "Sat Mar 06 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,168 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 31 00:00:00 CEST 2025","effectiveDate": "Sun Mar 07 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,169 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 01 00:00:00 CEST 2025","effectiveDate": "Mon Mar 08 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,169 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 02 00:00:00 CEST 2025","effectiveDate": "Tue Mar 09 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,169 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 03 00:00:00 CEST 2025","effectiveDate": "Wed Mar 10 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,169 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 04 00:00:00 CEST 2025","effectiveDate": "Thu Mar 11 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,185 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 05 00:00:00 CEST 2025","effectiveDate": "Fri Mar 12 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,185 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 06 00:00:00 CEST 2025","effectiveDate": "Sat Mar 13 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,185 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 07 00:00:00 CEST 2025","effectiveDate": "Sun Mar 14 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,185 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 30 00:00:00 CEST 2025","effectiveDate": "Mon Mar 15 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,185 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 01 00:00:00 CEST 2025","effectiveDate": "Tue Mar 16 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,185 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 02 00:00:00 CEST 2025","effectiveDate": "Wed Mar 17 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,185 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 03 00:00:00 CEST 2025","effectiveDate": "Thu Mar 18 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,185 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 04 00:00:00 CEST 2025","effectiveDate": "Fri Mar 19 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,185 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 05 00:00:00 CEST 2025","effectiveDate": "Sat Mar 20 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,185 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 06 00:00:00 CEST 2025","effectiveDate": "Sun Mar 21 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,191 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 07 00:00:00 CEST 2025","effectiveDate": "Mon Mar 22 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,193 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 08 00:00:00 CEST 2025","effectiveDate": "Tue Mar 23 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,193 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 09 00:00:00 CEST 2025","effectiveDate": "Wed Mar 24 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,193 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 10 00:00:00 CEST 2025","effectiveDate": "Thu Mar 25 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,193 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 11 00:00:00 CEST 2025","effectiveDate": "Fri Mar 26 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,193 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 12 00:00:00 CEST 2025","effectiveDate": "Sat Mar 27 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,193 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 13 00:00:00 CEST 2025","effectiveDate": "Sun Mar 28 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,193 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 14 00:00:00 CEST 2025","effectiveDate": "Mon Mar 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,193 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 15 00:00:00 CEST 2025","effectiveDate": "Tue Mar 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,193 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 16 00:00:00 CEST 2025","effectiveDate": "Wed Mar 31 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,202 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 17 00:00:00 CEST 2025","effectiveDate": "Thu Apr 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,202 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 18 00:00:00 CEST 2025","effectiveDate": "Fri Apr 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,202 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 19 00:00:00 CEST 2025","effectiveDate": "Sat Apr 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,202 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 20 00:00:00 CEST 2025","effectiveDate": "Sun Apr 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,203 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 21 00:00:00 CEST 2025","effectiveDate": "Mon Apr 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,203 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 22 00:00:00 CEST 2025","effectiveDate": "Tue Apr 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,203 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 23 00:00:00 CEST 2025","effectiveDate": "Wed Apr 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,203 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 24 00:00:00 CEST 2025","effectiveDate": "Thu Apr 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,203 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 25 00:00:00 CEST 2025","effectiveDate": "Fri Apr 09 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,203 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 26 00:00:00 CEST 2025","effectiveDate": "Sun Jan 31 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,210 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 27 00:00:00 CEST 2025","effectiveDate": "Mon Feb 01 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,210 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 28 00:00:00 CEST 2025","effectiveDate": "Tue Feb 02 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,211 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 29 00:00:00 CEST 2025","effectiveDate": "Wed Feb 03 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,211 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 30 00:00:00 CEST 2025","effectiveDate": "Thu Feb 04 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,211 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 31 00:00:00 CEST 2025","effectiveDate": "Fri Feb 05 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,211 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 01 00:00:00 CEST 2025","effectiveDate": "Sat Feb 06 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,211 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 02 00:00:00 CEST 2025","effectiveDate": "Sun Feb 07 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,211 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 03 00:00:00 CEST 2025","effectiveDate": "Mon Feb 08 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,211 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 04 00:00:00 CEST 2025","effectiveDate": "Tue Feb 09 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,213 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 05 00:00:00 CEST 2025","effectiveDate": "Wed Feb 10 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,221 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 06 00:00:00 CEST 2025","effectiveDate": "Thu Feb 11 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,221 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 07 00:00:00 CEST 2025","effectiveDate": "Fri Feb 12 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,221 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 08 00:00:00 CEST 2025","effectiveDate": "Sat Feb 13 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,221 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 09 00:00:00 CEST 2025","effectiveDate": "Sun Feb 14 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,221 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 10 00:00:00 CEST 2025","effectiveDate": "Mon Feb 15 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,221 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 11 00:00:00 CEST 2025","effectiveDate": "Tue Feb 16 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,221 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 12 00:00:00 CEST 2025","effectiveDate": "Wed Feb 17 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,222 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 13 00:00:00 CEST 2025","effectiveDate": "Thu Feb 18 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,222 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 14 00:00:00 CEST 2025","effectiveDate": "Fri Feb 19 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,222 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 15 00:00:00 CEST 2025","effectiveDate": "Sat Feb 20 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,228 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 16 00:00:00 CEST 2025","effectiveDate": "Sun Feb 21 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,229 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 17 00:00:00 CEST 2025","effectiveDate": "Mon Feb 22 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,229 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 18 00:00:00 CEST 2025","effectiveDate": "Tue Feb 23 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,229 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 19 00:00:00 CEST 2025","effectiveDate": "Wed Feb 24 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,229 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 20 00:00:00 CEST 2025","effectiveDate": "Thu Feb 25 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,229 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 21 00:00:00 CEST 2025","effectiveDate": "Fri Feb 26 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,229 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 22 00:00:00 CEST 2025","effectiveDate": "Sat Feb 27 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,229 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 23 00:00:00 CEST 2025","effectiveDate": "Sun Feb 28 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,229 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 24 00:00:00 CEST 2025","effectiveDate": "Mon Mar 01 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,230 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 25 00:00:00 CEST 2025","effectiveDate": "Tue Mar 02 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,240 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 26 00:00:00 CEST 2025","effectiveDate": "Wed Mar 03 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,240 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 27 00:00:00 CEST 2025","effectiveDate": "Thu Mar 04 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,240 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 28 00:00:00 CEST 2025","effectiveDate": "Fri Mar 05 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,240 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 29 00:00:00 CEST 2025","effectiveDate": "Sat Mar 06 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,240 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 30 00:00:00 CEST 2025","effectiveDate": "Sun Mar 07 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,240 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 31 00:00:00 CEST 2025","effectiveDate": "Mon Mar 08 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,240 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 01 00:00:00 CEST 2025","effectiveDate": "Tue Mar 09 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,240 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 02 00:00:00 CEST 2025","effectiveDate": "Wed Mar 10 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,240 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 03 00:00:00 CEST 2025","effectiveDate": "Thu Mar 11 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,240 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 04 00:00:00 CEST 2025","effectiveDate": "Fri Mar 12 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,248 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 05 00:00:00 CEST 2025","effectiveDate": "Sat Mar 13 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,248 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 06 00:00:00 CEST 2025","effectiveDate": "Sun Mar 14 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,248 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 07 00:00:00 CEST 2025","effectiveDate": "Mon Mar 15 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,248 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 08 00:00:00 CEST 2025","effectiveDate": "Tue Mar 16 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,248 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 09 00:00:00 CEST 2025","effectiveDate": "Wed Mar 17 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,248 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 10 00:00:00 CEST 2025","effectiveDate": "Thu Mar 18 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,248 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 11 00:00:00 CEST 2025","effectiveDate": "Fri Mar 19 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,248 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 12 00:00:00 CEST 2025","effectiveDate": "Sat Mar 20 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,249 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 13 00:00:00 CEST 2025","effectiveDate": "Sun Mar 21 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,249 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 14 00:00:00 CEST 2025","effectiveDate": "Mon Mar 22 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,256 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 15 00:00:00 CEST 2025","effectiveDate": "Tue Mar 23 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,256 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 16 00:00:00 CEST 2025","effectiveDate": "Wed Mar 24 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,256 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 17 00:00:00 CEST 2025","effectiveDate": "Thu Mar 25 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,257 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 18 00:00:00 CEST 2025","effectiveDate": "Fri Mar 26 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,257 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 19 00:00:00 CEST 2025","effectiveDate": "Sat Mar 27 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,257 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 20 00:00:00 CEST 2025","effectiveDate": "Sun Mar 28 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,257 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 21 00:00:00 CEST 2025","effectiveDate": "Mon Mar 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,257 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 22 00:00:00 CEST 2025","effectiveDate": "Tue Mar 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,257 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 23 00:00:00 CEST 2025","effectiveDate": "Wed Mar 31 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,257 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 24 00:00:00 CEST 2025","effectiveDate": "Thu Apr 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,264 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 25 00:00:00 CEST 2025","effectiveDate": "Fri Apr 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,264 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 26 00:00:00 CEST 2025","effectiveDate": "Sat Apr 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,264 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 27 00:00:00 CEST 2025","effectiveDate": "Sun Apr 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,264 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 28 00:00:00 CEST 2025","effectiveDate": "Mon Apr 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,264 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 29 00:00:00 CEST 2025","effectiveDate": "Tue Apr 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,265 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 30 00:00:00 CEST 2025","effectiveDate": "Wed Apr 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,265 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 01 00:00:00 CEST 2025","effectiveDate": "Thu Apr 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,265 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 02 00:00:00 CEST 2025","effectiveDate": "Fri Apr 09 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,265 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 03 00:00:00 CEST 2025","effectiveDate": "Sat Apr 10 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,265 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 04 00:00:00 CEST 2025","effectiveDate": "Sun Apr 11 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,272 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 05 00:00:00 CEST 2025","effectiveDate": "Mon Apr 12 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,272 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 06 00:00:00 CEST 2025","effectiveDate": "Tue Apr 13 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,272 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 07 00:00:00 CEST 2025","effectiveDate": "Wed Apr 14 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,272 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 31 00:00:00 CEST 2025","effectiveDate": "Thu Apr 15 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,272 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 01 00:00:00 CEST 2025","effectiveDate": "Fri Apr 16 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,273 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 02 00:00:00 CEST 2025","effectiveDate": "Sat Apr 17 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,273 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 03 00:00:00 CEST 2025","effectiveDate": "Sun Apr 18 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,273 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 04 00:00:00 CEST 2025","effectiveDate": "Mon Apr 19 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,273 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 05 00:00:00 CEST 2025","effectiveDate": "Tue Apr 20 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,273 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 06 00:00:00 CEST 2025","effectiveDate": "Wed Apr 21 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,280 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 07 00:00:00 CEST 2025","effectiveDate": "Thu Apr 22 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,280 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 08 00:00:00 CEST 2025","effectiveDate": "Fri Apr 23 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,280 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 09 00:00:00 CEST 2025","effectiveDate": "Sat Apr 24 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,281 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 10 00:00:00 CEST 2025","effectiveDate": "Sun Apr 25 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,281 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 11 00:00:00 CEST 2025","effectiveDate": "Mon Apr 26 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,281 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 12 00:00:00 CEST 2025","effectiveDate": "Tue Apr 27 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,281 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 13 00:00:00 CEST 2025","effectiveDate": "Wed Apr 28 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,282 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 14 00:00:00 CEST 2025","effectiveDate": "Thu Apr 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,282 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 15 00:00:00 CEST 2025","effectiveDate": "Fri Apr 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,282 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 16 00:00:00 CEST 2025","effectiveDate": "Sat May 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,292 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 17 00:00:00 CEST 2025","effectiveDate": "Sun May 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,293 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 18 00:00:00 CEST 2025","effectiveDate": "Mon May 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,293 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 19 00:00:00 CEST 2025","effectiveDate": "Tue May 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,293 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 20 00:00:00 CEST 2025","effectiveDate": "Wed May 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,293 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 21 00:00:00 CEST 2025","effectiveDate": "Thu May 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,293 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 22 00:00:00 CEST 2025","effectiveDate": "Fri May 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,294 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 23 00:00:00 CEST 2025","effectiveDate": "Sat May 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,294 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 24 00:00:00 CEST 2025","effectiveDate": "Sun May 09 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,294 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 25 00:00:00 CEST 2025","effectiveDate": "Mon May 10 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,295 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 26 00:00:00 CEST 2025","effectiveDate": "Sun Feb 28 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,304 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 27 00:00:00 CEST 2025","effectiveDate": "Mon Mar 01 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,304 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 28 00:00:00 CEST 2025","effectiveDate": "Tue Mar 02 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,304 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 29 00:00:00 CEST 2025","effectiveDate": "Wed Mar 03 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,305 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 30 00:00:00 CEST 2025","effectiveDate": "Thu Mar 04 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,305 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 31 00:00:00 CEST 2025","effectiveDate": "Fri Mar 05 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,305 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 01 00:00:00 CEST 2025","effectiveDate": "Sat Mar 06 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,305 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 02 00:00:00 CEST 2025","effectiveDate": "Sun Mar 07 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,305 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 03 00:00:00 CEST 2025","effectiveDate": "Mon Mar 08 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,305 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 04 00:00:00 CEST 2025","effectiveDate": "Tue Mar 09 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,305 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 05 00:00:00 CEST 2025","effectiveDate": "Wed Mar 10 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,315 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 06 00:00:00 CEST 2025","effectiveDate": "Thu Mar 11 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,316 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 07 00:00:00 CEST 2025","effectiveDate": "Fri Mar 12 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,316 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 08 00:00:00 CEST 2025","effectiveDate": "Sat Mar 13 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,316 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 09 00:00:00 CEST 2025","effectiveDate": "Sun Mar 14 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,316 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 10 00:00:00 CEST 2025","effectiveDate": "Mon Mar 15 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,316 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 11 00:00:00 CEST 2025","effectiveDate": "Tue Mar 16 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,317 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 12 00:00:00 CEST 2025","effectiveDate": "Wed Mar 17 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,317 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 13 00:00:00 CEST 2025","effectiveDate": "Thu Mar 18 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,317 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 14 00:00:00 CEST 2025","effectiveDate": "Fri Mar 19 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,317 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 15 00:00:00 CEST 2025","effectiveDate": "Sat Mar 20 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,324 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 16 00:00:00 CEST 2025","effectiveDate": "Sun Mar 21 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,324 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 17 00:00:00 CEST 2025","effectiveDate": "Mon Mar 22 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,325 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 18 00:00:00 CEST 2025","effectiveDate": "Tue Mar 23 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,325 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 19 00:00:00 CEST 2025","effectiveDate": "Wed Mar 24 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,325 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 20 00:00:00 CEST 2025","effectiveDate": "Thu Mar 25 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,325 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 21 00:00:00 CEST 2025","effectiveDate": "Fri Mar 26 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,325 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 22 00:00:00 CEST 2025","effectiveDate": "Sat Mar 27 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,325 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 23 00:00:00 CEST 2025","effectiveDate": "Sun Mar 28 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,325 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 24 00:00:00 CEST 2025","effectiveDate": "Mon Mar 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,325 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 25 00:00:00 CEST 2025","effectiveDate": "Tue Mar 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,333 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 26 00:00:00 CEST 2025","effectiveDate": "Wed Mar 31 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,333 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 27 00:00:00 CEST 2025","effectiveDate": "Thu Apr 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,333 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 28 00:00:00 CEST 2025","effectiveDate": "Fri Apr 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,333 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 29 00:00:00 CEST 2025","effectiveDate": "Sat Apr 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,333 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 30 00:00:00 CEST 2025","effectiveDate": "Sun Apr 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,333 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 01 00:00:00 CEST 2025","effectiveDate": "Mon Apr 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,334 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 02 00:00:00 CEST 2025","effectiveDate": "Tue Apr 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,334 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 03 00:00:00 CEST 2025","effectiveDate": "Wed Apr 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,334 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 04 00:00:00 CEST 2025","effectiveDate": "Thu Apr 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,334 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 05 00:00:00 CEST 2025","effectiveDate": "Fri Apr 09 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,340 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 06 00:00:00 CEST 2025","effectiveDate": "Sat Apr 10 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,340 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 07 00:00:00 CEST 2025","effectiveDate": "Sun Apr 11 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,340 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 08 00:00:00 CEST 2025","effectiveDate": "Mon Apr 12 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,340 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 09 00:00:00 CEST 2025","effectiveDate": "Tue Apr 13 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,340 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 10 00:00:00 CEST 2025","effectiveDate": "Wed Apr 14 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,340 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 11 00:00:00 CEST 2025","effectiveDate": "Thu Apr 15 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,340 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 12 00:00:00 CEST 2025","effectiveDate": "Fri Apr 16 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,340 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 13 00:00:00 CEST 2025","effectiveDate": "Sat Apr 17 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,340 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 14 00:00:00 CEST 2025","effectiveDate": "Sun Apr 18 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,340 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 15 00:00:00 CEST 2025","effectiveDate": "Mon Apr 19 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,349 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 16 00:00:00 CEST 2025","effectiveDate": "Tue Apr 20 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,349 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 17 00:00:00 CEST 2025","effectiveDate": "Wed Apr 21 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,350 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 18 00:00:00 CEST 2025","effectiveDate": "Thu Apr 22 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,350 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 19 00:00:00 CEST 2025","effectiveDate": "Fri Apr 23 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,350 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 20 00:00:00 CEST 2025","effectiveDate": "Sat Apr 24 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,350 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 21 00:00:00 CEST 2025","effectiveDate": "Sun Apr 25 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,350 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 22 00:00:00 CEST 2025","effectiveDate": "Mon Apr 26 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,350 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 23 00:00:00 CEST 2025","effectiveDate": "Tue Apr 27 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,350 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 24 00:00:00 CEST 2025","effectiveDate": "Wed Apr 28 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,351 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 25 00:00:00 CEST 2025","effectiveDate": "Thu Apr 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,358 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 26 00:00:00 CEST 2025","effectiveDate": "Fri Apr 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,359 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 27 00:00:00 CET 2025","effectiveDate": "Sat May 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,359 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 28 00:00:00 CET 2025","effectiveDate": "Sun May 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,359 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 29 00:00:00 CET 2025","effectiveDate": "Mon May 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,359 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 30 00:00:00 CET 2025","effectiveDate": "Tue May 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,359 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 31 00:00:00 CET 2025","effectiveDate": "Wed May 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,359 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 01 00:00:00 CET 2025","effectiveDate": "Thu May 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,360 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 02 00:00:00 CET 2025","effectiveDate": "Fri May 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,360 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 03 00:00:00 CET 2025","effectiveDate": "Sat May 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,360 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 04 00:00:00 CET 2025","effectiveDate": "Sun May 09 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,367 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 05 00:00:00 CET 2025","effectiveDate": "Mon May 10 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,367 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 06 00:00:00 CET 2025","effectiveDate": "Tue May 11 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,367 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 07 00:00:00 CET 2025","effectiveDate": "Wed May 12 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,367 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 31 00:00:00 CEST 2025","effectiveDate": "Thu May 13 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,367 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 01 00:00:00 CEST 2025","effectiveDate": "Fri May 14 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,367 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 02 00:00:00 CEST 2025","effectiveDate": "Sat May 15 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,368 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 03 00:00:00 CEST 2025","effectiveDate": "Sun May 16 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,368 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 04 00:00:00 CEST 2025","effectiveDate": "Mon May 17 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,368 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 05 00:00:00 CEST 2025","effectiveDate": "Tue May 18 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,368 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 06 00:00:00 CEST 2025","effectiveDate": "Wed May 19 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,374 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 07 00:00:00 CEST 2025","effectiveDate": "Thu May 20 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,375 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 08 00:00:00 CEST 2025","effectiveDate": "Fri May 21 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,375 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 09 00:00:00 CEST 2025","effectiveDate": "Sat May 22 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,375 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 10 00:00:00 CEST 2025","effectiveDate": "Sun May 23 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,375 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 11 00:00:00 CEST 2025","effectiveDate": "Mon May 24 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,375 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 12 00:00:00 CEST 2025","effectiveDate": "Tue May 25 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,375 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 13 00:00:00 CEST 2025","effectiveDate": "Wed May 26 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,375 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 14 00:00:00 CEST 2025","effectiveDate": "Thu May 27 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,375 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 15 00:00:00 CEST 2025","effectiveDate": "Fri May 28 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,375 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 16 00:00:00 CEST 2025","effectiveDate": "Sat May 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,383 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 17 00:00:00 CEST 2025","effectiveDate": "Sun May 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,383 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 18 00:00:00 CEST 2025","effectiveDate": "Mon May 31 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,383 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 19 00:00:00 CEST 2025","effectiveDate": "Tue Jun 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,383 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 20 00:00:00 CEST 2025","effectiveDate": "Wed Jun 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,384 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 21 00:00:00 CEST 2025","effectiveDate": "Thu Jun 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,384 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 22 00:00:00 CEST 2025","effectiveDate": "Fri Jun 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,384 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 23 00:00:00 CEST 2025","effectiveDate": "Sat Jun 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,384 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 24 00:00:00 CEST 2025","effectiveDate": "Sun Jun 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,384 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 25 00:00:00 CEST 2025","effectiveDate": "Mon Jun 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,384 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 26 00:00:00 CEST 2025","effectiveDate": "Wed Mar 31 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,392 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 27 00:00:00 CEST 2025","effectiveDate": "Thu Apr 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,392 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 28 00:00:00 CEST 2025","effectiveDate": "Fri Apr 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,392 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 29 00:00:00 CEST 2025","effectiveDate": "Sat Apr 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,392 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 30 00:00:00 CEST 2025","effectiveDate": "Sun Apr 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,392 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 01 00:00:00 CEST 2025","effectiveDate": "Mon Apr 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,392 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 02 00:00:00 CEST 2025","effectiveDate": "Tue Apr 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,392 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 03 00:00:00 CEST 2025","effectiveDate": "Wed Apr 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,392 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 04 00:00:00 CEST 2025","effectiveDate": "Thu Apr 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,392 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 05 00:00:00 CEST 2025","effectiveDate": "Fri Apr 09 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,393 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 06 00:00:00 CEST 2025","effectiveDate": "Sat Apr 10 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,402 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 07 00:00:00 CEST 2025","effectiveDate": "Sun Apr 11 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,402 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 08 00:00:00 CEST 2025","effectiveDate": "Mon Apr 12 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,402 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 09 00:00:00 CEST 2025","effectiveDate": "Tue Apr 13 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,402 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 10 00:00:00 CEST 2025","effectiveDate": "Wed Apr 14 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,402 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 11 00:00:00 CEST 2025","effectiveDate": "Thu Apr 15 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,403 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 12 00:00:00 CEST 2025","effectiveDate": "Fri Apr 16 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,403 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 13 00:00:00 CEST 2025","effectiveDate": "Sat Apr 17 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,403 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 14 00:00:00 CEST 2025","effectiveDate": "Sun Apr 18 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,403 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 15 00:00:00 CEST 2025","effectiveDate": "Mon Apr 19 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,403 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 16 00:00:00 CEST 2025","effectiveDate": "Tue Apr 20 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,414 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 17 00:00:00 CEST 2025","effectiveDate": "Wed Apr 21 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,414 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 18 00:00:00 CEST 2025","effectiveDate": "Thu Apr 22 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,414 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 19 00:00:00 CEST 2025","effectiveDate": "Fri Apr 23 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,415 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 20 00:00:00 CEST 2025","effectiveDate": "Sat Apr 24 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,415 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 21 00:00:00 CEST 2025","effectiveDate": "Sun Apr 25 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,415 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 22 00:00:00 CEST 2025","effectiveDate": "Mon Apr 26 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,415 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 23 00:00:00 CEST 2025","effectiveDate": "Tue Apr 27 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,415 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 24 00:00:00 CEST 2025","effectiveDate": "Wed Apr 28 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,415 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 25 00:00:00 CEST 2025","effectiveDate": "Thu Apr 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,415 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 26 00:00:00 CEST 2025","effectiveDate": "Fri Apr 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,426 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 27 00:00:00 CET 2025","effectiveDate": "Sat May 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,426 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 28 00:00:00 CET 2025","effectiveDate": "Sun May 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,426 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 29 00:00:00 CET 2025","effectiveDate": "Mon May 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,426 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 30 00:00:00 CET 2025","effectiveDate": "Tue May 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,427 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 31 00:00:00 CET 2025","effectiveDate": "Wed May 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,427 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 01 00:00:00 CET 2025","effectiveDate": "Thu May 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,427 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 02 00:00:00 CET 2025","effectiveDate": "Fri May 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,427 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 03 00:00:00 CET 2025","effectiveDate": "Sat May 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,427 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 04 00:00:00 CET 2025","effectiveDate": "Sun May 09 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,427 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 05 00:00:00 CET 2025","effectiveDate": "Mon May 10 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,437 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 06 00:00:00 CET 2025","effectiveDate": "Tue May 11 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,438 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 07 00:00:00 CET 2025","effectiveDate": "Wed May 12 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,438 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 08 00:00:00 CET 2025","effectiveDate": "Thu May 13 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,438 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 09 00:00:00 CET 2025","effectiveDate": "Fri May 14 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,438 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 10 00:00:00 CET 2025","effectiveDate": "Sat May 15 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,438 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 11 00:00:00 CET 2025","effectiveDate": "Sun May 16 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,438 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 12 00:00:00 CET 2025","effectiveDate": "Mon May 17 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,438 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 13 00:00:00 CET 2025","effectiveDate": "Tue May 18 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,438 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 14 00:00:00 CET 2025","effectiveDate": "Wed May 19 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,438 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 15 00:00:00 CET 2025","effectiveDate": "Thu May 20 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,447 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 16 00:00:00 CET 2025","effectiveDate": "Fri May 21 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,448 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 17 00:00:00 CET 2025","effectiveDate": "Sat May 22 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,448 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 18 00:00:00 CET 2025","effectiveDate": "Sun May 23 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,448 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 19 00:00:00 CET 2025","effectiveDate": "Mon May 24 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,448 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 20 00:00:00 CET 2025","effectiveDate": "Tue May 25 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,448 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 21 00:00:00 CET 2025","effectiveDate": "Wed May 26 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,448 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 22 00:00:00 CET 2025","effectiveDate": "Thu May 27 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,448 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 23 00:00:00 CET 2025","effectiveDate": "Fri May 28 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,448 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 24 00:00:00 CET 2025","effectiveDate": "Sat May 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,448 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 25 00:00:00 CET 2025","effectiveDate": "Sun May 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,457 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 26 00:00:00 CET 2025","effectiveDate": "Mon May 31 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,458 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 27 00:00:00 CET 2025","effectiveDate": "Tue Jun 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,458 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 28 00:00:00 CET 2025","effectiveDate": "Wed Jun 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,458 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 29 00:00:00 CET 2025","effectiveDate": "Thu Jun 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,458 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 30 00:00:00 CET 2025","effectiveDate": "Fri Jun 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,458 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 01 00:00:00 CET 2025","effectiveDate": "Sat Jun 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,458 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 02 00:00:00 CET 2025","effectiveDate": "Sun Jun 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,458 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 03 00:00:00 CET 2025","effectiveDate": "Mon Jun 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,458 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 04 00:00:00 CET 2025","effectiveDate": "Tue Jun 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,458 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 05 00:00:00 CET 2025","effectiveDate": "Wed Jun 09 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,467 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 06 00:00:00 CET 2025","effectiveDate": "Thu Jun 10 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,467 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 07 00:00:00 CET 2025","effectiveDate": "Fri Jun 11 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,468 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 08 00:00:00 CET 2025","effectiveDate": "Sat Jun 12 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,468 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 30 00:00:00 CEST 2025","effectiveDate": "Sun Jun 13 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,468 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 01 00:00:00 CEST 2025","effectiveDate": "Mon Jun 14 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,468 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 02 00:00:00 CEST 2025","effectiveDate": "Tue Jun 15 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,468 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 03 00:00:00 CEST 2025","effectiveDate": "Wed Jun 16 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,468 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 04 00:00:00 CEST 2025","effectiveDate": "Thu Jun 17 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,468 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 05 00:00:00 CEST 2025","effectiveDate": "Fri Jun 18 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,468 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 06 00:00:00 CEST 2025","effectiveDate": "Sat Jun 19 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,477 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 07 00:00:00 CEST 2025","effectiveDate": "Sun Jun 20 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,478 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 08 00:00:00 CEST 2025","effectiveDate": "Mon Jun 21 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,478 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 09 00:00:00 CEST 2025","effectiveDate": "Tue Jun 22 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,478 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 10 00:00:00 CEST 2025","effectiveDate": "Wed Jun 23 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,478 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 11 00:00:00 CEST 2025","effectiveDate": "Thu Jun 24 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,478 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 12 00:00:00 CEST 2025","effectiveDate": "Fri Jun 25 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,478 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 13 00:00:00 CEST 2025","effectiveDate": "Sat Jun 26 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,478 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 14 00:00:00 CEST 2025","effectiveDate": "Sun Jun 27 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,478 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 15 00:00:00 CEST 2025","effectiveDate": "Mon Jun 28 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,478 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 16 00:00:00 CEST 2025","effectiveDate": "Tue Jun 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,488 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 17 00:00:00 CEST 2025","effectiveDate": "Wed Jun 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,488 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 18 00:00:00 CEST 2025","effectiveDate": "Thu Jul 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,488 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 19 00:00:00 CEST 2025","effectiveDate": "Fri Jul 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,488 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 20 00:00:00 CEST 2025","effectiveDate": "Sat Jul 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,488 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 21 00:00:00 CEST 2025","effectiveDate": "Sun Jul 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,489 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 22 00:00:00 CEST 2025","effectiveDate": "Mon Jul 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,489 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 23 00:00:00 CEST 2025","effectiveDate": "Tue Jul 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,489 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 24 00:00:00 CEST 2025","effectiveDate": "Wed Jul 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,489 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 25 00:00:00 CEST 2025","effectiveDate": "Thu Jul 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,489 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 26 00:00:00 CEST 2025","effectiveDate": "Fri Apr 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,498 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 27 00:00:00 CET 2025","effectiveDate": "Sat May 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,498 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 28 00:00:00 CET 2025","effectiveDate": "Sun May 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,498 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 29 00:00:00 CET 2025","effectiveDate": "Mon May 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,499 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 30 00:00:00 CET 2025","effectiveDate": "Tue May 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,499 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 31 00:00:00 CET 2025","effectiveDate": "Wed May 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,499 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 01 00:00:00 CET 2025","effectiveDate": "Thu May 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,499 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 02 00:00:00 CET 2025","effectiveDate": "Fri May 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,499 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 03 00:00:00 CET 2025","effectiveDate": "Sat May 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,499 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 04 00:00:00 CET 2025","effectiveDate": "Sun May 09 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,499 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 05 00:00:00 CET 2025","effectiveDate": "Mon May 10 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,507 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 06 00:00:00 CET 2025","effectiveDate": "Tue May 11 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,507 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 07 00:00:00 CET 2025","effectiveDate": "Wed May 12 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,507 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 08 00:00:00 CET 2025","effectiveDate": "Thu May 13 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,508 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 09 00:00:00 CET 2025","effectiveDate": "Fri May 14 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,508 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 10 00:00:00 CET 2025","effectiveDate": "Sat May 15 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,508 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 11 00:00:00 CET 2025","effectiveDate": "Sun May 16 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,508 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 12 00:00:00 CET 2025","effectiveDate": "Mon May 17 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,508 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 13 00:00:00 CET 2025","effectiveDate": "Tue May 18 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,509 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 14 00:00:00 CET 2025","effectiveDate": "Wed May 19 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,509 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 15 00:00:00 CET 2025","effectiveDate": "Thu May 20 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,518 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 16 00:00:00 CET 2025","effectiveDate": "Fri May 21 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,518 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 17 00:00:00 CET 2025","effectiveDate": "Sat May 22 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,518 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 18 00:00:00 CET 2025","effectiveDate": "Sun May 23 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,518 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 19 00:00:00 CET 2025","effectiveDate": "Mon May 24 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,518 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 20 00:00:00 CET 2025","effectiveDate": "Tue May 25 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,518 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 21 00:00:00 CET 2025","effectiveDate": "Wed May 26 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,518 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 22 00:00:00 CET 2025","effectiveDate": "Thu May 27 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,519 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 23 00:00:00 CET 2025","effectiveDate": "Fri May 28 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,519 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 24 00:00:00 CET 2025","effectiveDate": "Sat May 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,519 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 25 00:00:00 CET 2025","effectiveDate": "Sun May 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,527 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 26 00:00:00 CET 2025","effectiveDate": "Mon May 31 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,528 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 27 00:00:00 CET 2025","effectiveDate": "Tue Jun 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,528 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 28 00:00:00 CET 2025","effectiveDate": "Wed Jun 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,528 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 29 00:00:00 CET 2025","effectiveDate": "Thu Jun 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,528 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 30 00:00:00 CET 2025","effectiveDate": "Fri Jun 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,528 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 01 00:00:00 CET 2025","effectiveDate": "Sat Jun 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,528 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 02 00:00:00 CET 2025","effectiveDate": "Sun Jun 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,528 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 03 00:00:00 CET 2025","effectiveDate": "Mon Jun 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,528 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 04 00:00:00 CET 2025","effectiveDate": "Tue Jun 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,529 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 05 00:00:00 CET 2025","effectiveDate": "Wed Jun 09 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,536 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 06 00:00:00 CET 2025","effectiveDate": "Thu Jun 10 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,537 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 07 00:00:00 CET 2025","effectiveDate": "Fri Jun 11 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,537 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 08 00:00:00 CET 2025","effectiveDate": "Sat Jun 12 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,537 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 09 00:00:00 CET 2025","effectiveDate": "Sun Jun 13 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,537 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 10 00:00:00 CET 2025","effectiveDate": "Mon Jun 14 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,537 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 11 00:00:00 CET 2025","effectiveDate": "Tue Jun 15 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,537 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 12 00:00:00 CET 2025","effectiveDate": "Wed Jun 16 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,537 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 13 00:00:00 CET 2025","effectiveDate": "Thu Jun 17 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,537 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 14 00:00:00 CET 2025","effectiveDate": "Fri Jun 18 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,538 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 15 00:00:00 CET 2025","effectiveDate": "Sat Jun 19 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,549 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 16 00:00:00 CET 2025","effectiveDate": "Sun Jun 20 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,549 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 17 00:00:00 CET 2025","effectiveDate": "Mon Jun 21 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,549 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 18 00:00:00 CET 2025","effectiveDate": "Tue Jun 22 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,550 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 19 00:00:00 CET 2025","effectiveDate": "Wed Jun 23 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,550 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 20 00:00:00 CET 2025","effectiveDate": "Thu Jun 24 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,550 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 21 00:00:00 CET 2025","effectiveDate": "Fri Jun 25 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,550 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 22 00:00:00 CET 2025","effectiveDate": "Sat Jun 26 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,550 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 23 00:00:00 CET 2025","effectiveDate": "Sun Jun 27 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,550 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 24 00:00:00 CET 2025","effectiveDate": "Mon Jun 28 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,550 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 25 00:00:00 CET 2025","effectiveDate": "Tue Jun 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,557 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 26 00:00:00 CET 2025","effectiveDate": "Wed Jun 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,557 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 27 00:00:00 CET 2025","effectiveDate": "Thu Jul 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,557 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 28 00:00:00 CET 2025","effectiveDate": "Fri Jul 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,557 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 29 00:00:00 CET 2025","effectiveDate": "Sat Jul 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,557 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 30 00:00:00 CET 2025","effectiveDate": "Sun Jul 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,557 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 31 00:00:00 CET 2025","effectiveDate": "Mon Jul 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,557 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 01 00:00:00 CET 2026","effectiveDate": "Tue Jul 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,558 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 02 00:00:00 CET 2026","effectiveDate": "Wed Jul 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,558 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 03 00:00:00 CET 2026","effectiveDate": "Thu Jul 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,558 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 04 00:00:00 CET 2026","effectiveDate": "Fri Jul 09 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,566 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 05 00:00:00 CET 2026","effectiveDate": "Sat Jul 10 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,566 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 06 00:00:00 CET 2026","effectiveDate": "Sun Jul 11 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,566 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 07 00:00:00 CET 2026","effectiveDate": "Mon Jul 12 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,566 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 31 00:00:00 CET 2025","effectiveDate": "Tue Jul 13 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,566 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 01 00:00:00 CET 2025","effectiveDate": "Wed Jul 14 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,567 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 02 00:00:00 CET 2025","effectiveDate": "Thu Jul 15 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,567 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 03 00:00:00 CET 2025","effectiveDate": "Fri Jul 16 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,567 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 04 00:00:00 CET 2025","effectiveDate": "Sat Jul 17 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,567 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 05 00:00:00 CET 2025","effectiveDate": "Sun Jul 18 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,567 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 06 00:00:00 CET 2025","effectiveDate": "Mon Jul 19 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,575 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 07 00:00:00 CET 2025","effectiveDate": "Tue Jul 20 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,575 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 08 00:00:00 CET 2025","effectiveDate": "Wed Jul 21 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,575 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 09 00:00:00 CET 2025","effectiveDate": "Thu Jul 22 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,575 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 10 00:00:00 CET 2025","effectiveDate": "Fri Jul 23 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,577 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 11 00:00:00 CET 2025","effectiveDate": "Sat Jul 24 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,577 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 12 00:00:00 CET 2025","effectiveDate": "Sun Jul 25 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,577 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 13 00:00:00 CET 2025","effectiveDate": "Mon Jul 26 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,577 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 14 00:00:00 CET 2025","effectiveDate": "Tue Jul 27 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,577 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 15 00:00:00 CET 2025","effectiveDate": "Wed Jul 28 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,577 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 16 00:00:00 CET 2025","effectiveDate": "Thu Jul 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,587 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 17 00:00:00 CET 2025","effectiveDate": "Fri Jul 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,587 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 18 00:00:00 CET 2025","effectiveDate": "Sat Jul 31 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,587 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 19 00:00:00 CET 2025","effectiveDate": "Sun Aug 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,587 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 20 00:00:00 CET 2025","effectiveDate": "Mon Aug 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,587 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 21 00:00:00 CET 2025","effectiveDate": "Tue Aug 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,588 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 22 00:00:00 CET 2025","effectiveDate": "Wed Aug 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,588 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 23 00:00:00 CET 2025","effectiveDate": "Thu Aug 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,588 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 24 00:00:00 CET 2025","effectiveDate": "Fri Aug 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,588 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 25 00:00:00 CET 2025","effectiveDate": "Sat Aug 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,588 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 26 00:00:00 CET 2025","effectiveDate": "Mon May 31 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,596 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 27 00:00:00 CET 2025","effectiveDate": "Tue Jun 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,597 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 28 00:00:00 CET 2025","effectiveDate": "Wed Jun 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,597 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 29 00:00:00 CET 2025","effectiveDate": "Thu Jun 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,597 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 30 00:00:00 CET 2025","effectiveDate": "Fri Jun 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,597 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 01 00:00:00 CET 2025","effectiveDate": "Sat Jun 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,597 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 02 00:00:00 CET 2025","effectiveDate": "Sun Jun 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,597 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 03 00:00:00 CET 2025","effectiveDate": "Mon Jun 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,597 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 04 00:00:00 CET 2025","effectiveDate": "Tue Jun 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,598 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 05 00:00:00 CET 2025","effectiveDate": "Wed Jun 09 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,598 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 06 00:00:00 CET 2025","effectiveDate": "Thu Jun 10 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,607 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 07 00:00:00 CET 2025","effectiveDate": "Fri Jun 11 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,608 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 08 00:00:00 CET 2025","effectiveDate": "Sat Jun 12 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,608 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 09 00:00:00 CET 2025","effectiveDate": "Sun Jun 13 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,608 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 10 00:00:00 CET 2025","effectiveDate": "Mon Jun 14 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,608 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 11 00:00:00 CET 2025","effectiveDate": "Tue Jun 15 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,608 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 12 00:00:00 CET 2025","effectiveDate": "Wed Jun 16 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,609 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 13 00:00:00 CET 2025","effectiveDate": "Thu Jun 17 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,609 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 14 00:00:00 CET 2025","effectiveDate": "Fri Jun 18 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,609 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 15 00:00:00 CET 2025","effectiveDate": "Sat Jun 19 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,609 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 16 00:00:00 CET 2025","effectiveDate": "Sun Jun 20 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,618 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 17 00:00:00 CET 2025","effectiveDate": "Mon Jun 21 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,618 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 18 00:00:00 CET 2025","effectiveDate": "Tue Jun 22 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,619 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 19 00:00:00 CET 2025","effectiveDate": "Wed Jun 23 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,619 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 20 00:00:00 CET 2025","effectiveDate": "Thu Jun 24 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,619 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 21 00:00:00 CET 2025","effectiveDate": "Fri Jun 25 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,619 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 22 00:00:00 CET 2025","effectiveDate": "Sat Jun 26 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,619 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 23 00:00:00 CET 2025","effectiveDate": "Sun Jun 27 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,619 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 24 00:00:00 CET 2025","effectiveDate": "Mon Jun 28 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,619 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 25 00:00:00 CET 2025","effectiveDate": "Tue Jun 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,621 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 26 00:00:00 CET 2025","effectiveDate": "Wed Jun 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,637 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 27 00:00:00 CET 2025","effectiveDate": "Thu Jul 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,637 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 28 00:00:00 CET 2025","effectiveDate": "Fri Jul 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,638 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 29 00:00:00 CET 2025","effectiveDate": "Sat Jul 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,638 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 30 00:00:00 CET 2025","effectiveDate": "Sun Jul 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,638 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 31 00:00:00 CET 2025","effectiveDate": "Mon Jul 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,638 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 01 00:00:00 CET 2026","effectiveDate": "Tue Jul 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,638 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 02 00:00:00 CET 2026","effectiveDate": "Wed Jul 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,638 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 03 00:00:00 CET 2026","effectiveDate": "Thu Jul 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,638 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 04 00:00:00 CET 2026","effectiveDate": "Fri Jul 09 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,638 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 05 00:00:00 CET 2026","effectiveDate": "Sat Jul 10 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,650 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 06 00:00:00 CET 2026","effectiveDate": "Sun Jul 11 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,650 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 07 00:00:00 CET 2026","effectiveDate": "Mon Jul 12 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,650 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 08 00:00:00 CET 2026","effectiveDate": "Tue Jul 13 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,650 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 09 00:00:00 CET 2026","effectiveDate": "Wed Jul 14 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,650 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 10 00:00:00 CET 2026","effectiveDate": "Thu Jul 15 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,650 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 11 00:00:00 CET 2026","effectiveDate": "Fri Jul 16 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,650 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 12 00:00:00 CET 2026","effectiveDate": "Sat Jul 17 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,650 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 13 00:00:00 CET 2026","effectiveDate": "Sun Jul 18 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,650 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 14 00:00:00 CET 2026","effectiveDate": "Mon Jul 19 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,651 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 15 00:00:00 CET 2026","effectiveDate": "Tue Jul 20 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,660 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 16 00:00:00 CET 2026","effectiveDate": "Wed Jul 21 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,660 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 17 00:00:00 CET 2026","effectiveDate": "Thu Jul 22 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,660 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 18 00:00:00 CET 2026","effectiveDate": "Fri Jul 23 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,660 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 19 00:00:00 CET 2026","effectiveDate": "Sat Jul 24 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,660 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 20 00:00:00 CET 2026","effectiveDate": "Sun Jul 25 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,660 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 21 00:00:00 CET 2026","effectiveDate": "Mon Jul 26 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,660 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 22 00:00:00 CET 2026","effectiveDate": "Tue Jul 27 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,660 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 23 00:00:00 CET 2026","effectiveDate": "Wed Jul 28 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,660 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 24 00:00:00 CET 2026","effectiveDate": "Thu Jul 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,661 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 25 00:00:00 CET 2026","effectiveDate": "Fri Jul 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,672 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 26 00:00:00 CET 2026","effectiveDate": "Sat Jul 31 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,673 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 27 00:00:00 CET 2026","effectiveDate": "Sun Aug 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,673 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 28 00:00:00 CET 2026","effectiveDate": "Mon Aug 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,673 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 29 00:00:00 CET 2026","effectiveDate": "Tue Aug 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,673 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 30 00:00:00 CET 2026","effectiveDate": "Wed Aug 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,673 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 31 00:00:00 CET 2026","effectiveDate": "Thu Aug 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,673 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 01 00:00:00 CET 2026","effectiveDate": "Fri Aug 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,673 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 02 00:00:00 CET 2026","effectiveDate": "Sat Aug 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,674 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 03 00:00:00 CET 2026","effectiveDate": "Sun Aug 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,674 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 04 00:00:00 CET 2026","effectiveDate": "Mon Aug 09 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,682 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 05 00:00:00 CET 2026","effectiveDate": "Tue Aug 10 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,682 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 06 00:00:00 CET 2026","effectiveDate": "Wed Aug 11 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,682 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 07 00:00:00 CET 2026","effectiveDate": "Thu Aug 12 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,683 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 30 00:00:00 CET 2025","effectiveDate": "Fri Aug 13 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,683 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 01 00:00:00 CET 2025","effectiveDate": "Sat Aug 14 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,683 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 02 00:00:00 CET 2025","effectiveDate": "Sun Aug 15 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,683 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 03 00:00:00 CET 2025","effectiveDate": "Mon Aug 16 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,683 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 04 00:00:00 CET 2025","effectiveDate": "Tue Aug 17 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,683 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 05 00:00:00 CET 2025","effectiveDate": "Wed Aug 18 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,683 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 06 00:00:00 CET 2025","effectiveDate": "Thu Aug 19 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,692 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 07 00:00:00 CET 2025","effectiveDate": "Fri Aug 20 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,693 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 08 00:00:00 CET 2025","effectiveDate": "Sat Aug 21 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,693 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 09 00:00:00 CET 2025","effectiveDate": "Sun Aug 22 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,693 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 10 00:00:00 CET 2025","effectiveDate": "Mon Aug 23 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,693 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 11 00:00:00 CET 2025","effectiveDate": "Tue Aug 24 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,693 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 12 00:00:00 CET 2025","effectiveDate": "Wed Aug 25 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,693 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 13 00:00:00 CET 2025","effectiveDate": "Thu Aug 26 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,693 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 14 00:00:00 CET 2025","effectiveDate": "Fri Aug 27 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,694 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 15 00:00:00 CET 2025","effectiveDate": "Sat Aug 28 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,694 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 16 00:00:00 CET 2025","effectiveDate": "Sun Aug 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,705 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 17 00:00:00 CET 2025","effectiveDate": "Mon Aug 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,705 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 18 00:00:00 CET 2025","effectiveDate": "Tue Aug 31 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,706 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 19 00:00:00 CET 2025","effectiveDate": "Wed Sep 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,706 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 20 00:00:00 CET 2025","effectiveDate": "Thu Sep 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,706 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 21 00:00:00 CET 2025","effectiveDate": "Fri Sep 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,706 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 22 00:00:00 CET 2025","effectiveDate": "Sat Sep 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,706 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 23 00:00:00 CET 2025","effectiveDate": "Sun Sep 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,706 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 24 00:00:00 CET 2025","effectiveDate": "Mon Sep 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,706 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 25 00:00:00 CET 2025","effectiveDate": "Tue Sep 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,706 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 26 00:00:00 CET 2025","effectiveDate": "Wed Jun 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,716 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 27 00:00:00 CET 2025","effectiveDate": "Thu Jul 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,716 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 28 00:00:00 CET 2025","effectiveDate": "Fri Jul 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,717 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 29 00:00:00 CET 2025","effectiveDate": "Sat Jul 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,717 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 30 00:00:00 CET 2025","effectiveDate": "Sun Jul 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,717 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 31 00:00:00 CET 2025","effectiveDate": "Mon Jul 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,717 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 01 00:00:00 CET 2026","effectiveDate": "Tue Jul 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,718 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 02 00:00:00 CET 2026","effectiveDate": "Wed Jul 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,718 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 03 00:00:00 CET 2026","effectiveDate": "Thu Jul 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,718 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 04 00:00:00 CET 2026","effectiveDate": "Fri Jul 09 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,718 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 05 00:00:00 CET 2026","effectiveDate": "Sat Jul 10 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,731 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 06 00:00:00 CET 2026","effectiveDate": "Sun Jul 11 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,731 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 07 00:00:00 CET 2026","effectiveDate": "Mon Jul 12 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,731 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 08 00:00:00 CET 2026","effectiveDate": "Tue Jul 13 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,731 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 09 00:00:00 CET 2026","effectiveDate": "Wed Jul 14 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,731 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 10 00:00:00 CET 2026","effectiveDate": "Thu Jul 15 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,731 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 11 00:00:00 CET 2026","effectiveDate": "Fri Jul 16 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,732 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 12 00:00:00 CET 2026","effectiveDate": "Sat Jul 17 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,732 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 13 00:00:00 CET 2026","effectiveDate": "Sun Jul 18 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,732 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 14 00:00:00 CET 2026","effectiveDate": "Mon Jul 19 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,732 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 15 00:00:00 CET 2026","effectiveDate": "Tue Jul 20 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,740 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 16 00:00:00 CET 2026","effectiveDate": "Wed Jul 21 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,740 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 17 00:00:00 CET 2026","effectiveDate": "Thu Jul 22 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,741 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 18 00:00:00 CET 2026","effectiveDate": "Fri Jul 23 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,741 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 19 00:00:00 CET 2026","effectiveDate": "Sat Jul 24 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,741 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 20 00:00:00 CET 2026","effectiveDate": "Sun Jul 25 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,741 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 21 00:00:00 CET 2026","effectiveDate": "Mon Jul 26 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,741 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 22 00:00:00 CET 2026","effectiveDate": "Tue Jul 27 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,741 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 23 00:00:00 CET 2026","effectiveDate": "Wed Jul 28 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,741 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 24 00:00:00 CET 2026","effectiveDate": "Thu Jul 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,742 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 25 00:00:00 CET 2026","effectiveDate": "Fri Jul 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,752 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 26 00:00:00 CET 2026","effectiveDate": "Sat Jul 31 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,753 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 27 00:00:00 CET 2026","effectiveDate": "Sun Aug 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,753 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 28 00:00:00 CET 2026","effectiveDate": "Mon Aug 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,753 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 29 00:00:00 CET 2026","effectiveDate": "Tue Aug 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,753 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 30 00:00:00 CET 2026","effectiveDate": "Wed Aug 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,753 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 31 00:00:00 CET 2026","effectiveDate": "Thu Aug 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,753 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 01 00:00:00 CET 2026","effectiveDate": "Fri Aug 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,753 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 02 00:00:00 CET 2026","effectiveDate": "Sat Aug 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,753 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 03 00:00:00 CET 2026","effectiveDate": "Sun Aug 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,753 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 04 00:00:00 CET 2026","effectiveDate": "Mon Aug 09 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,763 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 05 00:00:00 CET 2026","effectiveDate": "Tue Aug 10 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,763 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 06 00:00:00 CET 2026","effectiveDate": "Wed Aug 11 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,763 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 07 00:00:00 CET 2026","effectiveDate": "Thu Aug 12 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,763 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 08 00:00:00 CET 2026","effectiveDate": "Fri Aug 13 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,763 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 09 00:00:00 CET 2026","effectiveDate": "Sat Aug 14 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,764 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 10 00:00:00 CET 2026","effectiveDate": "Sun Aug 15 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,764 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 11 00:00:00 CET 2026","effectiveDate": "Mon Aug 16 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,764 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 12 00:00:00 CET 2026","effectiveDate": "Tue Aug 17 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,764 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 13 00:00:00 CET 2026","effectiveDate": "Wed Aug 18 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,764 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 14 00:00:00 CET 2026","effectiveDate": "Thu Aug 19 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,773 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 15 00:00:00 CET 2026","effectiveDate": "Fri Aug 20 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,773 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 16 00:00:00 CET 2026","effectiveDate": "Sat Aug 21 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,773 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 17 00:00:00 CET 2026","effectiveDate": "Sun Aug 22 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,774 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 18 00:00:00 CET 2026","effectiveDate": "Mon Aug 23 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,774 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 19 00:00:00 CET 2026","effectiveDate": "Tue Aug 24 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,774 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 20 00:00:00 CET 2026","effectiveDate": "Wed Aug 25 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,774 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 21 00:00:00 CET 2026","effectiveDate": "Thu Aug 26 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,774 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 22 00:00:00 CET 2026","effectiveDate": "Fri Aug 27 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,774 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 23 00:00:00 CET 2026","effectiveDate": "Sat Aug 28 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,775 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 24 00:00:00 CET 2026","effectiveDate": "Sun Aug 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,785 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 25 00:00:00 CET 2026","effectiveDate": "Mon Aug 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,785 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 26 00:00:00 CET 2026","effectiveDate": "Tue Aug 31 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,785 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 27 00:00:00 CET 2026","effectiveDate": "Wed Sep 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,785 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 28 00:00:00 CET 2026","effectiveDate": "Thu Sep 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,785 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 01 00:00:00 CET 2026","effectiveDate": "Fri Sep 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,785 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 02 00:00:00 CET 2026","effectiveDate": "Sat Sep 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,785 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 03 00:00:00 CET 2026","effectiveDate": "Sun Sep 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,785 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 04 00:00:00 CET 2026","effectiveDate": "Mon Sep 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,786 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 05 00:00:00 CET 2026","effectiveDate": "Tue Sep 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,786 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 06 00:00:00 CET 2026","effectiveDate": "Wed Sep 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,797 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 07 00:00:00 CET 2026","effectiveDate": "Thu Sep 09 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,797 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 08 00:00:00 CET 2026","effectiveDate": "Fri Sep 10 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,797 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 09 00:00:00 CET 2026","effectiveDate": "Sat Sep 11 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,797 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 31 00:00:00 CET 2025","effectiveDate": "Sun Sep 12 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,798 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 01 00:00:00 CET 2026","effectiveDate": "Mon Sep 13 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,798 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 02 00:00:00 CET 2026","effectiveDate": "Tue Sep 14 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,798 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 03 00:00:00 CET 2026","effectiveDate": "Wed Sep 15 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,798 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 04 00:00:00 CET 2026","effectiveDate": "Thu Sep 16 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,798 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 05 00:00:00 CET 2026","effectiveDate": "Fri Sep 17 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,798 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 06 00:00:00 CET 2026","effectiveDate": "Sat Sep 18 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,809 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 07 00:00:00 CET 2026","effectiveDate": "Sun Sep 19 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,809 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 08 00:00:00 CET 2026","effectiveDate": "Mon Sep 20 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,809 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 09 00:00:00 CET 2026","effectiveDate": "Tue Sep 21 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,809 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 10 00:00:00 CET 2026","effectiveDate": "Wed Sep 22 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,809 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 11 00:00:00 CET 2026","effectiveDate": "Thu Sep 23 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,809 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 12 00:00:00 CET 2026","effectiveDate": "Fri Sep 24 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,809 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 13 00:00:00 CET 2026","effectiveDate": "Sat Sep 25 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,809 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 14 00:00:00 CET 2026","effectiveDate": "Sun Sep 26 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,810 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 15 00:00:00 CET 2026","effectiveDate": "Mon Sep 27 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,810 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 16 00:00:00 CET 2026","effectiveDate": "Tue Sep 28 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,820 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 17 00:00:00 CET 2026","effectiveDate": "Wed Sep 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,820 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 18 00:00:00 CET 2026","effectiveDate": "Thu Sep 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,820 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 19 00:00:00 CET 2026","effectiveDate": "Fri Oct 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,821 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 20 00:00:00 CET 2026","effectiveDate": "Sat Oct 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,821 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 21 00:00:00 CET 2026","effectiveDate": "Sun Oct 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,821 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 22 00:00:00 CET 2026","effectiveDate": "Mon Oct 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,821 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 23 00:00:00 CET 2026","effectiveDate": "Tue Oct 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,821 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 24 00:00:00 CET 2026","effectiveDate": "Wed Oct 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,821 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 25 00:00:00 CET 2026","effectiveDate": "Thu Oct 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,821 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 26 00:00:00 CET 2026","effectiveDate": "Sat Jul 31 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,831 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 27 00:00:00 CET 2026","effectiveDate": "Sun Aug 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,832 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 28 00:00:00 CET 2026","effectiveDate": "Mon Aug 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,832 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 29 00:00:00 CET 2026","effectiveDate": "Tue Aug 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,832 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 30 00:00:00 CET 2026","effectiveDate": "Wed Aug 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,832 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 31 00:00:00 CET 2026","effectiveDate": "Thu Aug 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,832 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 01 00:00:00 CET 2026","effectiveDate": "Fri Aug 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,833 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 02 00:00:00 CET 2026","effectiveDate": "Sat Aug 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,833 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 03 00:00:00 CET 2026","effectiveDate": "Sun Aug 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,833 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 04 00:00:00 CET 2026","effectiveDate": "Mon Aug 09 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,833 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 05 00:00:00 CET 2026","effectiveDate": "Tue Aug 10 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,842 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 06 00:00:00 CET 2026","effectiveDate": "Wed Aug 11 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,843 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 07 00:00:00 CET 2026","effectiveDate": "Thu Aug 12 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,843 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 08 00:00:00 CET 2026","effectiveDate": "Fri Aug 13 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,843 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 09 00:00:00 CET 2026","effectiveDate": "Sat Aug 14 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,843 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 10 00:00:00 CET 2026","effectiveDate": "Sun Aug 15 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,843 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 11 00:00:00 CET 2026","effectiveDate": "Mon Aug 16 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,843 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 12 00:00:00 CET 2026","effectiveDate": "Tue Aug 17 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,843 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 13 00:00:00 CET 2026","effectiveDate": "Wed Aug 18 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,843 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 14 00:00:00 CET 2026","effectiveDate": "Thu Aug 19 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,843 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 15 00:00:00 CET 2026","effectiveDate": "Fri Aug 20 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,855 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 16 00:00:00 CET 2026","effectiveDate": "Sat Aug 21 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,855 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 17 00:00:00 CET 2026","effectiveDate": "Sun Aug 22 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,855 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 18 00:00:00 CET 2026","effectiveDate": "Mon Aug 23 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,855 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 19 00:00:00 CET 2026","effectiveDate": "Tue Aug 24 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,855 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 20 00:00:00 CET 2026","effectiveDate": "Wed Aug 25 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,855 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 21 00:00:00 CET 2026","effectiveDate": "Thu Aug 26 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,855 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 22 00:00:00 CET 2026","effectiveDate": "Fri Aug 27 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,857 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 23 00:00:00 CET 2026","effectiveDate": "Sat Aug 28 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,857 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 24 00:00:00 CET 2026","effectiveDate": "Sun Aug 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,857 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 25 00:00:00 CET 2026","effectiveDate": "Mon Aug 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,865 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 26 00:00:00 CET 2026","effectiveDate": "Tue Aug 31 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,865 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 27 00:00:00 CET 2026","effectiveDate": "Wed Sep 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,865 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 28 00:00:00 CET 2026","effectiveDate": "Thu Sep 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,865 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 01 00:00:00 CET 2026","effectiveDate": "Fri Sep 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,865 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 02 00:00:00 CET 2026","effectiveDate": "Sat Sep 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,865 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 03 00:00:00 CET 2026","effectiveDate": "Sun Sep 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,865 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 04 00:00:00 CET 2026","effectiveDate": "Mon Sep 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,865 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 05 00:00:00 CET 2026","effectiveDate": "Tue Sep 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,866 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 06 00:00:00 CET 2026","effectiveDate": "Wed Sep 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,866 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 07 00:00:00 CET 2026","effectiveDate": "Thu Sep 09 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,875 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 08 00:00:00 CET 2026","effectiveDate": "Fri Sep 10 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,875 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 09 00:00:00 CET 2026","effectiveDate": "Sat Sep 11 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,875 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 10 00:00:00 CET 2026","effectiveDate": "Sun Sep 12 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,875 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 11 00:00:00 CET 2026","effectiveDate": "Mon Sep 13 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,876 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 12 00:00:00 CET 2026","effectiveDate": "Tue Sep 14 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,876 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 13 00:00:00 CET 2026","effectiveDate": "Wed Sep 15 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,876 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 14 00:00:00 CET 2026","effectiveDate": "Thu Sep 16 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,876 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 15 00:00:00 CET 2026","effectiveDate": "Fri Sep 17 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,876 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 16 00:00:00 CET 2026","effectiveDate": "Sat Sep 18 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,876 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 17 00:00:00 CET 2026","effectiveDate": "Sun Sep 19 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,886 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 18 00:00:00 CET 2026","effectiveDate": "Mon Sep 20 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,886 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 19 00:00:00 CET 2026","effectiveDate": "Tue Sep 21 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,886 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 20 00:00:00 CET 2026","effectiveDate": "Wed Sep 22 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,886 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 21 00:00:00 CET 2026","effectiveDate": "Thu Sep 23 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,887 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 22 00:00:00 CET 2026","effectiveDate": "Fri Sep 24 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,887 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 23 00:00:00 CET 2026","effectiveDate": "Sat Sep 25 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,887 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 24 00:00:00 CET 2026","effectiveDate": "Sun Sep 26 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,887 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 25 00:00:00 CET 2026","effectiveDate": "Mon Sep 27 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,887 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 26 00:00:00 CET 2026","effectiveDate": "Tue Sep 28 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,888 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 27 00:00:00 CET 2026","effectiveDate": "Wed Sep 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,899 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 28 00:00:00 CET 2026","effectiveDate": "Thu Sep 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,899 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 29 00:00:00 CET 2026","effectiveDate": "Fri Oct 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,899 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 30 00:00:00 CEST 2026","effectiveDate": "Sat Oct 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,900 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 31 00:00:00 CEST 2026","effectiveDate": "Sun Oct 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,900 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 01 00:00:00 CEST 2026","effectiveDate": "Mon Oct 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,900 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 02 00:00:00 CEST 2026","effectiveDate": "Tue Oct 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,900 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 03 00:00:00 CEST 2026","effectiveDate": "Wed Oct 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,900 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 04 00:00:00 CEST 2026","effectiveDate": "Thu Oct 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,900 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 05 00:00:00 CEST 2026","effectiveDate": "Fri Oct 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,900 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 06 00:00:00 CEST 2026","effectiveDate": "Sat Oct 09 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,911 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 07 00:00:00 CEST 2026","effectiveDate": "Sun Oct 10 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,911 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 08 00:00:00 CEST 2026","effectiveDate": "Mon Oct 11 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,911 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 09 00:00:00 CEST 2026","effectiveDate": "Tue Oct 12 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,911 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 31 00:00:00 CET 2026","effectiveDate": "Wed Oct 13 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,911 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 01 00:00:00 CET 2026","effectiveDate": "Thu Oct 14 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,911 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 02 00:00:00 CET 2026","effectiveDate": "Fri Oct 15 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,912 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 03 00:00:00 CET 2026","effectiveDate": "Sat Oct 16 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,912 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 04 00:00:00 CET 2026","effectiveDate": "Sun Oct 17 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,912 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 05 00:00:00 CET 2026","effectiveDate": "Mon Oct 18 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,912 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 06 00:00:00 CET 2026","effectiveDate": "Tue Oct 19 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,919 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 07 00:00:00 CET 2026","effectiveDate": "Wed Oct 20 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,920 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 08 00:00:00 CET 2026","effectiveDate": "Thu Oct 21 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,920 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 09 00:00:00 CET 2026","effectiveDate": "Fri Oct 22 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,920 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 10 00:00:00 CET 2026","effectiveDate": "Sat Oct 23 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,920 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 11 00:00:00 CET 2026","effectiveDate": "Sun Oct 24 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,920 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 12 00:00:00 CET 2026","effectiveDate": "Mon Oct 25 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,920 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 13 00:00:00 CET 2026","effectiveDate": "Tue Oct 26 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,920 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 14 00:00:00 CET 2026","effectiveDate": "Wed Oct 27 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,920 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 15 00:00:00 CET 2026","effectiveDate": "Thu Oct 28 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,920 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 16 00:00:00 CET 2026","effectiveDate": "Fri Oct 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,927 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 17 00:00:00 CET 2026","effectiveDate": "Sat Oct 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,927 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 18 00:00:00 CET 2026","effectiveDate": "Sun Oct 31 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,928 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 19 00:00:00 CET 2026","effectiveDate": "Mon Nov 01 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,928 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 20 00:00:00 CET 2026","effectiveDate": "Tue Nov 02 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,928 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 21 00:00:00 CET 2026","effectiveDate": "Wed Nov 03 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,928 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 22 00:00:00 CET 2026","effectiveDate": "Thu Nov 04 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,928 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 23 00:00:00 CET 2026","effectiveDate": "Fri Nov 05 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,928 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 24 00:00:00 CET 2026","effectiveDate": "Sat Nov 06 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,928 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 25 00:00:00 CET 2026","effectiveDate": "Sun Nov 07 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,928 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 26 00:00:00 CET 2026","effectiveDate": "Tue Aug 31 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,937 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 27 00:00:00 CET 2026","effectiveDate": "Wed Sep 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,937 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 28 00:00:00 CET 2026","effectiveDate": "Thu Sep 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,937 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 01 00:00:00 CET 2026","effectiveDate": "Fri Sep 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,937 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 02 00:00:00 CET 2026","effectiveDate": "Sat Sep 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,937 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 03 00:00:00 CET 2026","effectiveDate": "Sun Sep 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,937 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 04 00:00:00 CET 2026","effectiveDate": "Mon Sep 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,937 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 05 00:00:00 CET 2026","effectiveDate": "Tue Sep 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,937 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 06 00:00:00 CET 2026","effectiveDate": "Wed Sep 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,937 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 07 00:00:00 CET 2026","effectiveDate": "Thu Sep 09 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,938 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 08 00:00:00 CET 2026","effectiveDate": "Fri Sep 10 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,946 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 09 00:00:00 CET 2026","effectiveDate": "Sat Sep 11 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,946 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 10 00:00:00 CET 2026","effectiveDate": "Sun Sep 12 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,946 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 11 00:00:00 CET 2026","effectiveDate": "Mon Sep 13 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,946 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 12 00:00:00 CET 2026","effectiveDate": "Tue Sep 14 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,946 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 13 00:00:00 CET 2026","effectiveDate": "Wed Sep 15 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,946 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 14 00:00:00 CET 2026","effectiveDate": "Thu Sep 16 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,948 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 15 00:00:00 CET 2026","effectiveDate": "Fri Sep 17 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,948 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 16 00:00:00 CET 2026","effectiveDate": "Sat Sep 18 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,948 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 17 00:00:00 CET 2026","effectiveDate": "Sun Sep 19 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,948 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 18 00:00:00 CET 2026","effectiveDate": "Mon Sep 20 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,956 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 19 00:00:00 CET 2026","effectiveDate": "Tue Sep 21 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,956 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 20 00:00:00 CET 2026","effectiveDate": "Wed Sep 22 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,956 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 21 00:00:00 CET 2026","effectiveDate": "Thu Sep 23 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,957 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 22 00:00:00 CET 2026","effectiveDate": "Fri Sep 24 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,957 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 23 00:00:00 CET 2026","effectiveDate": "Sat Sep 25 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,957 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 24 00:00:00 CET 2026","effectiveDate": "Sun Sep 26 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,957 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 25 00:00:00 CET 2026","effectiveDate": "Mon Sep 27 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,957 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 26 00:00:00 CET 2026","effectiveDate": "Tue Sep 28 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,957 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 27 00:00:00 CET 2026","effectiveDate": "Wed Sep 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,957 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 28 00:00:00 CET 2026","effectiveDate": "Thu Sep 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,965 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 29 00:00:00 CET 2026","effectiveDate": "Fri Oct 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,965 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 30 00:00:00 CEST 2026","effectiveDate": "Sat Oct 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,965 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 31 00:00:00 CEST 2026","effectiveDate": "Sun Oct 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,965 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 01 00:00:00 CEST 2026","effectiveDate": "Mon Oct 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,965 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 02 00:00:00 CEST 2026","effectiveDate": "Tue Oct 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,966 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 03 00:00:00 CEST 2026","effectiveDate": "Wed Oct 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,966 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 04 00:00:00 CEST 2026","effectiveDate": "Thu Oct 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,966 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 05 00:00:00 CEST 2026","effectiveDate": "Fri Oct 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,966 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 06 00:00:00 CEST 2026","effectiveDate": "Sat Oct 09 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,966 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 07 00:00:00 CEST 2026","effectiveDate": "Sun Oct 10 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,973 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 08 00:00:00 CEST 2026","effectiveDate": "Mon Oct 11 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,973 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 09 00:00:00 CEST 2026","effectiveDate": "Tue Oct 12 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,974 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 10 00:00:00 CEST 2026","effectiveDate": "Wed Oct 13 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,974 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 11 00:00:00 CEST 2026","effectiveDate": "Thu Oct 14 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,974 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 12 00:00:00 CEST 2026","effectiveDate": "Fri Oct 15 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,974 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 13 00:00:00 CEST 2026","effectiveDate": "Sat Oct 16 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,974 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 14 00:00:00 CEST 2026","effectiveDate": "Sun Oct 17 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,974 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 15 00:00:00 CEST 2026","effectiveDate": "Mon Oct 18 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,974 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 16 00:00:00 CEST 2026","effectiveDate": "Tue Oct 19 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,974 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 17 00:00:00 CEST 2026","effectiveDate": "Wed Oct 20 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,982 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 18 00:00:00 CEST 2026","effectiveDate": "Thu Oct 21 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,982 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 19 00:00:00 CEST 2026","effectiveDate": "Fri Oct 22 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,982 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 20 00:00:00 CEST 2026","effectiveDate": "Sat Oct 23 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,982 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 21 00:00:00 CEST 2026","effectiveDate": "Sun Oct 24 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,982 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 22 00:00:00 CEST 2026","effectiveDate": "Mon Oct 25 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,982 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 23 00:00:00 CEST 2026","effectiveDate": "Tue Oct 26 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,982 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 24 00:00:00 CEST 2026","effectiveDate": "Wed Oct 27 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,982 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 25 00:00:00 CEST 2026","effectiveDate": "Thu Oct 28 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,982 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 26 00:00:00 CEST 2026","effectiveDate": "Fri Oct 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,982 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 27 00:00:00 CEST 2026","effectiveDate": "Sat Oct 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,989 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 28 00:00:00 CEST 2026","effectiveDate": "Sun Oct 31 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:12,989 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 29 00:00:00 CEST 2026","effectiveDate": "Mon Nov 01 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,989 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 30 00:00:00 CEST 2026","effectiveDate": "Tue Nov 02 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,989 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 01 00:00:00 CEST 2026","effectiveDate": "Wed Nov 03 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,989 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 02 00:00:00 CEST 2026","effectiveDate": "Thu Nov 04 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,989 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 03 00:00:00 CEST 2026","effectiveDate": "Fri Nov 05 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,989 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 04 00:00:00 CEST 2026","effectiveDate": "Sat Nov 06 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,990 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 05 00:00:00 CEST 2026","effectiveDate": "Sun Nov 07 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,990 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 06 00:00:00 CEST 2026","effectiveDate": "Mon Nov 08 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,990 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 07 00:00:00 CEST 2026","effectiveDate": "Tue Nov 09 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,996 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 08 00:00:00 CEST 2026","effectiveDate": "Wed Nov 10 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,996 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 09 00:00:00 CEST 2026","effectiveDate": "Thu Nov 11 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,997 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 10 00:00:00 CEST 2026","effectiveDate": "Fri Nov 12 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,997 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 28 00:00:00 CET 2026","effectiveDate": "Sat Nov 13 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,997 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 01 00:00:00 CET 2026","effectiveDate": "Sun Nov 14 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,997 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 02 00:00:00 CET 2026","effectiveDate": "Mon Nov 15 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,997 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 03 00:00:00 CET 2026","effectiveDate": "Tue Nov 16 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,997 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 04 00:00:00 CET 2026","effectiveDate": "Wed Nov 17 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,997 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 05 00:00:00 CET 2026","effectiveDate": "Thu Nov 18 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:12,997 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 06 00:00:00 CET 2026","effectiveDate": "Fri Nov 19 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,004 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 07 00:00:00 CET 2026","effectiveDate": "Sat Nov 20 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,004 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 08 00:00:00 CET 2026","effectiveDate": "Sun Nov 21 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,004 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 09 00:00:00 CET 2026","effectiveDate": "Mon Nov 22 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,004 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 10 00:00:00 CET 2026","effectiveDate": "Tue Nov 23 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,006 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 11 00:00:00 CET 2026","effectiveDate": "Wed Nov 24 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,006 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 12 00:00:00 CET 2026","effectiveDate": "Thu Nov 25 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,006 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 13 00:00:00 CET 2026","effectiveDate": "Fri Nov 26 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,006 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 14 00:00:00 CET 2026","effectiveDate": "Sat Nov 27 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,006 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 15 00:00:00 CET 2026","effectiveDate": "Sun Nov 28 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,006 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 16 00:00:00 CET 2026","effectiveDate": "Mon Nov 29 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,014 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 17 00:00:00 CET 2026","effectiveDate": "Tue Nov 30 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,015 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 18 00:00:00 CET 2026","effectiveDate": "Wed Dec 01 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,015 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 19 00:00:00 CET 2026","effectiveDate": "Thu Dec 02 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,015 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 20 00:00:00 CET 2026","effectiveDate": "Fri Dec 03 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,015 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 21 00:00:00 CET 2026","effectiveDate": "Sat Dec 04 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,015 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 22 00:00:00 CET 2026","effectiveDate": "Sun Dec 05 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,015 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 23 00:00:00 CET 2026","effectiveDate": "Mon Dec 06 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,015 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 24 00:00:00 CET 2026","effectiveDate": "Tue Dec 07 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,015 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 25 00:00:00 CET 2026","effectiveDate": "Wed Dec 08 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,016 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 26 00:00:00 CET 2026","effectiveDate": "Thu Sep 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,022 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 27 00:00:00 CET 2026","effectiveDate": "Fri Oct 01 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,022 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 28 00:00:00 CET 2026","effectiveDate": "Sat Oct 02 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,023 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 29 00:00:00 CET 2026","effectiveDate": "Sun Oct 03 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,023 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 30 00:00:00 CEST 2026","effectiveDate": "Mon Oct 04 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,023 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 31 00:00:00 CEST 2026","effectiveDate": "Tue Oct 05 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,023 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 01 00:00:00 CEST 2026","effectiveDate": "Wed Oct 06 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,023 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 02 00:00:00 CEST 2026","effectiveDate": "Thu Oct 07 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,023 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 03 00:00:00 CEST 2026","effectiveDate": "Fri Oct 08 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,023 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 04 00:00:00 CEST 2026","effectiveDate": "Sat Oct 09 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,023 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 05 00:00:00 CEST 2026","effectiveDate": "Sun Oct 10 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,034 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 06 00:00:00 CEST 2026","effectiveDate": "Mon Oct 11 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,034 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 07 00:00:00 CEST 2026","effectiveDate": "Tue Oct 12 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,034 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 08 00:00:00 CEST 2026","effectiveDate": "Wed Oct 13 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,034 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 09 00:00:00 CEST 2026","effectiveDate": "Thu Oct 14 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,034 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 10 00:00:00 CEST 2026","effectiveDate": "Fri Oct 15 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,034 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 11 00:00:00 CEST 2026","effectiveDate": "Sat Oct 16 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,034 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 12 00:00:00 CEST 2026","effectiveDate": "Sun Oct 17 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,035 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 13 00:00:00 CEST 2026","effectiveDate": "Mon Oct 18 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,035 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 14 00:00:00 CEST 2026","effectiveDate": "Tue Oct 19 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,035 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 15 00:00:00 CEST 2026","effectiveDate": "Wed Oct 20 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,044 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 16 00:00:00 CEST 2026","effectiveDate": "Thu Oct 21 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,044 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 17 00:00:00 CEST 2026","effectiveDate": "Fri Oct 22 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,044 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 18 00:00:00 CEST 2026","effectiveDate": "Sat Oct 23 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,044 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 19 00:00:00 CEST 2026","effectiveDate": "Sun Oct 24 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,044 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 20 00:00:00 CEST 2026","effectiveDate": "Mon Oct 25 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,044 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 21 00:00:00 CEST 2026","effectiveDate": "Tue Oct 26 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,045 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 22 00:00:00 CEST 2026","effectiveDate": "Wed Oct 27 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,045 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 23 00:00:00 CEST 2026","effectiveDate": "Thu Oct 28 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,045 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 24 00:00:00 CEST 2026","effectiveDate": "Fri Oct 29 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,045 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 25 00:00:00 CEST 2026","effectiveDate": "Sat Oct 30 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,053 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 26 00:00:00 CEST 2026","effectiveDate": "Sun Oct 31 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,054 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 27 00:00:00 CEST 2026","effectiveDate": "Mon Nov 01 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,054 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 28 00:00:00 CEST 2026","effectiveDate": "Tue Nov 02 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,054 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 29 00:00:00 CEST 2026","effectiveDate": "Wed Nov 03 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,054 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 30 00:00:00 CEST 2026","effectiveDate": "Thu Nov 04 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,054 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 01 00:00:00 CEST 2026","effectiveDate": "Fri Nov 05 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,054 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 02 00:00:00 CEST 2026","effectiveDate": "Sat Nov 06 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,054 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 03 00:00:00 CEST 2026","effectiveDate": "Sun Nov 07 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,054 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 04 00:00:00 CEST 2026","effectiveDate": "Mon Nov 08 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,054 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 05 00:00:00 CEST 2026","effectiveDate": "Tue Nov 09 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,061 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 06 00:00:00 CEST 2026","effectiveDate": "Wed Nov 10 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,062 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 07 00:00:00 CEST 2026","effectiveDate": "Thu Nov 11 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,062 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 08 00:00:00 CEST 2026","effectiveDate": "Fri Nov 12 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,062 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 09 00:00:00 CEST 2026","effectiveDate": "Sat Nov 13 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,062 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 10 00:00:00 CEST 2026","effectiveDate": "Sun Nov 14 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,062 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 11 00:00:00 CEST 2026","effectiveDate": "Mon Nov 15 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,062 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 12 00:00:00 CEST 2026","effectiveDate": "Tue Nov 16 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,063 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 13 00:00:00 CEST 2026","effectiveDate": "Wed Nov 17 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,063 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 14 00:00:00 CEST 2026","effectiveDate": "Thu Nov 18 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,063 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 15 00:00:00 CEST 2026","effectiveDate": "Fri Nov 19 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,070 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 16 00:00:00 CEST 2026","effectiveDate": "Sat Nov 20 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,071 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 17 00:00:00 CEST 2026","effectiveDate": "Sun Nov 21 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,071 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 18 00:00:00 CEST 2026","effectiveDate": "Mon Nov 22 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,071 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 19 00:00:00 CEST 2026","effectiveDate": "Tue Nov 23 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,071 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 20 00:00:00 CEST 2026","effectiveDate": "Wed Nov 24 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,071 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 21 00:00:00 CEST 2026","effectiveDate": "Thu Nov 25 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,072 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 22 00:00:00 CEST 2026","effectiveDate": "Fri Nov 26 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,072 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 23 00:00:00 CEST 2026","effectiveDate": "Sat Nov 27 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,072 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 24 00:00:00 CEST 2026","effectiveDate": "Sun Nov 28 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,072 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 25 00:00:00 CEST 2026","effectiveDate": "Mon Nov 29 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,081 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 26 00:00:00 CEST 2026","effectiveDate": "Tue Nov 30 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,081 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 27 00:00:00 CEST 2026","effectiveDate": "Wed Dec 01 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,081 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 28 00:00:00 CEST 2026","effectiveDate": "Thu Dec 02 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,081 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 29 00:00:00 CEST 2026","effectiveDate": "Fri Dec 03 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,081 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 30 00:00:00 CEST 2026","effectiveDate": "Sat Dec 04 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,081 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 31 00:00:00 CEST 2026","effectiveDate": "Sun Dec 05 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,081 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 01 00:00:00 CEST 2026","effectiveDate": "Mon Dec 06 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,081 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 02 00:00:00 CEST 2026","effectiveDate": "Tue Dec 07 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,082 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 03 00:00:00 CEST 2026","effectiveDate": "Wed Dec 08 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,082 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 04 00:00:00 CEST 2026","effectiveDate": "Thu Dec 09 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,092 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 05 00:00:00 CEST 2026","effectiveDate": "Fri Dec 10 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,092 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 06 00:00:00 CEST 2026","effectiveDate": "Sat Dec 11 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,093 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 07 00:00:00 CEST 2026","effectiveDate": "Sun Dec 12 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,093 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 31 00:00:00 CEST 2026","effectiveDate": "Mon Dec 13 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,093 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 01 00:00:00 CEST 2026","effectiveDate": "Tue Dec 14 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,093 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 02 00:00:00 CEST 2026","effectiveDate": "Wed Dec 15 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,093 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 03 00:00:00 CEST 2026","effectiveDate": "Thu Dec 16 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,094 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 04 00:00:00 CEST 2026","effectiveDate": "Fri Dec 17 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,094 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 05 00:00:00 CEST 2026","effectiveDate": "Sat Dec 18 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,094 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 06 00:00:00 CEST 2026","effectiveDate": "Sun Dec 19 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,106 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 07 00:00:00 CEST 2026","effectiveDate": "Mon Dec 20 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,106 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 08 00:00:00 CEST 2026","effectiveDate": "Tue Dec 21 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,106 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 09 00:00:00 CEST 2026","effectiveDate": "Wed Dec 22 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,106 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 10 00:00:00 CEST 2026","effectiveDate": "Thu Dec 23 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,107 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 11 00:00:00 CEST 2026","effectiveDate": "Fri Dec 24 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,107 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 12 00:00:00 CEST 2026","effectiveDate": "Sat Dec 25 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,107 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 13 00:00:00 CEST 2026","effectiveDate": "Sun Dec 26 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,107 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 14 00:00:00 CEST 2026","effectiveDate": "Mon Dec 27 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,107 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 15 00:00:00 CEST 2026","effectiveDate": "Tue Dec 28 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,107 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 16 00:00:00 CEST 2026","effectiveDate": "Wed Dec 29 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,114 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 17 00:00:00 CEST 2026","effectiveDate": "Thu Dec 30 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,115 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 18 00:00:00 CEST 2026","effectiveDate": "Fri Dec 31 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,115 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 19 00:00:00 CEST 2026","effectiveDate": "Sat Jan 01 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,115 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 20 00:00:00 CEST 2026","effectiveDate": "Sun Jan 02 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,115 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 21 00:00:00 CEST 2026","effectiveDate": "Mon Jan 03 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,116 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 22 00:00:00 CEST 2026","effectiveDate": "Tue Jan 04 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,116 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 23 00:00:00 CEST 2026","effectiveDate": "Wed Jan 05 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,116 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 24 00:00:00 CEST 2026","effectiveDate": "Thu Jan 06 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,116 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 25 00:00:00 CEST 2026","effectiveDate": "Fri Jan 07 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,116 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 26 00:00:00 CEST 2026","effectiveDate": "Sun Oct 31 00:00:00 CEST 2027"
	  }]
})
2023-04-15 17:23:13,126 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 27 00:00:00 CEST 2026","effectiveDate": "Mon Nov 01 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,127 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 28 00:00:00 CEST 2026","effectiveDate": "Tue Nov 02 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,127 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 29 00:00:00 CEST 2026","effectiveDate": "Wed Nov 03 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,127 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 30 00:00:00 CEST 2026","effectiveDate": "Thu Nov 04 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,127 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 01 00:00:00 CEST 2026","effectiveDate": "Fri Nov 05 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,127 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 02 00:00:00 CEST 2026","effectiveDate": "Sat Nov 06 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,127 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 03 00:00:00 CEST 2026","effectiveDate": "Sun Nov 07 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,128 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 04 00:00:00 CEST 2026","effectiveDate": "Mon Nov 08 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,128 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 05 00:00:00 CEST 2026","effectiveDate": "Tue Nov 09 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,128 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 06 00:00:00 CEST 2026","effectiveDate": "Wed Nov 10 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,137 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 07 00:00:00 CEST 2026","effectiveDate": "Thu Nov 11 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,138 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 08 00:00:00 CEST 2026","effectiveDate": "Fri Nov 12 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,138 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 09 00:00:00 CEST 2026","effectiveDate": "Sat Nov 13 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,138 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 10 00:00:00 CEST 2026","effectiveDate": "Sun Nov 14 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,138 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 11 00:00:00 CEST 2026","effectiveDate": "Mon Nov 15 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,139 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 12 00:00:00 CEST 2026","effectiveDate": "Tue Nov 16 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,139 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 13 00:00:00 CEST 2026","effectiveDate": "Wed Nov 17 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,139 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 14 00:00:00 CEST 2026","effectiveDate": "Thu Nov 18 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,139 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 15 00:00:00 CEST 2026","effectiveDate": "Fri Nov 19 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,139 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 16 00:00:00 CEST 2026","effectiveDate": "Sat Nov 20 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,150 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 17 00:00:00 CEST 2026","effectiveDate": "Sun Nov 21 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,151 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 18 00:00:00 CEST 2026","effectiveDate": "Mon Nov 22 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,151 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 19 00:00:00 CEST 2026","effectiveDate": "Tue Nov 23 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,152 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 20 00:00:00 CEST 2026","effectiveDate": "Wed Nov 24 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,152 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 21 00:00:00 CEST 2026","effectiveDate": "Thu Nov 25 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,152 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 22 00:00:00 CEST 2026","effectiveDate": "Fri Nov 26 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,152 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 23 00:00:00 CEST 2026","effectiveDate": "Sat Nov 27 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,152 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 24 00:00:00 CEST 2026","effectiveDate": "Sun Nov 28 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,152 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 25 00:00:00 CEST 2026","effectiveDate": "Mon Nov 29 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,152 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 26 00:00:00 CEST 2026","effectiveDate": "Tue Nov 30 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,163 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 27 00:00:00 CEST 2026","effectiveDate": "Wed Dec 01 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,163 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 28 00:00:00 CEST 2026","effectiveDate": "Thu Dec 02 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,164 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 29 00:00:00 CEST 2026","effectiveDate": "Fri Dec 03 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,164 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 30 00:00:00 CEST 2026","effectiveDate": "Sat Dec 04 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,164 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 31 00:00:00 CEST 2026","effectiveDate": "Sun Dec 05 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,164 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 01 00:00:00 CEST 2026","effectiveDate": "Mon Dec 06 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,164 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 02 00:00:00 CEST 2026","effectiveDate": "Tue Dec 07 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,164 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 03 00:00:00 CEST 2026","effectiveDate": "Wed Dec 08 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,164 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 04 00:00:00 CEST 2026","effectiveDate": "Thu Dec 09 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,165 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 05 00:00:00 CEST 2026","effectiveDate": "Fri Dec 10 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,176 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 06 00:00:00 CEST 2026","effectiveDate": "Sat Dec 11 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,176 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 07 00:00:00 CEST 2026","effectiveDate": "Sun Dec 12 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,176 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 08 00:00:00 CEST 2026","effectiveDate": "Mon Dec 13 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,177 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 09 00:00:00 CEST 2026","effectiveDate": "Tue Dec 14 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,177 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 10 00:00:00 CEST 2026","effectiveDate": "Wed Dec 15 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,177 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 11 00:00:00 CEST 2026","effectiveDate": "Thu Dec 16 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,177 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 12 00:00:00 CEST 2026","effectiveDate": "Fri Dec 17 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,177 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 13 00:00:00 CEST 2026","effectiveDate": "Sat Dec 18 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,177 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 14 00:00:00 CEST 2026","effectiveDate": "Sun Dec 19 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,177 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 15 00:00:00 CEST 2026","effectiveDate": "Mon Dec 20 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,189 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 16 00:00:00 CEST 2026","effectiveDate": "Tue Dec 21 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,189 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 17 00:00:00 CEST 2026","effectiveDate": "Wed Dec 22 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,189 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 18 00:00:00 CEST 2026","effectiveDate": "Thu Dec 23 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,189 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 19 00:00:00 CEST 2026","effectiveDate": "Fri Dec 24 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,189 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 20 00:00:00 CEST 2026","effectiveDate": "Sat Dec 25 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,189 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 21 00:00:00 CEST 2026","effectiveDate": "Sun Dec 26 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,189 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 22 00:00:00 CEST 2026","effectiveDate": "Mon Dec 27 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,189 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 23 00:00:00 CEST 2026","effectiveDate": "Tue Dec 28 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,189 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 24 00:00:00 CEST 2026","effectiveDate": "Wed Dec 29 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,189 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 25 00:00:00 CEST 2026","effectiveDate": "Thu Dec 30 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,201 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 26 00:00:00 CEST 2026","effectiveDate": "Fri Dec 31 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,201 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 27 00:00:00 CEST 2026","effectiveDate": "Sat Jan 01 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,201 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 28 00:00:00 CEST 2026","effectiveDate": "Sun Jan 02 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,201 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 29 00:00:00 CEST 2026","effectiveDate": "Mon Jan 03 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,202 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 30 00:00:00 CEST 2026","effectiveDate": "Tue Jan 04 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,202 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 01 00:00:00 CEST 2026","effectiveDate": "Wed Jan 05 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,202 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 02 00:00:00 CEST 2026","effectiveDate": "Thu Jan 06 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,202 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 03 00:00:00 CEST 2026","effectiveDate": "Fri Jan 07 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,202 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 04 00:00:00 CEST 2026","effectiveDate": "Sat Jan 08 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,202 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 05 00:00:00 CEST 2026","effectiveDate": "Sun Jan 09 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,212 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 06 00:00:00 CEST 2026","effectiveDate": "Mon Jan 10 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,212 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 07 00:00:00 CEST 2026","effectiveDate": "Tue Jan 11 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,213 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 08 00:00:00 CEST 2026","effectiveDate": "Wed Jan 12 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,213 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 30 00:00:00 CEST 2026","effectiveDate": "Thu Jan 13 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,213 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 01 00:00:00 CEST 2026","effectiveDate": "Fri Jan 14 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,213 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 02 00:00:00 CEST 2026","effectiveDate": "Sat Jan 15 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,213 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 03 00:00:00 CEST 2026","effectiveDate": "Sun Jan 16 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,213 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 04 00:00:00 CEST 2026","effectiveDate": "Mon Jan 17 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,213 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 05 00:00:00 CEST 2026","effectiveDate": "Tue Jan 18 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,213 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 06 00:00:00 CEST 2026","effectiveDate": "Wed Jan 19 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,223 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 07 00:00:00 CEST 2026","effectiveDate": "Thu Jan 20 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,224 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 08 00:00:00 CEST 2026","effectiveDate": "Fri Jan 21 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,224 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 09 00:00:00 CEST 2026","effectiveDate": "Sat Jan 22 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,224 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 10 00:00:00 CEST 2026","effectiveDate": "Sun Jan 23 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,224 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 11 00:00:00 CEST 2026","effectiveDate": "Mon Jan 24 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,224 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 12 00:00:00 CEST 2026","effectiveDate": "Tue Jan 25 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,225 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 13 00:00:00 CEST 2026","effectiveDate": "Wed Jan 26 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,225 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 14 00:00:00 CEST 2026","effectiveDate": "Thu Jan 27 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,225 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 15 00:00:00 CEST 2026","effectiveDate": "Fri Jan 28 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,225 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 16 00:00:00 CEST 2026","effectiveDate": "Sat Jan 29 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,234 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 17 00:00:00 CEST 2026","effectiveDate": "Sun Jan 30 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,234 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 18 00:00:00 CEST 2026","effectiveDate": "Mon Jan 31 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,234 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 19 00:00:00 CEST 2026","effectiveDate": "Tue Feb 01 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,234 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 20 00:00:00 CEST 2026","effectiveDate": "Wed Feb 02 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,234 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 21 00:00:00 CEST 2026","effectiveDate": "Thu Feb 03 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,234 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 22 00:00:00 CEST 2026","effectiveDate": "Fri Feb 04 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,234 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 23 00:00:00 CEST 2026","effectiveDate": "Sat Feb 05 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,234 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 24 00:00:00 CEST 2026","effectiveDate": "Sun Feb 06 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,235 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 25 00:00:00 CEST 2026","effectiveDate": "Mon Feb 07 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,235 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 26 00:00:00 CEST 2026","effectiveDate": "Tue Nov 30 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,244 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 27 00:00:00 CEST 2026","effectiveDate": "Wed Dec 01 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,244 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 28 00:00:00 CEST 2026","effectiveDate": "Thu Dec 02 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,244 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 29 00:00:00 CEST 2026","effectiveDate": "Fri Dec 03 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,244 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 30 00:00:00 CEST 2026","effectiveDate": "Sat Dec 04 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,244 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 31 00:00:00 CEST 2026","effectiveDate": "Sun Dec 05 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,244 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 01 00:00:00 CEST 2026","effectiveDate": "Mon Dec 06 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,245 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 02 00:00:00 CEST 2026","effectiveDate": "Tue Dec 07 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,245 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 03 00:00:00 CEST 2026","effectiveDate": "Wed Dec 08 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,245 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 04 00:00:00 CEST 2026","effectiveDate": "Thu Dec 09 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,245 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 05 00:00:00 CEST 2026","effectiveDate": "Fri Dec 10 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,253 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 06 00:00:00 CEST 2026","effectiveDate": "Sat Dec 11 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,253 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 07 00:00:00 CEST 2026","effectiveDate": "Sun Dec 12 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,253 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 08 00:00:00 CEST 2026","effectiveDate": "Mon Dec 13 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,253 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 09 00:00:00 CEST 2026","effectiveDate": "Tue Dec 14 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,254 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 10 00:00:00 CEST 2026","effectiveDate": "Wed Dec 15 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,254 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 11 00:00:00 CEST 2026","effectiveDate": "Thu Dec 16 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,254 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 12 00:00:00 CEST 2026","effectiveDate": "Fri Dec 17 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,254 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 13 00:00:00 CEST 2026","effectiveDate": "Sat Dec 18 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,254 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 14 00:00:00 CEST 2026","effectiveDate": "Sun Dec 19 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,254 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 15 00:00:00 CEST 2026","effectiveDate": "Mon Dec 20 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,261 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 16 00:00:00 CEST 2026","effectiveDate": "Tue Dec 21 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,261 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 17 00:00:00 CEST 2026","effectiveDate": "Wed Dec 22 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,261 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 18 00:00:00 CEST 2026","effectiveDate": "Thu Dec 23 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,261 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 19 00:00:00 CEST 2026","effectiveDate": "Fri Dec 24 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,261 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 20 00:00:00 CEST 2026","effectiveDate": "Sat Dec 25 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,261 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 21 00:00:00 CEST 2026","effectiveDate": "Sun Dec 26 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,261 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 22 00:00:00 CEST 2026","effectiveDate": "Mon Dec 27 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,261 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 23 00:00:00 CEST 2026","effectiveDate": "Tue Dec 28 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,263 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 24 00:00:00 CEST 2026","effectiveDate": "Wed Dec 29 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,263 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 25 00:00:00 CEST 2026","effectiveDate": "Thu Dec 30 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,270 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 26 00:00:00 CEST 2026","effectiveDate": "Fri Dec 31 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,272 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 27 00:00:00 CEST 2026","effectiveDate": "Sat Jan 01 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,272 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 28 00:00:00 CEST 2026","effectiveDate": "Sun Jan 02 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,272 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 29 00:00:00 CEST 2026","effectiveDate": "Mon Jan 03 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,272 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 30 00:00:00 CEST 2026","effectiveDate": "Tue Jan 04 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,272 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 01 00:00:00 CEST 2026","effectiveDate": "Wed Jan 05 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,273 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 02 00:00:00 CEST 2026","effectiveDate": "Thu Jan 06 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,273 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 03 00:00:00 CEST 2026","effectiveDate": "Fri Jan 07 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,273 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 04 00:00:00 CEST 2026","effectiveDate": "Sat Jan 08 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,273 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 05 00:00:00 CEST 2026","effectiveDate": "Sun Jan 09 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,280 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 06 00:00:00 CEST 2026","effectiveDate": "Mon Jan 10 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,281 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 07 00:00:00 CEST 2026","effectiveDate": "Tue Jan 11 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,281 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 08 00:00:00 CEST 2026","effectiveDate": "Wed Jan 12 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,281 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 09 00:00:00 CEST 2026","effectiveDate": "Thu Jan 13 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,281 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 10 00:00:00 CEST 2026","effectiveDate": "Fri Jan 14 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,281 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 11 00:00:00 CEST 2026","effectiveDate": "Sat Jan 15 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,281 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 12 00:00:00 CEST 2026","effectiveDate": "Sun Jan 16 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,281 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 13 00:00:00 CEST 2026","effectiveDate": "Mon Jan 17 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,282 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 14 00:00:00 CEST 2026","effectiveDate": "Tue Jan 18 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,282 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 15 00:00:00 CEST 2026","effectiveDate": "Wed Jan 19 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,293 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 16 00:00:00 CEST 2026","effectiveDate": "Thu Jan 20 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,294 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 17 00:00:00 CEST 2026","effectiveDate": "Fri Jan 21 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,294 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 18 00:00:00 CEST 2026","effectiveDate": "Sat Jan 22 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,294 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 19 00:00:00 CEST 2026","effectiveDate": "Sun Jan 23 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,294 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 20 00:00:00 CEST 2026","effectiveDate": "Mon Jan 24 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,295 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 21 00:00:00 CEST 2026","effectiveDate": "Tue Jan 25 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,295 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 22 00:00:00 CEST 2026","effectiveDate": "Wed Jan 26 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,295 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 23 00:00:00 CEST 2026","effectiveDate": "Thu Jan 27 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,295 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 24 00:00:00 CEST 2026","effectiveDate": "Fri Jan 28 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,295 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 25 00:00:00 CEST 2026","effectiveDate": "Sat Jan 29 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,304 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 26 00:00:00 CEST 2026","effectiveDate": "Sun Jan 30 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,305 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 27 00:00:00 CEST 2026","effectiveDate": "Mon Jan 31 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,305 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 28 00:00:00 CEST 2026","effectiveDate": "Tue Feb 01 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,305 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 29 00:00:00 CEST 2026","effectiveDate": "Wed Feb 02 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,305 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 30 00:00:00 CEST 2026","effectiveDate": "Thu Feb 03 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,305 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 31 00:00:00 CEST 2026","effectiveDate": "Fri Feb 04 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,305 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 01 00:00:00 CEST 2026","effectiveDate": "Sat Feb 05 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,305 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 02 00:00:00 CEST 2026","effectiveDate": "Sun Feb 06 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,305 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 03 00:00:00 CEST 2026","effectiveDate": "Mon Feb 07 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,307 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 04 00:00:00 CEST 2026","effectiveDate": "Tue Feb 08 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,316 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 05 00:00:00 CEST 2026","effectiveDate": "Wed Feb 09 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,317 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 06 00:00:00 CEST 2026","effectiveDate": "Thu Feb 10 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,317 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 07 00:00:00 CEST 2026","effectiveDate": "Fri Feb 11 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,317 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 31 00:00:00 CEST 2026","effectiveDate": "Sat Feb 12 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,317 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 01 00:00:00 CEST 2026","effectiveDate": "Sun Feb 13 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,318 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 02 00:00:00 CEST 2026","effectiveDate": "Mon Feb 14 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,318 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 03 00:00:00 CEST 2026","effectiveDate": "Tue Feb 15 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,318 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 04 00:00:00 CEST 2026","effectiveDate": "Wed Feb 16 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,318 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 05 00:00:00 CEST 2026","effectiveDate": "Thu Feb 17 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,318 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 06 00:00:00 CEST 2026","effectiveDate": "Fri Feb 18 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,328 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 07 00:00:00 CEST 2026","effectiveDate": "Sat Feb 19 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,329 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 08 00:00:00 CEST 2026","effectiveDate": "Sun Feb 20 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,329 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 09 00:00:00 CEST 2026","effectiveDate": "Mon Feb 21 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,329 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 10 00:00:00 CEST 2026","effectiveDate": "Tue Feb 22 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,329 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 11 00:00:00 CEST 2026","effectiveDate": "Wed Feb 23 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,329 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 12 00:00:00 CEST 2026","effectiveDate": "Thu Feb 24 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,329 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 13 00:00:00 CEST 2026","effectiveDate": "Fri Feb 25 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,329 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 14 00:00:00 CEST 2026","effectiveDate": "Sat Feb 26 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,330 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 15 00:00:00 CEST 2026","effectiveDate": "Sun Feb 27 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,330 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 16 00:00:00 CEST 2026","effectiveDate": "Mon Feb 28 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,338 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 17 00:00:00 CEST 2026","effectiveDate": "Tue Feb 29 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,339 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 18 00:00:00 CEST 2026","effectiveDate": "Wed Mar 01 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,339 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 19 00:00:00 CEST 2026","effectiveDate": "Thu Mar 02 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,339 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 20 00:00:00 CEST 2026","effectiveDate": "Fri Mar 03 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,339 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 21 00:00:00 CEST 2026","effectiveDate": "Sat Mar 04 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,339 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 22 00:00:00 CEST 2026","effectiveDate": "Sun Mar 05 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,339 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 23 00:00:00 CEST 2026","effectiveDate": "Mon Mar 06 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,340 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 24 00:00:00 CEST 2026","effectiveDate": "Tue Mar 07 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,340 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 25 00:00:00 CEST 2026","effectiveDate": "Wed Mar 08 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,340 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 26 00:00:00 CEST 2026","effectiveDate": "Fri Dec 31 00:00:00 CET 2027"
	  }]
})
2023-04-15 17:23:13,351 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 27 00:00:00 CEST 2026","effectiveDate": "Sat Jan 01 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,352 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 28 00:00:00 CEST 2026","effectiveDate": "Sun Jan 02 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,352 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 29 00:00:00 CEST 2026","effectiveDate": "Mon Jan 03 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,352 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 30 00:00:00 CEST 2026","effectiveDate": "Tue Jan 04 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,352 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 01 00:00:00 CEST 2026","effectiveDate": "Wed Jan 05 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,352 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 02 00:00:00 CEST 2026","effectiveDate": "Thu Jan 06 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,352 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 03 00:00:00 CEST 2026","effectiveDate": "Fri Jan 07 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,352 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 04 00:00:00 CEST 2026","effectiveDate": "Sat Jan 08 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,352 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 05 00:00:00 CEST 2026","effectiveDate": "Sun Jan 09 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,353 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 06 00:00:00 CEST 2026","effectiveDate": "Mon Jan 10 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,361 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 07 00:00:00 CEST 2026","effectiveDate": "Tue Jan 11 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,361 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 08 00:00:00 CEST 2026","effectiveDate": "Wed Jan 12 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,361 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 09 00:00:00 CEST 2026","effectiveDate": "Thu Jan 13 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,361 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 10 00:00:00 CEST 2026","effectiveDate": "Fri Jan 14 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,362 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 11 00:00:00 CEST 2026","effectiveDate": "Sat Jan 15 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,362 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 12 00:00:00 CEST 2026","effectiveDate": "Sun Jan 16 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,362 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 13 00:00:00 CEST 2026","effectiveDate": "Mon Jan 17 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,362 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 14 00:00:00 CEST 2026","effectiveDate": "Tue Jan 18 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,362 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 15 00:00:00 CEST 2026","effectiveDate": "Wed Jan 19 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,362 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 16 00:00:00 CEST 2026","effectiveDate": "Thu Jan 20 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,372 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 17 00:00:00 CEST 2026","effectiveDate": "Fri Jan 21 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,372 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 18 00:00:00 CEST 2026","effectiveDate": "Sat Jan 22 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,372 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 19 00:00:00 CEST 2026","effectiveDate": "Sun Jan 23 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,372 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 20 00:00:00 CEST 2026","effectiveDate": "Mon Jan 24 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,372 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 21 00:00:00 CEST 2026","effectiveDate": "Tue Jan 25 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,373 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 22 00:00:00 CEST 2026","effectiveDate": "Wed Jan 26 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,373 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 23 00:00:00 CEST 2026","effectiveDate": "Thu Jan 27 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,373 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 24 00:00:00 CEST 2026","effectiveDate": "Fri Jan 28 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,373 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 25 00:00:00 CEST 2026","effectiveDate": "Sat Jan 29 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,373 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 26 00:00:00 CEST 2026","effectiveDate": "Sun Jan 30 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,381 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 27 00:00:00 CEST 2026","effectiveDate": "Mon Jan 31 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,382 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 28 00:00:00 CEST 2026","effectiveDate": "Tue Feb 01 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,382 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 29 00:00:00 CEST 2026","effectiveDate": "Wed Feb 02 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,382 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 30 00:00:00 CEST 2026","effectiveDate": "Thu Feb 03 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,382 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 31 00:00:00 CEST 2026","effectiveDate": "Fri Feb 04 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,382 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 01 00:00:00 CEST 2026","effectiveDate": "Sat Feb 05 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,382 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 02 00:00:00 CEST 2026","effectiveDate": "Sun Feb 06 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,383 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 03 00:00:00 CEST 2026","effectiveDate": "Mon Feb 07 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,383 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 04 00:00:00 CEST 2026","effectiveDate": "Tue Feb 08 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,383 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 05 00:00:00 CEST 2026","effectiveDate": "Wed Feb 09 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,392 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 06 00:00:00 CEST 2026","effectiveDate": "Thu Feb 10 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,393 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 07 00:00:00 CEST 2026","effectiveDate": "Fri Feb 11 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,393 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 08 00:00:00 CEST 2026","effectiveDate": "Sat Feb 12 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,393 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 09 00:00:00 CEST 2026","effectiveDate": "Sun Feb 13 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,393 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 10 00:00:00 CEST 2026","effectiveDate": "Mon Feb 14 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,393 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 11 00:00:00 CEST 2026","effectiveDate": "Tue Feb 15 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,393 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 12 00:00:00 CEST 2026","effectiveDate": "Wed Feb 16 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,393 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 13 00:00:00 CEST 2026","effectiveDate": "Thu Feb 17 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,393 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 14 00:00:00 CEST 2026","effectiveDate": "Fri Feb 18 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,393 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 15 00:00:00 CEST 2026","effectiveDate": "Sat Feb 19 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,401 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 16 00:00:00 CEST 2026","effectiveDate": "Sun Feb 20 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,401 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 17 00:00:00 CEST 2026","effectiveDate": "Mon Feb 21 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,401 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 18 00:00:00 CEST 2026","effectiveDate": "Tue Feb 22 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,402 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 19 00:00:00 CEST 2026","effectiveDate": "Wed Feb 23 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,402 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 20 00:00:00 CEST 2026","effectiveDate": "Thu Feb 24 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,402 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 21 00:00:00 CEST 2026","effectiveDate": "Fri Feb 25 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,402 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 22 00:00:00 CEST 2026","effectiveDate": "Sat Feb 26 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,402 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 23 00:00:00 CEST 2026","effectiveDate": "Sun Feb 27 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,402 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 24 00:00:00 CEST 2026","effectiveDate": "Mon Feb 28 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,402 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 25 00:00:00 CEST 2026","effectiveDate": "Tue Feb 29 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,409 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 26 00:00:00 CEST 2026","effectiveDate": "Wed Mar 01 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,409 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 27 00:00:00 CEST 2026","effectiveDate": "Thu Mar 02 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,409 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 28 00:00:00 CEST 2026","effectiveDate": "Fri Mar 03 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,409 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 29 00:00:00 CEST 2026","effectiveDate": "Sat Mar 04 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,409 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 30 00:00:00 CEST 2026","effectiveDate": "Sun Mar 05 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,409 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 31 00:00:00 CEST 2026","effectiveDate": "Mon Mar 06 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,409 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 01 00:00:00 CEST 2026","effectiveDate": "Tue Mar 07 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,409 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 02 00:00:00 CEST 2026","effectiveDate": "Wed Mar 08 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,409 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 03 00:00:00 CEST 2026","effectiveDate": "Thu Mar 09 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,409 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 04 00:00:00 CEST 2026","effectiveDate": "Fri Mar 10 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,418 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 05 00:00:00 CEST 2026","effectiveDate": "Sat Mar 11 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,418 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 06 00:00:00 CEST 2026","effectiveDate": "Sun Mar 12 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,418 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 07 00:00:00 CEST 2026","effectiveDate": "Mon Mar 13 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,418 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 30 00:00:00 CEST 2026","effectiveDate": "Tue Mar 14 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,418 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 01 00:00:00 CEST 2026","effectiveDate": "Wed Mar 15 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,419 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 02 00:00:00 CEST 2026","effectiveDate": "Thu Mar 16 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,419 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 03 00:00:00 CEST 2026","effectiveDate": "Fri Mar 17 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,419 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 04 00:00:00 CEST 2026","effectiveDate": "Sat Mar 18 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,419 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 05 00:00:00 CEST 2026","effectiveDate": "Sun Mar 19 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,419 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 06 00:00:00 CEST 2026","effectiveDate": "Mon Mar 20 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,427 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 07 00:00:00 CEST 2026","effectiveDate": "Tue Mar 21 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,427 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 08 00:00:00 CEST 2026","effectiveDate": "Wed Mar 22 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,428 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 09 00:00:00 CEST 2026","effectiveDate": "Thu Mar 23 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,428 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 10 00:00:00 CEST 2026","effectiveDate": "Fri Mar 24 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,428 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 11 00:00:00 CEST 2026","effectiveDate": "Sat Mar 25 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,428 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 12 00:00:00 CEST 2026","effectiveDate": "Sun Mar 26 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,428 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 13 00:00:00 CEST 2026","effectiveDate": "Mon Mar 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,428 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 14 00:00:00 CEST 2026","effectiveDate": "Tue Mar 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,428 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 15 00:00:00 CEST 2026","effectiveDate": "Wed Mar 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,428 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 16 00:00:00 CEST 2026","effectiveDate": "Thu Mar 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,437 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 17 00:00:00 CEST 2026","effectiveDate": "Fri Mar 31 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,437 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 18 00:00:00 CEST 2026","effectiveDate": "Sat Apr 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,438 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 19 00:00:00 CEST 2026","effectiveDate": "Sun Apr 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,438 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 20 00:00:00 CEST 2026","effectiveDate": "Mon Apr 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,438 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 21 00:00:00 CEST 2026","effectiveDate": "Tue Apr 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,438 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 22 00:00:00 CEST 2026","effectiveDate": "Wed Apr 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,438 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 23 00:00:00 CEST 2026","effectiveDate": "Thu Apr 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,438 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 24 00:00:00 CEST 2026","effectiveDate": "Fri Apr 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,438 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 25 00:00:00 CEST 2026","effectiveDate": "Sat Apr 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,438 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 26 00:00:00 CEST 2026","effectiveDate": "Mon Jan 31 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,446 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 27 00:00:00 CEST 2026","effectiveDate": "Tue Feb 01 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,448 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 28 00:00:00 CEST 2026","effectiveDate": "Wed Feb 02 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,448 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 29 00:00:00 CEST 2026","effectiveDate": "Thu Feb 03 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,448 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 30 00:00:00 CEST 2026","effectiveDate": "Fri Feb 04 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,448 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 31 00:00:00 CEST 2026","effectiveDate": "Sat Feb 05 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,448 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 01 00:00:00 CEST 2026","effectiveDate": "Sun Feb 06 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,449 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 02 00:00:00 CEST 2026","effectiveDate": "Mon Feb 07 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,449 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 03 00:00:00 CEST 2026","effectiveDate": "Tue Feb 08 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,449 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 04 00:00:00 CEST 2026","effectiveDate": "Wed Feb 09 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,449 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 05 00:00:00 CEST 2026","effectiveDate": "Thu Feb 10 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,457 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 06 00:00:00 CEST 2026","effectiveDate": "Fri Feb 11 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,457 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 07 00:00:00 CEST 2026","effectiveDate": "Sat Feb 12 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,457 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 08 00:00:00 CEST 2026","effectiveDate": "Sun Feb 13 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,457 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 09 00:00:00 CEST 2026","effectiveDate": "Mon Feb 14 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,457 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 10 00:00:00 CEST 2026","effectiveDate": "Tue Feb 15 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,457 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 11 00:00:00 CEST 2026","effectiveDate": "Wed Feb 16 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,457 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 12 00:00:00 CEST 2026","effectiveDate": "Thu Feb 17 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,457 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 13 00:00:00 CEST 2026","effectiveDate": "Fri Feb 18 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,457 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 14 00:00:00 CEST 2026","effectiveDate": "Sat Feb 19 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,458 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 15 00:00:00 CEST 2026","effectiveDate": "Sun Feb 20 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,468 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 16 00:00:00 CEST 2026","effectiveDate": "Mon Feb 21 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,468 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 17 00:00:00 CEST 2026","effectiveDate": "Tue Feb 22 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,468 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 18 00:00:00 CEST 2026","effectiveDate": "Wed Feb 23 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,468 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 19 00:00:00 CEST 2026","effectiveDate": "Thu Feb 24 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,468 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 20 00:00:00 CEST 2026","effectiveDate": "Fri Feb 25 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,468 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 21 00:00:00 CEST 2026","effectiveDate": "Sat Feb 26 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,469 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 22 00:00:00 CEST 2026","effectiveDate": "Sun Feb 27 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,469 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 23 00:00:00 CEST 2026","effectiveDate": "Mon Feb 28 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,469 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 24 00:00:00 CEST 2026","effectiveDate": "Tue Feb 29 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,469 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 25 00:00:00 CEST 2026","effectiveDate": "Wed Mar 01 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,477 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 26 00:00:00 CEST 2026","effectiveDate": "Thu Mar 02 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,477 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 27 00:00:00 CEST 2026","effectiveDate": "Fri Mar 03 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,477 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 28 00:00:00 CEST 2026","effectiveDate": "Sat Mar 04 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,478 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 29 00:00:00 CEST 2026","effectiveDate": "Sun Mar 05 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,478 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 30 00:00:00 CEST 2026","effectiveDate": "Mon Mar 06 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,478 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 31 00:00:00 CEST 2026","effectiveDate": "Tue Mar 07 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,479 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 01 00:00:00 CEST 2026","effectiveDate": "Wed Mar 08 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,479 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 02 00:00:00 CEST 2026","effectiveDate": "Thu Mar 09 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,479 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 03 00:00:00 CEST 2026","effectiveDate": "Fri Mar 10 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,479 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 04 00:00:00 CEST 2026","effectiveDate": "Sat Mar 11 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,488 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 05 00:00:00 CEST 2026","effectiveDate": "Sun Mar 12 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,488 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 06 00:00:00 CEST 2026","effectiveDate": "Mon Mar 13 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,488 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 07 00:00:00 CEST 2026","effectiveDate": "Tue Mar 14 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,488 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 08 00:00:00 CEST 2026","effectiveDate": "Wed Mar 15 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,489 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 09 00:00:00 CEST 2026","effectiveDate": "Thu Mar 16 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,489 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 10 00:00:00 CEST 2026","effectiveDate": "Fri Mar 17 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,489 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 11 00:00:00 CEST 2026","effectiveDate": "Sat Mar 18 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,489 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 12 00:00:00 CEST 2026","effectiveDate": "Sun Mar 19 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,489 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 13 00:00:00 CEST 2026","effectiveDate": "Mon Mar 20 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,489 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 14 00:00:00 CEST 2026","effectiveDate": "Tue Mar 21 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,499 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 15 00:00:00 CEST 2026","effectiveDate": "Wed Mar 22 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,499 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 16 00:00:00 CEST 2026","effectiveDate": "Thu Mar 23 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,499 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 17 00:00:00 CEST 2026","effectiveDate": "Fri Mar 24 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,499 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 18 00:00:00 CEST 2026","effectiveDate": "Sat Mar 25 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,499 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 19 00:00:00 CEST 2026","effectiveDate": "Sun Mar 26 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,499 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 20 00:00:00 CEST 2026","effectiveDate": "Mon Mar 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,500 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 21 00:00:00 CEST 2026","effectiveDate": "Tue Mar 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,500 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 22 00:00:00 CEST 2026","effectiveDate": "Wed Mar 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,500 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 23 00:00:00 CEST 2026","effectiveDate": "Thu Mar 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,500 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 24 00:00:00 CEST 2026","effectiveDate": "Fri Mar 31 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,509 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 25 00:00:00 CEST 2026","effectiveDate": "Sat Apr 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,509 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 26 00:00:00 CEST 2026","effectiveDate": "Sun Apr 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,509 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 27 00:00:00 CEST 2026","effectiveDate": "Mon Apr 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,509 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 28 00:00:00 CEST 2026","effectiveDate": "Tue Apr 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,510 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 29 00:00:00 CEST 2026","effectiveDate": "Wed Apr 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,510 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 30 00:00:00 CEST 2026","effectiveDate": "Thu Apr 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,510 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 01 00:00:00 CEST 2026","effectiveDate": "Fri Apr 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,510 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 02 00:00:00 CEST 2026","effectiveDate": "Sat Apr 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,510 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 03 00:00:00 CEST 2026","effectiveDate": "Sun Apr 09 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,510 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 04 00:00:00 CEST 2026","effectiveDate": "Mon Apr 10 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,519 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 05 00:00:00 CEST 2026","effectiveDate": "Tue Apr 11 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,520 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 06 00:00:00 CEST 2026","effectiveDate": "Wed Apr 12 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,520 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 07 00:00:00 CEST 2026","effectiveDate": "Thu Apr 13 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,520 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 31 00:00:00 CEST 2026","effectiveDate": "Fri Apr 14 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,520 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 01 00:00:00 CEST 2026","effectiveDate": "Sat Apr 15 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,520 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 02 00:00:00 CEST 2026","effectiveDate": "Sun Apr 16 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,521 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 03 00:00:00 CEST 2026","effectiveDate": "Mon Apr 17 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,521 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 04 00:00:00 CEST 2026","effectiveDate": "Tue Apr 18 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,521 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 05 00:00:00 CEST 2026","effectiveDate": "Wed Apr 19 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,521 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 06 00:00:00 CEST 2026","effectiveDate": "Thu Apr 20 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,530 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 07 00:00:00 CEST 2026","effectiveDate": "Fri Apr 21 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,530 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 08 00:00:00 CEST 2026","effectiveDate": "Sat Apr 22 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,531 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 09 00:00:00 CEST 2026","effectiveDate": "Sun Apr 23 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,531 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 10 00:00:00 CEST 2026","effectiveDate": "Mon Apr 24 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,531 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 11 00:00:00 CEST 2026","effectiveDate": "Tue Apr 25 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,531 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 12 00:00:00 CEST 2026","effectiveDate": "Wed Apr 26 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,531 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 13 00:00:00 CEST 2026","effectiveDate": "Thu Apr 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,531 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 14 00:00:00 CEST 2026","effectiveDate": "Fri Apr 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,531 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 15 00:00:00 CEST 2026","effectiveDate": "Sat Apr 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,531 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 16 00:00:00 CEST 2026","effectiveDate": "Sun Apr 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,538 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 17 00:00:00 CEST 2026","effectiveDate": "Mon May 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,538 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 18 00:00:00 CEST 2026","effectiveDate": "Tue May 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,538 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 19 00:00:00 CEST 2026","effectiveDate": "Wed May 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,538 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 20 00:00:00 CEST 2026","effectiveDate": "Thu May 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,538 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 21 00:00:00 CEST 2026","effectiveDate": "Fri May 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,538 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 22 00:00:00 CEST 2026","effectiveDate": "Sat May 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,539 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 23 00:00:00 CEST 2026","effectiveDate": "Sun May 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,539 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 24 00:00:00 CEST 2026","effectiveDate": "Mon May 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,539 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 25 00:00:00 CEST 2026","effectiveDate": "Tue May 09 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,539 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 26 00:00:00 CEST 2026","effectiveDate": "Tue Feb 29 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,547 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 27 00:00:00 CEST 2026","effectiveDate": "Wed Mar 01 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,547 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 28 00:00:00 CEST 2026","effectiveDate": "Thu Mar 02 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,548 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 29 00:00:00 CEST 2026","effectiveDate": "Fri Mar 03 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,548 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 30 00:00:00 CEST 2026","effectiveDate": "Sat Mar 04 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,548 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 31 00:00:00 CEST 2026","effectiveDate": "Sun Mar 05 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,548 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 01 00:00:00 CEST 2026","effectiveDate": "Mon Mar 06 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,548 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 02 00:00:00 CEST 2026","effectiveDate": "Tue Mar 07 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,548 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 03 00:00:00 CEST 2026","effectiveDate": "Wed Mar 08 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,548 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 04 00:00:00 CEST 2026","effectiveDate": "Thu Mar 09 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,548 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 05 00:00:00 CEST 2026","effectiveDate": "Fri Mar 10 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,556 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 06 00:00:00 CEST 2026","effectiveDate": "Sat Mar 11 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,557 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 07 00:00:00 CEST 2026","effectiveDate": "Sun Mar 12 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,557 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 08 00:00:00 CEST 2026","effectiveDate": "Mon Mar 13 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,557 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 09 00:00:00 CEST 2026","effectiveDate": "Tue Mar 14 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,557 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 10 00:00:00 CEST 2026","effectiveDate": "Wed Mar 15 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,557 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 11 00:00:00 CEST 2026","effectiveDate": "Thu Mar 16 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,557 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 12 00:00:00 CEST 2026","effectiveDate": "Fri Mar 17 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,557 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 13 00:00:00 CEST 2026","effectiveDate": "Sat Mar 18 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,557 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 14 00:00:00 CEST 2026","effectiveDate": "Sun Mar 19 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,558 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 15 00:00:00 CEST 2026","effectiveDate": "Mon Mar 20 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,569 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 16 00:00:00 CEST 2026","effectiveDate": "Tue Mar 21 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,570 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 17 00:00:00 CEST 2026","effectiveDate": "Wed Mar 22 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,570 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 18 00:00:00 CEST 2026","effectiveDate": "Thu Mar 23 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,570 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 19 00:00:00 CEST 2026","effectiveDate": "Fri Mar 24 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,570 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 20 00:00:00 CEST 2026","effectiveDate": "Sat Mar 25 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,570 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 21 00:00:00 CEST 2026","effectiveDate": "Sun Mar 26 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:13,570 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 22 00:00:00 CEST 2026","effectiveDate": "Mon Mar 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,571 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 23 00:00:00 CEST 2026","effectiveDate": "Tue Mar 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,571 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 24 00:00:00 CEST 2026","effectiveDate": "Wed Mar 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,571 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 25 00:00:00 CEST 2026","effectiveDate": "Thu Mar 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,580 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 26 00:00:00 CEST 2026","effectiveDate": "Fri Mar 31 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,580 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 27 00:00:00 CEST 2026","effectiveDate": "Sat Apr 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,581 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 28 00:00:00 CEST 2026","effectiveDate": "Sun Apr 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,581 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 29 00:00:00 CEST 2026","effectiveDate": "Mon Apr 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,581 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 30 00:00:00 CEST 2026","effectiveDate": "Tue Apr 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,581 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 01 00:00:00 CEST 2026","effectiveDate": "Wed Apr 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,581 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 02 00:00:00 CEST 2026","effectiveDate": "Thu Apr 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,581 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 03 00:00:00 CEST 2026","effectiveDate": "Fri Apr 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,581 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 04 00:00:00 CEST 2026","effectiveDate": "Sat Apr 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,581 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 05 00:00:00 CEST 2026","effectiveDate": "Sun Apr 09 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,592 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 06 00:00:00 CEST 2026","effectiveDate": "Mon Apr 10 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,592 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 07 00:00:00 CEST 2026","effectiveDate": "Tue Apr 11 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,592 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 08 00:00:00 CEST 2026","effectiveDate": "Wed Apr 12 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,592 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 09 00:00:00 CEST 2026","effectiveDate": "Thu Apr 13 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,592 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 10 00:00:00 CEST 2026","effectiveDate": "Fri Apr 14 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,592 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 11 00:00:00 CEST 2026","effectiveDate": "Sat Apr 15 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,593 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 12 00:00:00 CEST 2026","effectiveDate": "Sun Apr 16 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,593 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 13 00:00:00 CEST 2026","effectiveDate": "Mon Apr 17 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,593 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 14 00:00:00 CEST 2026","effectiveDate": "Tue Apr 18 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,593 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 15 00:00:00 CEST 2026","effectiveDate": "Wed Apr 19 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,601 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 16 00:00:00 CEST 2026","effectiveDate": "Thu Apr 20 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,601 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 17 00:00:00 CEST 2026","effectiveDate": "Fri Apr 21 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,601 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 18 00:00:00 CEST 2026","effectiveDate": "Sat Apr 22 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,601 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 19 00:00:00 CEST 2026","effectiveDate": "Sun Apr 23 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,601 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 20 00:00:00 CEST 2026","effectiveDate": "Mon Apr 24 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,601 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 21 00:00:00 CEST 2026","effectiveDate": "Tue Apr 25 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,601 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 22 00:00:00 CEST 2026","effectiveDate": "Wed Apr 26 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,601 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 23 00:00:00 CEST 2026","effectiveDate": "Thu Apr 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,601 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 24 00:00:00 CEST 2026","effectiveDate": "Fri Apr 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,602 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 25 00:00:00 CEST 2026","effectiveDate": "Sat Apr 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,610 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 26 00:00:00 CET 2026","effectiveDate": "Sun Apr 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,610 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 27 00:00:00 CET 2026","effectiveDate": "Mon May 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,610 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 28 00:00:00 CET 2026","effectiveDate": "Tue May 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,610 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 29 00:00:00 CET 2026","effectiveDate": "Wed May 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,610 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 30 00:00:00 CET 2026","effectiveDate": "Thu May 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,611 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 31 00:00:00 CET 2026","effectiveDate": "Fri May 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,611 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 01 00:00:00 CET 2026","effectiveDate": "Sat May 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,611 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 02 00:00:00 CET 2026","effectiveDate": "Sun May 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,611 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 03 00:00:00 CET 2026","effectiveDate": "Mon May 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,611 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 04 00:00:00 CET 2026","effectiveDate": "Tue May 09 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,618 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 05 00:00:00 CET 2026","effectiveDate": "Wed May 10 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,618 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 06 00:00:00 CET 2026","effectiveDate": "Thu May 11 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,618 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 07 00:00:00 CET 2026","effectiveDate": "Fri May 12 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,619 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 31 00:00:00 CEST 2026","effectiveDate": "Sat May 13 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,619 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 01 00:00:00 CEST 2026","effectiveDate": "Sun May 14 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,619 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 02 00:00:00 CEST 2026","effectiveDate": "Mon May 15 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,619 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 03 00:00:00 CEST 2026","effectiveDate": "Tue May 16 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,619 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 04 00:00:00 CEST 2026","effectiveDate": "Wed May 17 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,619 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 05 00:00:00 CEST 2026","effectiveDate": "Thu May 18 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,619 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 06 00:00:00 CEST 2026","effectiveDate": "Fri May 19 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,626 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 07 00:00:00 CEST 2026","effectiveDate": "Sat May 20 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,627 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 08 00:00:00 CEST 2026","effectiveDate": "Sun May 21 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,627 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 09 00:00:00 CEST 2026","effectiveDate": "Mon May 22 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,627 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 10 00:00:00 CEST 2026","effectiveDate": "Tue May 23 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,627 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 11 00:00:00 CEST 2026","effectiveDate": "Wed May 24 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,627 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 12 00:00:00 CEST 2026","effectiveDate": "Thu May 25 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,627 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 13 00:00:00 CEST 2026","effectiveDate": "Fri May 26 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,627 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 14 00:00:00 CEST 2026","effectiveDate": "Sat May 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,627 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 15 00:00:00 CEST 2026","effectiveDate": "Sun May 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,627 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 16 00:00:00 CEST 2026","effectiveDate": "Mon May 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,634 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 17 00:00:00 CEST 2026","effectiveDate": "Tue May 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,635 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 18 00:00:00 CEST 2026","effectiveDate": "Wed May 31 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,635 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 19 00:00:00 CEST 2026","effectiveDate": "Thu Jun 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,635 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 20 00:00:00 CEST 2026","effectiveDate": "Fri Jun 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,635 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 21 00:00:00 CEST 2026","effectiveDate": "Sat Jun 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,635 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 22 00:00:00 CEST 2026","effectiveDate": "Sun Jun 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,635 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 23 00:00:00 CEST 2026","effectiveDate": "Mon Jun 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,635 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 24 00:00:00 CEST 2026","effectiveDate": "Tue Jun 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,635 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 25 00:00:00 CEST 2026","effectiveDate": "Wed Jun 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,635 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 26 00:00:00 CEST 2026","effectiveDate": "Fri Mar 31 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,644 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 27 00:00:00 CEST 2026","effectiveDate": "Sat Apr 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,644 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 28 00:00:00 CEST 2026","effectiveDate": "Sun Apr 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,644 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 29 00:00:00 CEST 2026","effectiveDate": "Mon Apr 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,644 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 30 00:00:00 CEST 2026","effectiveDate": "Tue Apr 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,644 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 01 00:00:00 CEST 2026","effectiveDate": "Wed Apr 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,644 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 02 00:00:00 CEST 2026","effectiveDate": "Thu Apr 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,644 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 03 00:00:00 CEST 2026","effectiveDate": "Fri Apr 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,644 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 04 00:00:00 CEST 2026","effectiveDate": "Sat Apr 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,644 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 05 00:00:00 CEST 2026","effectiveDate": "Sun Apr 09 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,645 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 06 00:00:00 CEST 2026","effectiveDate": "Mon Apr 10 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,652 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 07 00:00:00 CEST 2026","effectiveDate": "Tue Apr 11 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,652 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 08 00:00:00 CEST 2026","effectiveDate": "Wed Apr 12 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,652 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 09 00:00:00 CEST 2026","effectiveDate": "Thu Apr 13 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,652 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 10 00:00:00 CEST 2026","effectiveDate": "Fri Apr 14 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,653 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 11 00:00:00 CEST 2026","effectiveDate": "Sat Apr 15 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,653 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 12 00:00:00 CEST 2026","effectiveDate": "Sun Apr 16 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,653 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 13 00:00:00 CEST 2026","effectiveDate": "Mon Apr 17 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,653 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 14 00:00:00 CEST 2026","effectiveDate": "Tue Apr 18 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,653 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 15 00:00:00 CEST 2026","effectiveDate": "Wed Apr 19 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,653 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 16 00:00:00 CEST 2026","effectiveDate": "Thu Apr 20 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,661 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 17 00:00:00 CEST 2026","effectiveDate": "Fri Apr 21 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,661 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 18 00:00:00 CEST 2026","effectiveDate": "Sat Apr 22 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,661 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 19 00:00:00 CEST 2026","effectiveDate": "Sun Apr 23 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,661 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 20 00:00:00 CEST 2026","effectiveDate": "Mon Apr 24 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,661 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 21 00:00:00 CEST 2026","effectiveDate": "Tue Apr 25 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,661 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 22 00:00:00 CEST 2026","effectiveDate": "Wed Apr 26 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,662 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 23 00:00:00 CEST 2026","effectiveDate": "Thu Apr 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,669 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 24 00:00:00 CEST 2026","effectiveDate": "Fri Apr 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,669 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 25 00:00:00 CEST 2026","effectiveDate": "Sat Apr 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,669 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 26 00:00:00 CET 2026","effectiveDate": "Sun Apr 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,678 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 27 00:00:00 CET 2026","effectiveDate": "Mon May 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,678 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 28 00:00:00 CET 2026","effectiveDate": "Tue May 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,679 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 29 00:00:00 CET 2026","effectiveDate": "Wed May 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,679 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 30 00:00:00 CET 2026","effectiveDate": "Thu May 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,679 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 31 00:00:00 CET 2026","effectiveDate": "Fri May 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,679 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 01 00:00:00 CET 2026","effectiveDate": "Sat May 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,679 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 02 00:00:00 CET 2026","effectiveDate": "Sun May 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,679 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 03 00:00:00 CET 2026","effectiveDate": "Mon May 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,679 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 04 00:00:00 CET 2026","effectiveDate": "Tue May 09 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,679 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 05 00:00:00 CET 2026","effectiveDate": "Wed May 10 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,687 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 06 00:00:00 CET 2026","effectiveDate": "Thu May 11 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,687 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 07 00:00:00 CET 2026","effectiveDate": "Fri May 12 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,687 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 08 00:00:00 CET 2026","effectiveDate": "Sat May 13 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,687 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 09 00:00:00 CET 2026","effectiveDate": "Sun May 14 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,687 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 10 00:00:00 CET 2026","effectiveDate": "Mon May 15 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,687 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 11 00:00:00 CET 2026","effectiveDate": "Tue May 16 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,687 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 12 00:00:00 CET 2026","effectiveDate": "Wed May 17 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,688 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 13 00:00:00 CET 2026","effectiveDate": "Thu May 18 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,688 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 14 00:00:00 CET 2026","effectiveDate": "Fri May 19 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,688 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 15 00:00:00 CET 2026","effectiveDate": "Sat May 20 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,695 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 16 00:00:00 CET 2026","effectiveDate": "Sun May 21 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,696 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 17 00:00:00 CET 2026","effectiveDate": "Mon May 22 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,696 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 18 00:00:00 CET 2026","effectiveDate": "Tue May 23 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,696 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 19 00:00:00 CET 2026","effectiveDate": "Wed May 24 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,696 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 20 00:00:00 CET 2026","effectiveDate": "Thu May 25 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,696 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 21 00:00:00 CET 2026","effectiveDate": "Fri May 26 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,696 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 22 00:00:00 CET 2026","effectiveDate": "Sat May 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,696 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 23 00:00:00 CET 2026","effectiveDate": "Sun May 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,696 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 24 00:00:00 CET 2026","effectiveDate": "Mon May 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,696 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 25 00:00:00 CET 2026","effectiveDate": "Tue May 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,704 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 26 00:00:00 CET 2026","effectiveDate": "Wed May 31 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,704 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 27 00:00:00 CET 2026","effectiveDate": "Thu Jun 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,704 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 28 00:00:00 CET 2026","effectiveDate": "Fri Jun 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,704 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 29 00:00:00 CET 2026","effectiveDate": "Sat Jun 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,704 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 30 00:00:00 CET 2026","effectiveDate": "Sun Jun 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,704 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 01 00:00:00 CET 2026","effectiveDate": "Mon Jun 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,704 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 02 00:00:00 CET 2026","effectiveDate": "Tue Jun 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,705 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 03 00:00:00 CET 2026","effectiveDate": "Wed Jun 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,705 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 04 00:00:00 CET 2026","effectiveDate": "Thu Jun 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,705 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 05 00:00:00 CET 2026","effectiveDate": "Fri Jun 09 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,713 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 06 00:00:00 CET 2026","effectiveDate": "Sat Jun 10 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,714 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 07 00:00:00 CET 2026","effectiveDate": "Sun Jun 11 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,714 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 08 00:00:00 CET 2026","effectiveDate": "Mon Jun 12 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,714 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 30 00:00:00 CEST 2026","effectiveDate": "Tue Jun 13 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,714 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 01 00:00:00 CEST 2026","effectiveDate": "Wed Jun 14 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,714 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 02 00:00:00 CEST 2026","effectiveDate": "Thu Jun 15 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,714 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 03 00:00:00 CEST 2026","effectiveDate": "Fri Jun 16 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,715 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 04 00:00:00 CEST 2026","effectiveDate": "Sat Jun 17 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,715 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 05 00:00:00 CEST 2026","effectiveDate": "Sun Jun 18 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,715 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 06 00:00:00 CEST 2026","effectiveDate": "Mon Jun 19 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,725 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 07 00:00:00 CEST 2026","effectiveDate": "Tue Jun 20 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,726 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 08 00:00:00 CEST 2026","effectiveDate": "Wed Jun 21 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,726 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 09 00:00:00 CEST 2026","effectiveDate": "Thu Jun 22 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,726 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 10 00:00:00 CEST 2026","effectiveDate": "Fri Jun 23 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,726 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 11 00:00:00 CEST 2026","effectiveDate": "Sat Jun 24 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,726 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 12 00:00:00 CEST 2026","effectiveDate": "Sun Jun 25 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,726 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 13 00:00:00 CEST 2026","effectiveDate": "Mon Jun 26 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,726 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 14 00:00:00 CEST 2026","effectiveDate": "Tue Jun 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,726 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 15 00:00:00 CEST 2026","effectiveDate": "Wed Jun 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,727 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 16 00:00:00 CEST 2026","effectiveDate": "Thu Jun 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,737 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 17 00:00:00 CEST 2026","effectiveDate": "Fri Jun 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,737 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 18 00:00:00 CEST 2026","effectiveDate": "Sat Jul 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,737 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 19 00:00:00 CEST 2026","effectiveDate": "Sun Jul 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,737 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 20 00:00:00 CEST 2026","effectiveDate": "Mon Jul 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,737 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 21 00:00:00 CEST 2026","effectiveDate": "Tue Jul 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,738 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 22 00:00:00 CEST 2026","effectiveDate": "Wed Jul 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,738 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 23 00:00:00 CEST 2026","effectiveDate": "Thu Jul 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,738 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 24 00:00:00 CEST 2026","effectiveDate": "Fri Jul 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,739 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 25 00:00:00 CEST 2026","effectiveDate": "Sat Jul 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,739 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 26 00:00:00 CET 2026","effectiveDate": "Sun Apr 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,750 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 27 00:00:00 CET 2026","effectiveDate": "Mon May 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,750 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 28 00:00:00 CET 2026","effectiveDate": "Tue May 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,750 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 29 00:00:00 CET 2026","effectiveDate": "Wed May 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,751 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 30 00:00:00 CET 2026","effectiveDate": "Thu May 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,751 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 31 00:00:00 CET 2026","effectiveDate": "Fri May 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,751 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 01 00:00:00 CET 2026","effectiveDate": "Sat May 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,751 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 02 00:00:00 CET 2026","effectiveDate": "Sun May 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,751 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 03 00:00:00 CET 2026","effectiveDate": "Mon May 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,751 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 04 00:00:00 CET 2026","effectiveDate": "Tue May 09 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,751 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 05 00:00:00 CET 2026","effectiveDate": "Wed May 10 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,761 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 06 00:00:00 CET 2026","effectiveDate": "Thu May 11 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,761 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 07 00:00:00 CET 2026","effectiveDate": "Fri May 12 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,762 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 08 00:00:00 CET 2026","effectiveDate": "Sat May 13 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,762 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 09 00:00:00 CET 2026","effectiveDate": "Sun May 14 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,762 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 10 00:00:00 CET 2026","effectiveDate": "Mon May 15 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,762 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 11 00:00:00 CET 2026","effectiveDate": "Tue May 16 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,762 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 12 00:00:00 CET 2026","effectiveDate": "Wed May 17 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,762 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 13 00:00:00 CET 2026","effectiveDate": "Thu May 18 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,762 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 14 00:00:00 CET 2026","effectiveDate": "Fri May 19 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,762 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 15 00:00:00 CET 2026","effectiveDate": "Sat May 20 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,771 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 16 00:00:00 CET 2026","effectiveDate": "Sun May 21 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,771 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 17 00:00:00 CET 2026","effectiveDate": "Mon May 22 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,771 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 18 00:00:00 CET 2026","effectiveDate": "Tue May 23 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,771 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 19 00:00:00 CET 2026","effectiveDate": "Wed May 24 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,771 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 20 00:00:00 CET 2026","effectiveDate": "Thu May 25 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,772 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 21 00:00:00 CET 2026","effectiveDate": "Fri May 26 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,772 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 22 00:00:00 CET 2026","effectiveDate": "Sat May 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,772 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 23 00:00:00 CET 2026","effectiveDate": "Sun May 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,772 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 24 00:00:00 CET 2026","effectiveDate": "Mon May 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,772 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 25 00:00:00 CET 2026","effectiveDate": "Tue May 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,782 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 26 00:00:00 CET 2026","effectiveDate": "Wed May 31 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,783 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 27 00:00:00 CET 2026","effectiveDate": "Thu Jun 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,783 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 28 00:00:00 CET 2026","effectiveDate": "Fri Jun 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,783 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 29 00:00:00 CET 2026","effectiveDate": "Sat Jun 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,783 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 30 00:00:00 CET 2026","effectiveDate": "Sun Jun 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,783 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 01 00:00:00 CET 2026","effectiveDate": "Mon Jun 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,783 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 02 00:00:00 CET 2026","effectiveDate": "Tue Jun 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,783 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 03 00:00:00 CET 2026","effectiveDate": "Wed Jun 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,783 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 04 00:00:00 CET 2026","effectiveDate": "Thu Jun 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,783 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 05 00:00:00 CET 2026","effectiveDate": "Fri Jun 09 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,792 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 06 00:00:00 CET 2026","effectiveDate": "Sat Jun 10 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,793 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 07 00:00:00 CET 2026","effectiveDate": "Sun Jun 11 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,793 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 08 00:00:00 CET 2026","effectiveDate": "Mon Jun 12 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,793 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 09 00:00:00 CET 2026","effectiveDate": "Tue Jun 13 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,793 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 10 00:00:00 CET 2026","effectiveDate": "Wed Jun 14 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,793 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 11 00:00:00 CET 2026","effectiveDate": "Thu Jun 15 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,793 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 12 00:00:00 CET 2026","effectiveDate": "Fri Jun 16 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,793 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 13 00:00:00 CET 2026","effectiveDate": "Sat Jun 17 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,793 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 14 00:00:00 CET 2026","effectiveDate": "Sun Jun 18 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,793 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 15 00:00:00 CET 2026","effectiveDate": "Mon Jun 19 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,800 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 16 00:00:00 CET 2026","effectiveDate": "Tue Jun 20 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,800 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 17 00:00:00 CET 2026","effectiveDate": "Wed Jun 21 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,800 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 18 00:00:00 CET 2026","effectiveDate": "Thu Jun 22 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,800 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 19 00:00:00 CET 2026","effectiveDate": "Fri Jun 23 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,800 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 20 00:00:00 CET 2026","effectiveDate": "Sat Jun 24 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,800 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 21 00:00:00 CET 2026","effectiveDate": "Sun Jun 25 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,800 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 22 00:00:00 CET 2026","effectiveDate": "Mon Jun 26 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,800 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 23 00:00:00 CET 2026","effectiveDate": "Tue Jun 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,800 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 24 00:00:00 CET 2026","effectiveDate": "Wed Jun 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,801 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 25 00:00:00 CET 2026","effectiveDate": "Thu Jun 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,810 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 26 00:00:00 CET 2026","effectiveDate": "Fri Jun 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,810 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 27 00:00:00 CET 2026","effectiveDate": "Sat Jul 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,810 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 28 00:00:00 CET 2026","effectiveDate": "Sun Jul 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,810 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 29 00:00:00 CET 2026","effectiveDate": "Mon Jul 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,810 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 30 00:00:00 CET 2026","effectiveDate": "Tue Jul 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,811 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 31 00:00:00 CET 2026","effectiveDate": "Wed Jul 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,811 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 01 00:00:00 CET 2027","effectiveDate": "Thu Jul 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,811 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 02 00:00:00 CET 2027","effectiveDate": "Fri Jul 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,811 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 03 00:00:00 CET 2027","effectiveDate": "Sat Jul 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,811 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 04 00:00:00 CET 2027","effectiveDate": "Sun Jul 09 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,819 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 05 00:00:00 CET 2027","effectiveDate": "Mon Jul 10 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,819 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 06 00:00:00 CET 2027","effectiveDate": "Tue Jul 11 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,819 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 07 00:00:00 CET 2027","effectiveDate": "Wed Jul 12 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,820 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 31 00:00:00 CET 2026","effectiveDate": "Thu Jul 13 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,820 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 01 00:00:00 CET 2026","effectiveDate": "Fri Jul 14 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,820 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 02 00:00:00 CET 2026","effectiveDate": "Sat Jul 15 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,820 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 03 00:00:00 CET 2026","effectiveDate": "Sun Jul 16 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,820 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 04 00:00:00 CET 2026","effectiveDate": "Mon Jul 17 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,820 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 05 00:00:00 CET 2026","effectiveDate": "Tue Jul 18 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,820 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 06 00:00:00 CET 2026","effectiveDate": "Wed Jul 19 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,829 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 07 00:00:00 CET 2026","effectiveDate": "Thu Jul 20 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,829 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 08 00:00:00 CET 2026","effectiveDate": "Fri Jul 21 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,829 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 09 00:00:00 CET 2026","effectiveDate": "Sat Jul 22 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,830 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 10 00:00:00 CET 2026","effectiveDate": "Sun Jul 23 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,830 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 11 00:00:00 CET 2026","effectiveDate": "Mon Jul 24 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,830 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 12 00:00:00 CET 2026","effectiveDate": "Tue Jul 25 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,830 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 13 00:00:00 CET 2026","effectiveDate": "Wed Jul 26 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,830 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 14 00:00:00 CET 2026","effectiveDate": "Thu Jul 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,830 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 15 00:00:00 CET 2026","effectiveDate": "Fri Jul 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,830 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 16 00:00:00 CET 2026","effectiveDate": "Sat Jul 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,837 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 17 00:00:00 CET 2026","effectiveDate": "Sun Jul 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,838 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 18 00:00:00 CET 2026","effectiveDate": "Mon Jul 31 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,838 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 19 00:00:00 CET 2026","effectiveDate": "Tue Aug 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,838 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 20 00:00:00 CET 2026","effectiveDate": "Wed Aug 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,838 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 21 00:00:00 CET 2026","effectiveDate": "Thu Aug 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,838 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 22 00:00:00 CET 2026","effectiveDate": "Fri Aug 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,838 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 23 00:00:00 CET 2026","effectiveDate": "Sat Aug 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,838 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 24 00:00:00 CET 2026","effectiveDate": "Sun Aug 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,838 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 25 00:00:00 CET 2026","effectiveDate": "Mon Aug 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,838 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 26 00:00:00 CET 2026","effectiveDate": "Wed May 31 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,845 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 27 00:00:00 CET 2026","effectiveDate": "Thu Jun 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,845 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 28 00:00:00 CET 2026","effectiveDate": "Fri Jun 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,845 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 29 00:00:00 CET 2026","effectiveDate": "Sat Jun 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,845 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 30 00:00:00 CET 2026","effectiveDate": "Sun Jun 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,846 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 01 00:00:00 CET 2026","effectiveDate": "Mon Jun 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,846 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 02 00:00:00 CET 2026","effectiveDate": "Tue Jun 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,846 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 03 00:00:00 CET 2026","effectiveDate": "Wed Jun 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,846 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 04 00:00:00 CET 2026","effectiveDate": "Thu Jun 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,846 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 05 00:00:00 CET 2026","effectiveDate": "Fri Jun 09 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,846 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 06 00:00:00 CET 2026","effectiveDate": "Sat Jun 10 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,851 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 07 00:00:00 CET 2026","effectiveDate": "Sun Jun 11 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,852 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 08 00:00:00 CET 2026","effectiveDate": "Mon Jun 12 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,852 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 09 00:00:00 CET 2026","effectiveDate": "Tue Jun 13 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,852 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 10 00:00:00 CET 2026","effectiveDate": "Wed Jun 14 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,852 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 11 00:00:00 CET 2026","effectiveDate": "Thu Jun 15 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,852 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 12 00:00:00 CET 2026","effectiveDate": "Fri Jun 16 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,852 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 13 00:00:00 CET 2026","effectiveDate": "Sat Jun 17 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,852 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 14 00:00:00 CET 2026","effectiveDate": "Sun Jun 18 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,852 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 15 00:00:00 CET 2026","effectiveDate": "Mon Jun 19 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,852 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 16 00:00:00 CET 2026","effectiveDate": "Tue Jun 20 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,858 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 17 00:00:00 CET 2026","effectiveDate": "Wed Jun 21 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,858 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 18 00:00:00 CET 2026","effectiveDate": "Thu Jun 22 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,858 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 19 00:00:00 CET 2026","effectiveDate": "Fri Jun 23 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,858 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 20 00:00:00 CET 2026","effectiveDate": "Sat Jun 24 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,858 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 21 00:00:00 CET 2026","effectiveDate": "Sun Jun 25 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,858 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 22 00:00:00 CET 2026","effectiveDate": "Mon Jun 26 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,858 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 23 00:00:00 CET 2026","effectiveDate": "Tue Jun 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,859 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 24 00:00:00 CET 2026","effectiveDate": "Wed Jun 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,859 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 25 00:00:00 CET 2026","effectiveDate": "Thu Jun 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,859 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 26 00:00:00 CET 2026","effectiveDate": "Fri Jun 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,864 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 27 00:00:00 CET 2026","effectiveDate": "Sat Jul 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,864 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 28 00:00:00 CET 2026","effectiveDate": "Sun Jul 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,864 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 29 00:00:00 CET 2026","effectiveDate": "Mon Jul 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,864 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 30 00:00:00 CET 2026","effectiveDate": "Tue Jul 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,864 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 31 00:00:00 CET 2026","effectiveDate": "Wed Jul 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,866 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 01 00:00:00 CET 2027","effectiveDate": "Thu Jul 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,866 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 02 00:00:00 CET 2027","effectiveDate": "Fri Jul 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,866 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 03 00:00:00 CET 2027","effectiveDate": "Sat Jul 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,866 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 04 00:00:00 CET 2027","effectiveDate": "Sun Jul 09 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,866 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 05 00:00:00 CET 2027","effectiveDate": "Mon Jul 10 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,872 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 06 00:00:00 CET 2027","effectiveDate": "Tue Jul 11 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,872 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 07 00:00:00 CET 2027","effectiveDate": "Wed Jul 12 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,872 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 08 00:00:00 CET 2027","effectiveDate": "Thu Jul 13 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,872 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 09 00:00:00 CET 2027","effectiveDate": "Fri Jul 14 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,872 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 10 00:00:00 CET 2027","effectiveDate": "Sat Jul 15 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,872 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 11 00:00:00 CET 2027","effectiveDate": "Sun Jul 16 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,872 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 12 00:00:00 CET 2027","effectiveDate": "Mon Jul 17 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,872 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 13 00:00:00 CET 2027","effectiveDate": "Tue Jul 18 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,872 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 14 00:00:00 CET 2027","effectiveDate": "Wed Jul 19 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,873 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 15 00:00:00 CET 2027","effectiveDate": "Thu Jul 20 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,879 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 16 00:00:00 CET 2027","effectiveDate": "Fri Jul 21 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,879 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 17 00:00:00 CET 2027","effectiveDate": "Sat Jul 22 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,879 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 18 00:00:00 CET 2027","effectiveDate": "Sun Jul 23 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,879 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 19 00:00:00 CET 2027","effectiveDate": "Mon Jul 24 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,880 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 20 00:00:00 CET 2027","effectiveDate": "Tue Jul 25 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,880 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 21 00:00:00 CET 2027","effectiveDate": "Wed Jul 26 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,880 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 22 00:00:00 CET 2027","effectiveDate": "Thu Jul 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,880 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 23 00:00:00 CET 2027","effectiveDate": "Fri Jul 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,880 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 24 00:00:00 CET 2027","effectiveDate": "Sat Jul 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,880 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 25 00:00:00 CET 2027","effectiveDate": "Sun Jul 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,890 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 26 00:00:00 CET 2027","effectiveDate": "Mon Jul 31 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,890 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 27 00:00:00 CET 2027","effectiveDate": "Tue Aug 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,891 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 28 00:00:00 CET 2027","effectiveDate": "Wed Aug 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,891 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 29 00:00:00 CET 2027","effectiveDate": "Thu Aug 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,891 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 30 00:00:00 CET 2027","effectiveDate": "Fri Aug 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,891 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 31 00:00:00 CET 2027","effectiveDate": "Sat Aug 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,891 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 01 00:00:00 CET 2027","effectiveDate": "Sun Aug 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,891 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 02 00:00:00 CET 2027","effectiveDate": "Mon Aug 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,891 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 03 00:00:00 CET 2027","effectiveDate": "Tue Aug 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,891 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 04 00:00:00 CET 2027","effectiveDate": "Wed Aug 09 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,903 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 05 00:00:00 CET 2027","effectiveDate": "Thu Aug 10 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,903 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 06 00:00:00 CET 2027","effectiveDate": "Fri Aug 11 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,904 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 07 00:00:00 CET 2027","effectiveDate": "Sat Aug 12 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,904 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 30 00:00:00 CET 2026","effectiveDate": "Sun Aug 13 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,904 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 01 00:00:00 CET 2026","effectiveDate": "Mon Aug 14 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,904 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 02 00:00:00 CET 2026","effectiveDate": "Tue Aug 15 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,904 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 03 00:00:00 CET 2026","effectiveDate": "Wed Aug 16 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,904 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 04 00:00:00 CET 2026","effectiveDate": "Thu Aug 17 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,904 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 05 00:00:00 CET 2026","effectiveDate": "Fri Aug 18 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,904 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 06 00:00:00 CET 2026","effectiveDate": "Sat Aug 19 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,914 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 07 00:00:00 CET 2026","effectiveDate": "Sun Aug 20 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,914 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 08 00:00:00 CET 2026","effectiveDate": "Mon Aug 21 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,914 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 09 00:00:00 CET 2026","effectiveDate": "Tue Aug 22 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,915 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 10 00:00:00 CET 2026","effectiveDate": "Wed Aug 23 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,915 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 11 00:00:00 CET 2026","effectiveDate": "Thu Aug 24 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,915 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 12 00:00:00 CET 2026","effectiveDate": "Fri Aug 25 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,915 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 13 00:00:00 CET 2026","effectiveDate": "Sat Aug 26 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,915 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 14 00:00:00 CET 2026","effectiveDate": "Sun Aug 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,915 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 15 00:00:00 CET 2026","effectiveDate": "Mon Aug 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,915 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 16 00:00:00 CET 2026","effectiveDate": "Tue Aug 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,924 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 17 00:00:00 CET 2026","effectiveDate": "Wed Aug 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,924 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 18 00:00:00 CET 2026","effectiveDate": "Thu Aug 31 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,924 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 19 00:00:00 CET 2026","effectiveDate": "Fri Sep 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,924 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 20 00:00:00 CET 2026","effectiveDate": "Sat Sep 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,924 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 21 00:00:00 CET 2026","effectiveDate": "Sun Sep 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,924 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 22 00:00:00 CET 2026","effectiveDate": "Mon Sep 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,924 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 23 00:00:00 CET 2026","effectiveDate": "Tue Sep 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,924 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 24 00:00:00 CET 2026","effectiveDate": "Wed Sep 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,925 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 25 00:00:00 CET 2026","effectiveDate": "Thu Sep 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,925 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 26 00:00:00 CET 2026","effectiveDate": "Fri Jun 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,933 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 27 00:00:00 CET 2026","effectiveDate": "Sat Jul 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,933 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 28 00:00:00 CET 2026","effectiveDate": "Sun Jul 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,933 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 29 00:00:00 CET 2026","effectiveDate": "Mon Jul 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,933 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 30 00:00:00 CET 2026","effectiveDate": "Tue Jul 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,933 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 31 00:00:00 CET 2026","effectiveDate": "Wed Jul 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,933 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 01 00:00:00 CET 2027","effectiveDate": "Thu Jul 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,933 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 02 00:00:00 CET 2027","effectiveDate": "Fri Jul 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,933 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 03 00:00:00 CET 2027","effectiveDate": "Sat Jul 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,934 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 04 00:00:00 CET 2027","effectiveDate": "Sun Jul 09 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,934 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 05 00:00:00 CET 2027","effectiveDate": "Mon Jul 10 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,942 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 06 00:00:00 CET 2027","effectiveDate": "Tue Jul 11 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,942 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 07 00:00:00 CET 2027","effectiveDate": "Wed Jul 12 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,942 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 08 00:00:00 CET 2027","effectiveDate": "Thu Jul 13 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,942 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 09 00:00:00 CET 2027","effectiveDate": "Fri Jul 14 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,943 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 10 00:00:00 CET 2027","effectiveDate": "Sat Jul 15 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,943 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 11 00:00:00 CET 2027","effectiveDate": "Sun Jul 16 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,943 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 12 00:00:00 CET 2027","effectiveDate": "Mon Jul 17 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,943 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 13 00:00:00 CET 2027","effectiveDate": "Tue Jul 18 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,944 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 14 00:00:00 CET 2027","effectiveDate": "Wed Jul 19 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,944 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 15 00:00:00 CET 2027","effectiveDate": "Thu Jul 20 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,952 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 16 00:00:00 CET 2027","effectiveDate": "Fri Jul 21 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,952 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 17 00:00:00 CET 2027","effectiveDate": "Sat Jul 22 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,952 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 18 00:00:00 CET 2027","effectiveDate": "Sun Jul 23 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,952 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 19 00:00:00 CET 2027","effectiveDate": "Mon Jul 24 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,954 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 20 00:00:00 CET 2027","effectiveDate": "Tue Jul 25 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,954 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 21 00:00:00 CET 2027","effectiveDate": "Wed Jul 26 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,954 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 22 00:00:00 CET 2027","effectiveDate": "Thu Jul 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,954 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 23 00:00:00 CET 2027","effectiveDate": "Fri Jul 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,954 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 24 00:00:00 CET 2027","effectiveDate": "Sat Jul 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,954 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 25 00:00:00 CET 2027","effectiveDate": "Sun Jul 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,963 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 26 00:00:00 CET 2027","effectiveDate": "Mon Jul 31 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,963 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 27 00:00:00 CET 2027","effectiveDate": "Tue Aug 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,963 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 28 00:00:00 CET 2027","effectiveDate": "Wed Aug 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,964 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 29 00:00:00 CET 2027","effectiveDate": "Thu Aug 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,964 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 30 00:00:00 CET 2027","effectiveDate": "Fri Aug 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,964 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 31 00:00:00 CET 2027","effectiveDate": "Sat Aug 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,964 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 01 00:00:00 CET 2027","effectiveDate": "Sun Aug 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,964 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 02 00:00:00 CET 2027","effectiveDate": "Mon Aug 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,964 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 03 00:00:00 CET 2027","effectiveDate": "Tue Aug 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,964 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 04 00:00:00 CET 2027","effectiveDate": "Wed Aug 09 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,973 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 05 00:00:00 CET 2027","effectiveDate": "Thu Aug 10 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,974 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 06 00:00:00 CET 2027","effectiveDate": "Fri Aug 11 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,974 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 07 00:00:00 CET 2027","effectiveDate": "Sat Aug 12 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,974 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 08 00:00:00 CET 2027","effectiveDate": "Sun Aug 13 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,974 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 09 00:00:00 CET 2027","effectiveDate": "Mon Aug 14 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,975 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 10 00:00:00 CET 2027","effectiveDate": "Tue Aug 15 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,975 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 11 00:00:00 CET 2027","effectiveDate": "Wed Aug 16 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,975 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 12 00:00:00 CET 2027","effectiveDate": "Thu Aug 17 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,975 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 13 00:00:00 CET 2027","effectiveDate": "Fri Aug 18 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,975 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 14 00:00:00 CET 2027","effectiveDate": "Sat Aug 19 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,985 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 15 00:00:00 CET 2027","effectiveDate": "Sun Aug 20 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,985 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 16 00:00:00 CET 2027","effectiveDate": "Mon Aug 21 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,985 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 17 00:00:00 CET 2027","effectiveDate": "Tue Aug 22 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,986 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 18 00:00:00 CET 2027","effectiveDate": "Wed Aug 23 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,986 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 19 00:00:00 CET 2027","effectiveDate": "Thu Aug 24 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,986 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 20 00:00:00 CET 2027","effectiveDate": "Fri Aug 25 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,986 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 21 00:00:00 CET 2027","effectiveDate": "Sat Aug 26 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,986 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 22 00:00:00 CET 2027","effectiveDate": "Sun Aug 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,986 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 23 00:00:00 CET 2027","effectiveDate": "Mon Aug 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,986 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 24 00:00:00 CET 2027","effectiveDate": "Tue Aug 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,995 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 25 00:00:00 CET 2027","effectiveDate": "Wed Aug 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,995 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 26 00:00:00 CET 2027","effectiveDate": "Thu Aug 31 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,995 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 27 00:00:00 CET 2027","effectiveDate": "Fri Sep 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,997 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 28 00:00:00 CET 2027","effectiveDate": "Sat Sep 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,997 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 01 00:00:00 CET 2027","effectiveDate": "Sun Sep 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,997 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 02 00:00:00 CET 2027","effectiveDate": "Mon Sep 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,997 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 03 00:00:00 CET 2027","effectiveDate": "Tue Sep 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,997 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 04 00:00:00 CET 2027","effectiveDate": "Wed Sep 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,997 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 05 00:00:00 CET 2027","effectiveDate": "Thu Sep 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:13,997 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 06 00:00:00 CET 2027","effectiveDate": "Fri Sep 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,008 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 07 00:00:00 CET 2027","effectiveDate": "Sat Sep 09 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,008 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 08 00:00:00 CET 2027","effectiveDate": "Sun Sep 10 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,008 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 09 00:00:00 CET 2027","effectiveDate": "Mon Sep 11 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,008 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 31 00:00:00 CET 2026","effectiveDate": "Tue Sep 12 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,008 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 01 00:00:00 CET 2027","effectiveDate": "Wed Sep 13 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,009 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 02 00:00:00 CET 2027","effectiveDate": "Thu Sep 14 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,009 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 03 00:00:00 CET 2027","effectiveDate": "Fri Sep 15 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,009 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 04 00:00:00 CET 2027","effectiveDate": "Sat Sep 16 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,009 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 05 00:00:00 CET 2027","effectiveDate": "Sun Sep 17 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,009 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 06 00:00:00 CET 2027","effectiveDate": "Mon Sep 18 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,018 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 07 00:00:00 CET 2027","effectiveDate": "Tue Sep 19 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,019 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 08 00:00:00 CET 2027","effectiveDate": "Wed Sep 20 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,019 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 09 00:00:00 CET 2027","effectiveDate": "Thu Sep 21 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,019 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 10 00:00:00 CET 2027","effectiveDate": "Fri Sep 22 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,019 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 11 00:00:00 CET 2027","effectiveDate": "Sat Sep 23 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,019 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 12 00:00:00 CET 2027","effectiveDate": "Sun Sep 24 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,019 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 13 00:00:00 CET 2027","effectiveDate": "Mon Sep 25 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,019 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 14 00:00:00 CET 2027","effectiveDate": "Tue Sep 26 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,019 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 15 00:00:00 CET 2027","effectiveDate": "Wed Sep 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,020 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 16 00:00:00 CET 2027","effectiveDate": "Thu Sep 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,028 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 17 00:00:00 CET 2027","effectiveDate": "Fri Sep 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,028 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 18 00:00:00 CET 2027","effectiveDate": "Sat Sep 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,029 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 19 00:00:00 CET 2027","effectiveDate": "Sun Oct 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,029 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 20 00:00:00 CET 2027","effectiveDate": "Mon Oct 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,029 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 21 00:00:00 CET 2027","effectiveDate": "Tue Oct 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,029 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 22 00:00:00 CET 2027","effectiveDate": "Wed Oct 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,029 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 23 00:00:00 CET 2027","effectiveDate": "Thu Oct 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,029 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 24 00:00:00 CET 2027","effectiveDate": "Fri Oct 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,029 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 25 00:00:00 CET 2027","effectiveDate": "Sat Oct 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,029 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 26 00:00:00 CET 2027","effectiveDate": "Mon Jul 31 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,038 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 27 00:00:00 CET 2027","effectiveDate": "Tue Aug 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,038 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 28 00:00:00 CET 2027","effectiveDate": "Wed Aug 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,038 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 29 00:00:00 CET 2027","effectiveDate": "Thu Aug 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,038 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 30 00:00:00 CET 2027","effectiveDate": "Fri Aug 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,038 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 31 00:00:00 CET 2027","effectiveDate": "Sat Aug 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,039 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 01 00:00:00 CET 2027","effectiveDate": "Sun Aug 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,039 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 02 00:00:00 CET 2027","effectiveDate": "Mon Aug 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,039 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 03 00:00:00 CET 2027","effectiveDate": "Tue Aug 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,039 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 04 00:00:00 CET 2027","effectiveDate": "Wed Aug 09 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,039 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 05 00:00:00 CET 2027","effectiveDate": "Thu Aug 10 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,049 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 06 00:00:00 CET 2027","effectiveDate": "Fri Aug 11 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,049 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 07 00:00:00 CET 2027","effectiveDate": "Sat Aug 12 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,049 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 08 00:00:00 CET 2027","effectiveDate": "Sun Aug 13 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,049 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 09 00:00:00 CET 2027","effectiveDate": "Mon Aug 14 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,050 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 10 00:00:00 CET 2027","effectiveDate": "Tue Aug 15 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,050 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 11 00:00:00 CET 2027","effectiveDate": "Wed Aug 16 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,050 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 12 00:00:00 CET 2027","effectiveDate": "Thu Aug 17 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,050 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 13 00:00:00 CET 2027","effectiveDate": "Fri Aug 18 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,050 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 14 00:00:00 CET 2027","effectiveDate": "Sat Aug 19 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,050 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 15 00:00:00 CET 2027","effectiveDate": "Sun Aug 20 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,057 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 16 00:00:00 CET 2027","effectiveDate": "Mon Aug 21 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,058 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 17 00:00:00 CET 2027","effectiveDate": "Tue Aug 22 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,058 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 18 00:00:00 CET 2027","effectiveDate": "Wed Aug 23 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,058 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 19 00:00:00 CET 2027","effectiveDate": "Thu Aug 24 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,058 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 20 00:00:00 CET 2027","effectiveDate": "Fri Aug 25 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,058 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 21 00:00:00 CET 2027","effectiveDate": "Sat Aug 26 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,058 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 22 00:00:00 CET 2027","effectiveDate": "Sun Aug 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,058 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 23 00:00:00 CET 2027","effectiveDate": "Mon Aug 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,059 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 24 00:00:00 CET 2027","effectiveDate": "Tue Aug 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,059 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 25 00:00:00 CET 2027","effectiveDate": "Wed Aug 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,067 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 26 00:00:00 CET 2027","effectiveDate": "Thu Aug 31 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,067 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 27 00:00:00 CET 2027","effectiveDate": "Fri Sep 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,067 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 28 00:00:00 CET 2027","effectiveDate": "Sat Sep 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,067 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 01 00:00:00 CET 2027","effectiveDate": "Sun Sep 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,068 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 02 00:00:00 CET 2027","effectiveDate": "Mon Sep 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,068 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 03 00:00:00 CET 2027","effectiveDate": "Tue Sep 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,068 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 04 00:00:00 CET 2027","effectiveDate": "Wed Sep 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,068 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 05 00:00:00 CET 2027","effectiveDate": "Thu Sep 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,068 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 06 00:00:00 CET 2027","effectiveDate": "Fri Sep 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,068 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 07 00:00:00 CET 2027","effectiveDate": "Sat Sep 09 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,077 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 08 00:00:00 CET 2027","effectiveDate": "Sun Sep 10 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,077 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 09 00:00:00 CET 2027","effectiveDate": "Mon Sep 11 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,077 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 10 00:00:00 CET 2027","effectiveDate": "Tue Sep 12 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,077 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 11 00:00:00 CET 2027","effectiveDate": "Wed Sep 13 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,078 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 12 00:00:00 CET 2027","effectiveDate": "Thu Sep 14 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,078 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 13 00:00:00 CET 2027","effectiveDate": "Fri Sep 15 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,078 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 14 00:00:00 CET 2027","effectiveDate": "Sat Sep 16 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,078 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 15 00:00:00 CET 2027","effectiveDate": "Sun Sep 17 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,078 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 16 00:00:00 CET 2027","effectiveDate": "Mon Sep 18 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,078 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 17 00:00:00 CET 2027","effectiveDate": "Tue Sep 19 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,085 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 18 00:00:00 CET 2027","effectiveDate": "Wed Sep 20 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,086 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 19 00:00:00 CET 2027","effectiveDate": "Thu Sep 21 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,086 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 20 00:00:00 CET 2027","effectiveDate": "Fri Sep 22 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,086 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 21 00:00:00 CET 2027","effectiveDate": "Sat Sep 23 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,086 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 22 00:00:00 CET 2027","effectiveDate": "Sun Sep 24 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,086 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 23 00:00:00 CET 2027","effectiveDate": "Mon Sep 25 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,087 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 24 00:00:00 CET 2027","effectiveDate": "Tue Sep 26 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,087 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 25 00:00:00 CET 2027","effectiveDate": "Wed Sep 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,087 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 26 00:00:00 CET 2027","effectiveDate": "Thu Sep 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,087 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 27 00:00:00 CET 2027","effectiveDate": "Fri Sep 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,096 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 28 00:00:00 CET 2027","effectiveDate": "Sat Sep 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,096 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 29 00:00:00 CEST 2027","effectiveDate": "Sun Oct 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,096 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 30 00:00:00 CEST 2027","effectiveDate": "Mon Oct 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,096 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 31 00:00:00 CEST 2027","effectiveDate": "Tue Oct 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,096 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 01 00:00:00 CEST 2027","effectiveDate": "Wed Oct 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,096 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 02 00:00:00 CEST 2027","effectiveDate": "Thu Oct 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,096 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 03 00:00:00 CEST 2027","effectiveDate": "Fri Oct 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,097 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 04 00:00:00 CEST 2027","effectiveDate": "Sat Oct 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,097 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 05 00:00:00 CEST 2027","effectiveDate": "Sun Oct 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,097 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 06 00:00:00 CEST 2027","effectiveDate": "Mon Oct 09 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,104 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 07 00:00:00 CEST 2027","effectiveDate": "Tue Oct 10 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,104 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 08 00:00:00 CEST 2027","effectiveDate": "Wed Oct 11 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,104 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 09 00:00:00 CEST 2027","effectiveDate": "Thu Oct 12 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,104 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 31 00:00:00 CET 2027","effectiveDate": "Fri Oct 13 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,105 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 01 00:00:00 CET 2027","effectiveDate": "Sat Oct 14 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,105 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 02 00:00:00 CET 2027","effectiveDate": "Sun Oct 15 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,105 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 03 00:00:00 CET 2027","effectiveDate": "Mon Oct 16 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,105 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 04 00:00:00 CET 2027","effectiveDate": "Tue Oct 17 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,105 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 05 00:00:00 CET 2027","effectiveDate": "Wed Oct 18 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,105 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 06 00:00:00 CET 2027","effectiveDate": "Thu Oct 19 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,114 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 07 00:00:00 CET 2027","effectiveDate": "Fri Oct 20 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,114 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 08 00:00:00 CET 2027","effectiveDate": "Sat Oct 21 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,114 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 09 00:00:00 CET 2027","effectiveDate": "Sun Oct 22 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,114 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 10 00:00:00 CET 2027","effectiveDate": "Mon Oct 23 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,114 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 11 00:00:00 CET 2027","effectiveDate": "Tue Oct 24 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,115 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 12 00:00:00 CET 2027","effectiveDate": "Wed Oct 25 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,115 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 13 00:00:00 CET 2027","effectiveDate": "Thu Oct 26 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,115 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 14 00:00:00 CET 2027","effectiveDate": "Fri Oct 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,116 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 15 00:00:00 CET 2027","effectiveDate": "Sat Oct 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,116 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 16 00:00:00 CET 2027","effectiveDate": "Sun Oct 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,127 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 17 00:00:00 CET 2027","effectiveDate": "Mon Oct 30 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,127 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 18 00:00:00 CET 2027","effectiveDate": "Tue Oct 31 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,127 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 19 00:00:00 CET 2027","effectiveDate": "Wed Nov 01 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,127 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 20 00:00:00 CET 2027","effectiveDate": "Thu Nov 02 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,127 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 21 00:00:00 CET 2027","effectiveDate": "Fri Nov 03 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,127 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 22 00:00:00 CET 2027","effectiveDate": "Sat Nov 04 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,128 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 23 00:00:00 CET 2027","effectiveDate": "Sun Nov 05 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,128 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 24 00:00:00 CET 2027","effectiveDate": "Mon Nov 06 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,128 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 25 00:00:00 CET 2027","effectiveDate": "Tue Nov 07 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,128 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 26 00:00:00 CET 2027","effectiveDate": "Thu Aug 31 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,135 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 27 00:00:00 CET 2027","effectiveDate": "Fri Sep 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,135 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 28 00:00:00 CET 2027","effectiveDate": "Sat Sep 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,135 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 01 00:00:00 CET 2027","effectiveDate": "Sun Sep 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,135 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 02 00:00:00 CET 2027","effectiveDate": "Mon Sep 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,135 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 03 00:00:00 CET 2027","effectiveDate": "Tue Sep 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,135 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 04 00:00:00 CET 2027","effectiveDate": "Wed Sep 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,135 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 05 00:00:00 CET 2027","effectiveDate": "Thu Sep 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,135 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 06 00:00:00 CET 2027","effectiveDate": "Fri Sep 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,135 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 07 00:00:00 CET 2027","effectiveDate": "Sat Sep 09 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,136 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 08 00:00:00 CET 2027","effectiveDate": "Sun Sep 10 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,142 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 09 00:00:00 CET 2027","effectiveDate": "Mon Sep 11 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,142 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 10 00:00:00 CET 2027","effectiveDate": "Tue Sep 12 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,142 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 11 00:00:00 CET 2027","effectiveDate": "Wed Sep 13 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,143 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 12 00:00:00 CET 2027","effectiveDate": "Thu Sep 14 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,143 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 13 00:00:00 CET 2027","effectiveDate": "Fri Sep 15 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,143 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 14 00:00:00 CET 2027","effectiveDate": "Sat Sep 16 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,143 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 15 00:00:00 CET 2027","effectiveDate": "Sun Sep 17 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,143 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 16 00:00:00 CET 2027","effectiveDate": "Mon Sep 18 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,143 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 17 00:00:00 CET 2027","effectiveDate": "Tue Sep 19 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,143 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 18 00:00:00 CET 2027","effectiveDate": "Wed Sep 20 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,152 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 19 00:00:00 CET 2027","effectiveDate": "Thu Sep 21 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,153 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 20 00:00:00 CET 2027","effectiveDate": "Fri Sep 22 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,153 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 21 00:00:00 CET 2027","effectiveDate": "Sat Sep 23 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,153 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 22 00:00:00 CET 2027","effectiveDate": "Sun Sep 24 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,153 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 23 00:00:00 CET 2027","effectiveDate": "Mon Sep 25 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,153 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 24 00:00:00 CET 2027","effectiveDate": "Tue Sep 26 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,154 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 25 00:00:00 CET 2027","effectiveDate": "Wed Sep 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,154 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 26 00:00:00 CET 2027","effectiveDate": "Thu Sep 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,154 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 27 00:00:00 CET 2027","effectiveDate": "Fri Sep 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,154 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 28 00:00:00 CET 2027","effectiveDate": "Sat Sep 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,164 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 29 00:00:00 CEST 2027","effectiveDate": "Sun Oct 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,165 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 30 00:00:00 CEST 2027","effectiveDate": "Mon Oct 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,165 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 31 00:00:00 CEST 2027","effectiveDate": "Tue Oct 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,165 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 01 00:00:00 CEST 2027","effectiveDate": "Wed Oct 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,165 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 02 00:00:00 CEST 2027","effectiveDate": "Thu Oct 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,165 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 03 00:00:00 CEST 2027","effectiveDate": "Fri Oct 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,166 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 04 00:00:00 CEST 2027","effectiveDate": "Sat Oct 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,166 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 05 00:00:00 CEST 2027","effectiveDate": "Sun Oct 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,166 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 06 00:00:00 CEST 2027","effectiveDate": "Mon Oct 09 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,166 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 07 00:00:00 CEST 2027","effectiveDate": "Tue Oct 10 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,176 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 08 00:00:00 CEST 2027","effectiveDate": "Wed Oct 11 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,176 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 09 00:00:00 CEST 2027","effectiveDate": "Thu Oct 12 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,176 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 10 00:00:00 CEST 2027","effectiveDate": "Fri Oct 13 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,176 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 11 00:00:00 CEST 2027","effectiveDate": "Sat Oct 14 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,176 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 12 00:00:00 CEST 2027","effectiveDate": "Sun Oct 15 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,176 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 13 00:00:00 CEST 2027","effectiveDate": "Mon Oct 16 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,176 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 14 00:00:00 CEST 2027","effectiveDate": "Tue Oct 17 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,177 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 15 00:00:00 CEST 2027","effectiveDate": "Wed Oct 18 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,177 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 16 00:00:00 CEST 2027","effectiveDate": "Thu Oct 19 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,177 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 17 00:00:00 CEST 2027","effectiveDate": "Fri Oct 20 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,185 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 18 00:00:00 CEST 2027","effectiveDate": "Sat Oct 21 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,185 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 19 00:00:00 CEST 2027","effectiveDate": "Sun Oct 22 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,185 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 20 00:00:00 CEST 2027","effectiveDate": "Mon Oct 23 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,185 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 21 00:00:00 CEST 2027","effectiveDate": "Tue Oct 24 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,185 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 22 00:00:00 CEST 2027","effectiveDate": "Wed Oct 25 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,185 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 23 00:00:00 CEST 2027","effectiveDate": "Thu Oct 26 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,185 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 24 00:00:00 CEST 2027","effectiveDate": "Fri Oct 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,186 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 25 00:00:00 CEST 2027","effectiveDate": "Sat Oct 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,186 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 26 00:00:00 CEST 2027","effectiveDate": "Sun Oct 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,186 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 27 00:00:00 CEST 2027","effectiveDate": "Mon Oct 30 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,194 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 28 00:00:00 CEST 2027","effectiveDate": "Tue Oct 31 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,194 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 29 00:00:00 CEST 2027","effectiveDate": "Wed Nov 01 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,194 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 30 00:00:00 CEST 2027","effectiveDate": "Thu Nov 02 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,194 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 01 00:00:00 CEST 2027","effectiveDate": "Fri Nov 03 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,194 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 02 00:00:00 CEST 2027","effectiveDate": "Sat Nov 04 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,194 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 03 00:00:00 CEST 2027","effectiveDate": "Sun Nov 05 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,194 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 04 00:00:00 CEST 2027","effectiveDate": "Mon Nov 06 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,194 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 05 00:00:00 CEST 2027","effectiveDate": "Tue Nov 07 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,194 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 06 00:00:00 CEST 2027","effectiveDate": "Wed Nov 08 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,194 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 07 00:00:00 CEST 2027","effectiveDate": "Thu Nov 09 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,204 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 08 00:00:00 CEST 2027","effectiveDate": "Fri Nov 10 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,204 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 09 00:00:00 CEST 2027","effectiveDate": "Sat Nov 11 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,205 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 10 00:00:00 CEST 2027","effectiveDate": "Sun Nov 12 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,205 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 28 00:00:00 CET 2027","effectiveDate": "Mon Nov 13 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,205 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 01 00:00:00 CET 2027","effectiveDate": "Tue Nov 14 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,205 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 02 00:00:00 CET 2027","effectiveDate": "Wed Nov 15 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,205 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 03 00:00:00 CET 2027","effectiveDate": "Thu Nov 16 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,205 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 04 00:00:00 CET 2027","effectiveDate": "Fri Nov 17 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,205 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 05 00:00:00 CET 2027","effectiveDate": "Sat Nov 18 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,205 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 06 00:00:00 CET 2027","effectiveDate": "Sun Nov 19 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,214 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 07 00:00:00 CET 2027","effectiveDate": "Mon Nov 20 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,214 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 08 00:00:00 CET 2027","effectiveDate": "Tue Nov 21 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,214 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 09 00:00:00 CET 2027","effectiveDate": "Wed Nov 22 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,214 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 10 00:00:00 CET 2027","effectiveDate": "Thu Nov 23 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,214 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 11 00:00:00 CET 2027","effectiveDate": "Fri Nov 24 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,214 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 12 00:00:00 CET 2027","effectiveDate": "Sat Nov 25 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,214 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 13 00:00:00 CET 2027","effectiveDate": "Sun Nov 26 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,214 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 14 00:00:00 CET 2027","effectiveDate": "Mon Nov 27 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,215 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 15 00:00:00 CET 2027","effectiveDate": "Tue Nov 28 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,215 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 16 00:00:00 CET 2027","effectiveDate": "Wed Nov 29 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,227 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 17 00:00:00 CET 2027","effectiveDate": "Thu Nov 30 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,228 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 18 00:00:00 CET 2027","effectiveDate": "Fri Dec 01 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,228 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 19 00:00:00 CET 2027","effectiveDate": "Sat Dec 02 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,228 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 20 00:00:00 CET 2027","effectiveDate": "Sun Dec 03 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,228 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 21 00:00:00 CET 2027","effectiveDate": "Mon Dec 04 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,228 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 22 00:00:00 CET 2027","effectiveDate": "Tue Dec 05 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,228 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 23 00:00:00 CET 2027","effectiveDate": "Wed Dec 06 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,229 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 24 00:00:00 CET 2027","effectiveDate": "Thu Dec 07 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,229 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 25 00:00:00 CET 2027","effectiveDate": "Fri Dec 08 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,229 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 26 00:00:00 CET 2027","effectiveDate": "Sat Sep 30 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,237 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 27 00:00:00 CET 2027","effectiveDate": "Sun Oct 01 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,237 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 28 00:00:00 CET 2027","effectiveDate": "Mon Oct 02 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,237 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 29 00:00:00 CEST 2027","effectiveDate": "Tue Oct 03 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,237 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 30 00:00:00 CEST 2027","effectiveDate": "Wed Oct 04 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,237 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 31 00:00:00 CEST 2027","effectiveDate": "Thu Oct 05 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,238 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 01 00:00:00 CEST 2027","effectiveDate": "Fri Oct 06 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,238 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 02 00:00:00 CEST 2027","effectiveDate": "Sat Oct 07 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,238 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 03 00:00:00 CEST 2027","effectiveDate": "Sun Oct 08 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,238 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 04 00:00:00 CEST 2027","effectiveDate": "Mon Oct 09 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,238 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 05 00:00:00 CEST 2027","effectiveDate": "Tue Oct 10 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,245 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 06 00:00:00 CEST 2027","effectiveDate": "Wed Oct 11 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,246 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 07 00:00:00 CEST 2027","effectiveDate": "Thu Oct 12 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,246 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 08 00:00:00 CEST 2027","effectiveDate": "Fri Oct 13 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,246 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 09 00:00:00 CEST 2027","effectiveDate": "Sat Oct 14 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,246 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 10 00:00:00 CEST 2027","effectiveDate": "Sun Oct 15 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,246 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 11 00:00:00 CEST 2027","effectiveDate": "Mon Oct 16 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,246 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 12 00:00:00 CEST 2027","effectiveDate": "Tue Oct 17 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,246 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 13 00:00:00 CEST 2027","effectiveDate": "Wed Oct 18 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,246 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 14 00:00:00 CEST 2027","effectiveDate": "Thu Oct 19 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,247 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 15 00:00:00 CEST 2027","effectiveDate": "Fri Oct 20 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,254 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 16 00:00:00 CEST 2027","effectiveDate": "Sat Oct 21 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,254 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 17 00:00:00 CEST 2027","effectiveDate": "Sun Oct 22 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,255 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 18 00:00:00 CEST 2027","effectiveDate": "Mon Oct 23 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,255 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 19 00:00:00 CEST 2027","effectiveDate": "Tue Oct 24 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,255 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 20 00:00:00 CEST 2027","effectiveDate": "Wed Oct 25 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,255 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 21 00:00:00 CEST 2027","effectiveDate": "Thu Oct 26 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,255 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 22 00:00:00 CEST 2027","effectiveDate": "Fri Oct 27 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,255 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 23 00:00:00 CEST 2027","effectiveDate": "Sat Oct 28 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,255 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 24 00:00:00 CEST 2027","effectiveDate": "Sun Oct 29 00:00:00 CEST 2028"
	  }]
})
2023-04-15 17:23:14,255 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 25 00:00:00 CEST 2027","effectiveDate": "Mon Oct 30 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,263 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 26 00:00:00 CEST 2027","effectiveDate": "Tue Oct 31 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,263 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 27 00:00:00 CEST 2027","effectiveDate": "Wed Nov 01 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,263 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 28 00:00:00 CEST 2027","effectiveDate": "Thu Nov 02 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,263 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 29 00:00:00 CEST 2027","effectiveDate": "Fri Nov 03 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,263 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 30 00:00:00 CEST 2027","effectiveDate": "Sat Nov 04 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,263 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 01 00:00:00 CEST 2027","effectiveDate": "Sun Nov 05 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,263 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 02 00:00:00 CEST 2027","effectiveDate": "Mon Nov 06 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,263 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 03 00:00:00 CEST 2027","effectiveDate": "Tue Nov 07 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,264 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 04 00:00:00 CEST 2027","effectiveDate": "Wed Nov 08 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,264 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 05 00:00:00 CEST 2027","effectiveDate": "Thu Nov 09 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,271 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 06 00:00:00 CEST 2027","effectiveDate": "Fri Nov 10 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,271 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 07 00:00:00 CEST 2027","effectiveDate": "Sat Nov 11 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,272 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 08 00:00:00 CEST 2027","effectiveDate": "Sun Nov 12 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,272 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 09 00:00:00 CEST 2027","effectiveDate": "Mon Nov 13 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,272 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 10 00:00:00 CEST 2027","effectiveDate": "Tue Nov 14 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,272 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 11 00:00:00 CEST 2027","effectiveDate": "Wed Nov 15 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,272 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 12 00:00:00 CEST 2027","effectiveDate": "Thu Nov 16 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,272 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 13 00:00:00 CEST 2027","effectiveDate": "Fri Nov 17 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,272 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 14 00:00:00 CEST 2027","effectiveDate": "Sat Nov 18 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,272 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 15 00:00:00 CEST 2027","effectiveDate": "Sun Nov 19 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,279 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 16 00:00:00 CEST 2027","effectiveDate": "Mon Nov 20 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,279 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 17 00:00:00 CEST 2027","effectiveDate": "Tue Nov 21 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,279 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 18 00:00:00 CEST 2027","effectiveDate": "Wed Nov 22 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,279 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 19 00:00:00 CEST 2027","effectiveDate": "Thu Nov 23 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,279 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 20 00:00:00 CEST 2027","effectiveDate": "Fri Nov 24 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,279 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 21 00:00:00 CEST 2027","effectiveDate": "Sat Nov 25 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,279 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 22 00:00:00 CEST 2027","effectiveDate": "Sun Nov 26 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,279 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 23 00:00:00 CEST 2027","effectiveDate": "Mon Nov 27 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,280 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 24 00:00:00 CEST 2027","effectiveDate": "Tue Nov 28 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,280 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 25 00:00:00 CEST 2027","effectiveDate": "Wed Nov 29 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,286 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 26 00:00:00 CEST 2027","effectiveDate": "Thu Nov 30 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,286 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 27 00:00:00 CEST 2027","effectiveDate": "Fri Dec 01 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,286 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 28 00:00:00 CEST 2027","effectiveDate": "Sat Dec 02 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,287 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 29 00:00:00 CEST 2027","effectiveDate": "Sun Dec 03 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,287 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 30 00:00:00 CEST 2027","effectiveDate": "Mon Dec 04 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,287 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 31 00:00:00 CEST 2027","effectiveDate": "Tue Dec 05 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,287 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 01 00:00:00 CEST 2027","effectiveDate": "Wed Dec 06 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,287 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 02 00:00:00 CEST 2027","effectiveDate": "Thu Dec 07 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,287 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 03 00:00:00 CEST 2027","effectiveDate": "Fri Dec 08 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,287 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 04 00:00:00 CEST 2027","effectiveDate": "Sat Dec 09 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,297 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 05 00:00:00 CEST 2027","effectiveDate": "Sun Dec 10 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,297 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 06 00:00:00 CEST 2027","effectiveDate": "Mon Dec 11 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,297 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 07 00:00:00 CEST 2027","effectiveDate": "Tue Dec 12 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,297 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 31 00:00:00 CEST 2027","effectiveDate": "Wed Dec 13 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,297 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 01 00:00:00 CEST 2027","effectiveDate": "Thu Dec 14 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,297 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 02 00:00:00 CEST 2027","effectiveDate": "Fri Dec 15 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,297 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 03 00:00:00 CEST 2027","effectiveDate": "Sat Dec 16 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,297 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 04 00:00:00 CEST 2027","effectiveDate": "Sun Dec 17 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,297 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 05 00:00:00 CEST 2027","effectiveDate": "Mon Dec 18 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,298 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 06 00:00:00 CEST 2027","effectiveDate": "Tue Dec 19 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,304 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 07 00:00:00 CEST 2027","effectiveDate": "Wed Dec 20 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,304 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 08 00:00:00 CEST 2027","effectiveDate": "Thu Dec 21 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,305 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 09 00:00:00 CEST 2027","effectiveDate": "Fri Dec 22 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,305 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 10 00:00:00 CEST 2027","effectiveDate": "Sat Dec 23 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,305 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 11 00:00:00 CEST 2027","effectiveDate": "Sun Dec 24 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,305 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 12 00:00:00 CEST 2027","effectiveDate": "Mon Dec 25 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,305 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 13 00:00:00 CEST 2027","effectiveDate": "Tue Dec 26 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,305 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 14 00:00:00 CEST 2027","effectiveDate": "Wed Dec 27 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,305 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 15 00:00:00 CEST 2027","effectiveDate": "Thu Dec 28 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,305 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 16 00:00:00 CEST 2027","effectiveDate": "Fri Dec 29 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,315 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 17 00:00:00 CEST 2027","effectiveDate": "Sat Dec 30 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,315 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 18 00:00:00 CEST 2027","effectiveDate": "Sun Dec 31 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,315 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 19 00:00:00 CEST 2027","effectiveDate": "Mon Jan 01 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,315 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 20 00:00:00 CEST 2027","effectiveDate": "Tue Jan 02 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,316 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 21 00:00:00 CEST 2027","effectiveDate": "Wed Jan 03 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,316 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 22 00:00:00 CEST 2027","effectiveDate": "Thu Jan 04 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,316 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 23 00:00:00 CEST 2027","effectiveDate": "Fri Jan 05 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,316 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 24 00:00:00 CEST 2027","effectiveDate": "Sat Jan 06 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,316 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 25 00:00:00 CEST 2027","effectiveDate": "Sun Jan 07 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,316 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 26 00:00:00 CEST 2027","effectiveDate": "Tue Oct 31 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,328 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 27 00:00:00 CEST 2027","effectiveDate": "Wed Nov 01 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,328 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 28 00:00:00 CEST 2027","effectiveDate": "Thu Nov 02 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,328 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 29 00:00:00 CEST 2027","effectiveDate": "Fri Nov 03 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,328 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 30 00:00:00 CEST 2027","effectiveDate": "Sat Nov 04 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,329 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 01 00:00:00 CEST 2027","effectiveDate": "Sun Nov 05 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,329 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 02 00:00:00 CEST 2027","effectiveDate": "Mon Nov 06 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,329 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 03 00:00:00 CEST 2027","effectiveDate": "Tue Nov 07 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,329 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 04 00:00:00 CEST 2027","effectiveDate": "Wed Nov 08 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,329 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 05 00:00:00 CEST 2027","effectiveDate": "Thu Nov 09 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,329 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 06 00:00:00 CEST 2027","effectiveDate": "Fri Nov 10 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,341 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 07 00:00:00 CEST 2027","effectiveDate": "Sat Nov 11 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,341 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 08 00:00:00 CEST 2027","effectiveDate": "Sun Nov 12 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,342 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 09 00:00:00 CEST 2027","effectiveDate": "Mon Nov 13 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,342 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 10 00:00:00 CEST 2027","effectiveDate": "Tue Nov 14 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,342 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 11 00:00:00 CEST 2027","effectiveDate": "Wed Nov 15 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,342 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 12 00:00:00 CEST 2027","effectiveDate": "Thu Nov 16 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,342 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 13 00:00:00 CEST 2027","effectiveDate": "Fri Nov 17 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,342 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 14 00:00:00 CEST 2027","effectiveDate": "Sat Nov 18 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,342 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 15 00:00:00 CEST 2027","effectiveDate": "Sun Nov 19 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,342 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 16 00:00:00 CEST 2027","effectiveDate": "Mon Nov 20 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,352 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 17 00:00:00 CEST 2027","effectiveDate": "Tue Nov 21 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,352 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 18 00:00:00 CEST 2027","effectiveDate": "Wed Nov 22 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,352 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 19 00:00:00 CEST 2027","effectiveDate": "Thu Nov 23 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,352 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 20 00:00:00 CEST 2027","effectiveDate": "Fri Nov 24 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,352 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 21 00:00:00 CEST 2027","effectiveDate": "Sat Nov 25 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,352 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 22 00:00:00 CEST 2027","effectiveDate": "Sun Nov 26 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,352 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 23 00:00:00 CEST 2027","effectiveDate": "Mon Nov 27 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,353 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 24 00:00:00 CEST 2027","effectiveDate": "Tue Nov 28 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,353 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 25 00:00:00 CEST 2027","effectiveDate": "Wed Nov 29 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,353 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 26 00:00:00 CEST 2027","effectiveDate": "Thu Nov 30 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,361 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 27 00:00:00 CEST 2027","effectiveDate": "Fri Dec 01 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,362 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 28 00:00:00 CEST 2027","effectiveDate": "Sat Dec 02 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,362 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 29 00:00:00 CEST 2027","effectiveDate": "Sun Dec 03 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,362 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 30 00:00:00 CEST 2027","effectiveDate": "Mon Dec 04 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,362 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 31 00:00:00 CEST 2027","effectiveDate": "Tue Dec 05 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,362 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 01 00:00:00 CEST 2027","effectiveDate": "Wed Dec 06 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,363 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 02 00:00:00 CEST 2027","effectiveDate": "Thu Dec 07 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,363 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 03 00:00:00 CEST 2027","effectiveDate": "Fri Dec 08 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,367 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 04 00:00:00 CEST 2027","effectiveDate": "Sat Dec 09 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,367 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 05 00:00:00 CEST 2027","effectiveDate": "Sun Dec 10 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,375 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 06 00:00:00 CEST 2027","effectiveDate": "Mon Dec 11 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,376 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 07 00:00:00 CEST 2027","effectiveDate": "Tue Dec 12 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,376 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 08 00:00:00 CEST 2027","effectiveDate": "Wed Dec 13 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,376 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 09 00:00:00 CEST 2027","effectiveDate": "Thu Dec 14 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,376 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 10 00:00:00 CEST 2027","effectiveDate": "Fri Dec 15 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,376 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 11 00:00:00 CEST 2027","effectiveDate": "Sat Dec 16 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,376 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 12 00:00:00 CEST 2027","effectiveDate": "Sun Dec 17 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,376 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 13 00:00:00 CEST 2027","effectiveDate": "Mon Dec 18 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,376 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 14 00:00:00 CEST 2027","effectiveDate": "Tue Dec 19 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,376 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 15 00:00:00 CEST 2027","effectiveDate": "Wed Dec 20 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,385 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 16 00:00:00 CEST 2027","effectiveDate": "Thu Dec 21 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,385 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 17 00:00:00 CEST 2027","effectiveDate": "Fri Dec 22 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,385 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 18 00:00:00 CEST 2027","effectiveDate": "Sat Dec 23 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,386 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 19 00:00:00 CEST 2027","effectiveDate": "Sun Dec 24 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,386 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 20 00:00:00 CEST 2027","effectiveDate": "Mon Dec 25 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,386 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 21 00:00:00 CEST 2027","effectiveDate": "Tue Dec 26 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,386 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 22 00:00:00 CEST 2027","effectiveDate": "Wed Dec 27 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,386 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 23 00:00:00 CEST 2027","effectiveDate": "Thu Dec 28 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,386 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 24 00:00:00 CEST 2027","effectiveDate": "Fri Dec 29 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,386 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 25 00:00:00 CEST 2027","effectiveDate": "Sat Dec 30 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,394 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 26 00:00:00 CEST 2027","effectiveDate": "Sun Dec 31 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,395 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 27 00:00:00 CEST 2027","effectiveDate": "Mon Jan 01 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,395 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 28 00:00:00 CEST 2027","effectiveDate": "Tue Jan 02 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,395 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 29 00:00:00 CEST 2027","effectiveDate": "Wed Jan 03 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,395 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 30 00:00:00 CEST 2027","effectiveDate": "Thu Jan 04 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,395 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 01 00:00:00 CEST 2027","effectiveDate": "Fri Jan 05 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,396 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 02 00:00:00 CEST 2027","effectiveDate": "Sat Jan 06 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,396 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 03 00:00:00 CEST 2027","effectiveDate": "Sun Jan 07 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,396 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 04 00:00:00 CEST 2027","effectiveDate": "Mon Jan 08 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,396 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 05 00:00:00 CEST 2027","effectiveDate": "Tue Jan 09 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,405 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 06 00:00:00 CEST 2027","effectiveDate": "Wed Jan 10 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,406 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 07 00:00:00 CEST 2027","effectiveDate": "Thu Jan 11 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,406 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 08 00:00:00 CEST 2027","effectiveDate": "Fri Jan 12 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,406 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 30 00:00:00 CEST 2027","effectiveDate": "Sat Jan 13 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,406 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 01 00:00:00 CEST 2027","effectiveDate": "Sun Jan 14 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,406 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 02 00:00:00 CEST 2027","effectiveDate": "Mon Jan 15 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,406 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 03 00:00:00 CEST 2027","effectiveDate": "Tue Jan 16 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,406 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 04 00:00:00 CEST 2027","effectiveDate": "Wed Jan 17 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,407 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 05 00:00:00 CEST 2027","effectiveDate": "Thu Jan 18 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,407 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 06 00:00:00 CEST 2027","effectiveDate": "Fri Jan 19 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,415 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 07 00:00:00 CEST 2027","effectiveDate": "Sat Jan 20 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,415 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 08 00:00:00 CEST 2027","effectiveDate": "Sun Jan 21 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,415 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 09 00:00:00 CEST 2027","effectiveDate": "Mon Jan 22 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,416 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 10 00:00:00 CEST 2027","effectiveDate": "Tue Jan 23 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,416 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 11 00:00:00 CEST 2027","effectiveDate": "Wed Jan 24 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,416 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 12 00:00:00 CEST 2027","effectiveDate": "Thu Jan 25 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,416 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 13 00:00:00 CEST 2027","effectiveDate": "Fri Jan 26 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,416 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 14 00:00:00 CEST 2027","effectiveDate": "Sat Jan 27 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,416 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 15 00:00:00 CEST 2027","effectiveDate": "Sun Jan 28 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,416 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 16 00:00:00 CEST 2027","effectiveDate": "Mon Jan 29 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,425 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 17 00:00:00 CEST 2027","effectiveDate": "Tue Jan 30 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,425 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 18 00:00:00 CEST 2027","effectiveDate": "Wed Jan 31 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,425 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 19 00:00:00 CEST 2027","effectiveDate": "Thu Feb 01 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,425 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 20 00:00:00 CEST 2027","effectiveDate": "Fri Feb 02 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,425 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 21 00:00:00 CEST 2027","effectiveDate": "Sat Feb 03 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,425 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 22 00:00:00 CEST 2027","effectiveDate": "Sun Feb 04 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,426 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 23 00:00:00 CEST 2027","effectiveDate": "Mon Feb 05 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,426 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 24 00:00:00 CEST 2027","effectiveDate": "Tue Feb 06 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,426 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue May 25 00:00:00 CEST 2027","effectiveDate": "Wed Feb 07 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,426 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed May 26 00:00:00 CEST 2027","effectiveDate": "Thu Nov 30 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,435 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu May 27 00:00:00 CEST 2027","effectiveDate": "Fri Dec 01 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,435 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri May 28 00:00:00 CEST 2027","effectiveDate": "Sat Dec 02 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,435 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat May 29 00:00:00 CEST 2027","effectiveDate": "Sun Dec 03 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,435 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun May 30 00:00:00 CEST 2027","effectiveDate": "Mon Dec 04 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,435 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 31 00:00:00 CEST 2027","effectiveDate": "Tue Dec 05 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,435 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 01 00:00:00 CEST 2027","effectiveDate": "Wed Dec 06 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,436 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 02 00:00:00 CEST 2027","effectiveDate": "Thu Dec 07 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,436 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 03 00:00:00 CEST 2027","effectiveDate": "Fri Dec 08 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,436 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 04 00:00:00 CEST 2027","effectiveDate": "Sat Dec 09 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,436 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 05 00:00:00 CEST 2027","effectiveDate": "Sun Dec 10 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,448 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 06 00:00:00 CEST 2027","effectiveDate": "Mon Dec 11 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,449 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 07 00:00:00 CEST 2027","effectiveDate": "Tue Dec 12 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,449 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 08 00:00:00 CEST 2027","effectiveDate": "Wed Dec 13 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,449 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 09 00:00:00 CEST 2027","effectiveDate": "Thu Dec 14 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,449 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 10 00:00:00 CEST 2027","effectiveDate": "Fri Dec 15 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,449 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 11 00:00:00 CEST 2027","effectiveDate": "Sat Dec 16 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,451 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 12 00:00:00 CEST 2027","effectiveDate": "Sun Dec 17 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,451 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 13 00:00:00 CEST 2027","effectiveDate": "Mon Dec 18 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,451 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 14 00:00:00 CEST 2027","effectiveDate": "Tue Dec 19 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,451 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 15 00:00:00 CEST 2027","effectiveDate": "Wed Dec 20 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,461 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 16 00:00:00 CEST 2027","effectiveDate": "Thu Dec 21 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,461 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 17 00:00:00 CEST 2027","effectiveDate": "Fri Dec 22 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,461 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 18 00:00:00 CEST 2027","effectiveDate": "Sat Dec 23 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,462 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 19 00:00:00 CEST 2027","effectiveDate": "Sun Dec 24 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,462 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 20 00:00:00 CEST 2027","effectiveDate": "Mon Dec 25 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,462 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 21 00:00:00 CEST 2027","effectiveDate": "Tue Dec 26 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,462 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 22 00:00:00 CEST 2027","effectiveDate": "Wed Dec 27 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,462 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 23 00:00:00 CEST 2027","effectiveDate": "Thu Dec 28 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,462 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 24 00:00:00 CEST 2027","effectiveDate": "Fri Dec 29 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,463 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 25 00:00:00 CEST 2027","effectiveDate": "Sat Dec 30 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,471 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 26 00:00:00 CEST 2027","effectiveDate": "Sun Dec 31 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,472 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 27 00:00:00 CEST 2027","effectiveDate": "Mon Jan 01 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,472 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 28 00:00:00 CEST 2027","effectiveDate": "Tue Jan 02 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,472 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 29 00:00:00 CEST 2027","effectiveDate": "Wed Jan 03 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,472 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 30 00:00:00 CEST 2027","effectiveDate": "Thu Jan 04 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,472 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 01 00:00:00 CEST 2027","effectiveDate": "Fri Jan 05 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,472 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 02 00:00:00 CEST 2027","effectiveDate": "Sat Jan 06 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,472 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 03 00:00:00 CEST 2027","effectiveDate": "Sun Jan 07 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,472 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 04 00:00:00 CEST 2027","effectiveDate": "Mon Jan 08 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,474 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 05 00:00:00 CEST 2027","effectiveDate": "Tue Jan 09 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,482 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 06 00:00:00 CEST 2027","effectiveDate": "Wed Jan 10 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,482 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 07 00:00:00 CEST 2027","effectiveDate": "Thu Jan 11 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,482 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 08 00:00:00 CEST 2027","effectiveDate": "Fri Jan 12 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,482 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 09 00:00:00 CEST 2027","effectiveDate": "Sat Jan 13 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,482 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 10 00:00:00 CEST 2027","effectiveDate": "Sun Jan 14 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,482 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 11 00:00:00 CEST 2027","effectiveDate": "Mon Jan 15 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,482 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 12 00:00:00 CEST 2027","effectiveDate": "Tue Jan 16 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,482 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 13 00:00:00 CEST 2027","effectiveDate": "Wed Jan 17 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,483 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 14 00:00:00 CEST 2027","effectiveDate": "Thu Jan 18 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,483 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 15 00:00:00 CEST 2027","effectiveDate": "Fri Jan 19 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,491 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 16 00:00:00 CEST 2027","effectiveDate": "Sat Jan 20 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,491 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 17 00:00:00 CEST 2027","effectiveDate": "Sun Jan 21 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,492 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 18 00:00:00 CEST 2027","effectiveDate": "Mon Jan 22 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,492 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 19 00:00:00 CEST 2027","effectiveDate": "Tue Jan 23 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,492 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 20 00:00:00 CEST 2027","effectiveDate": "Wed Jan 24 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,492 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 21 00:00:00 CEST 2027","effectiveDate": "Thu Jan 25 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,492 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 22 00:00:00 CEST 2027","effectiveDate": "Fri Jan 26 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,492 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 23 00:00:00 CEST 2027","effectiveDate": "Sat Jan 27 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,493 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 24 00:00:00 CEST 2027","effectiveDate": "Sun Jan 28 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,493 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 25 00:00:00 CEST 2027","effectiveDate": "Mon Jan 29 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,502 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 26 00:00:00 CEST 2027","effectiveDate": "Tue Jan 30 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,502 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 27 00:00:00 CEST 2027","effectiveDate": "Wed Jan 31 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,502 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 28 00:00:00 CEST 2027","effectiveDate": "Thu Feb 01 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,503 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 29 00:00:00 CEST 2027","effectiveDate": "Fri Feb 02 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,503 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 30 00:00:00 CEST 2027","effectiveDate": "Sat Feb 03 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,503 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 31 00:00:00 CEST 2027","effectiveDate": "Sun Feb 04 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,503 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 01 00:00:00 CEST 2027","effectiveDate": "Mon Feb 05 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,503 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 02 00:00:00 CEST 2027","effectiveDate": "Tue Feb 06 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,503 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 03 00:00:00 CEST 2027","effectiveDate": "Wed Feb 07 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,503 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 04 00:00:00 CEST 2027","effectiveDate": "Thu Feb 08 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,511 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 05 00:00:00 CEST 2027","effectiveDate": "Fri Feb 09 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,512 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 06 00:00:00 CEST 2027","effectiveDate": "Sat Feb 10 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,512 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 07 00:00:00 CEST 2027","effectiveDate": "Sun Feb 11 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,512 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon May 31 00:00:00 CEST 2027","effectiveDate": "Mon Feb 12 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,512 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 01 00:00:00 CEST 2027","effectiveDate": "Tue Feb 13 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,512 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 02 00:00:00 CEST 2027","effectiveDate": "Wed Feb 14 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,512 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 03 00:00:00 CEST 2027","effectiveDate": "Thu Feb 15 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,513 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 04 00:00:00 CEST 2027","effectiveDate": "Fri Feb 16 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,513 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 05 00:00:00 CEST 2027","effectiveDate": "Sat Feb 17 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,513 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 06 00:00:00 CEST 2027","effectiveDate": "Sun Feb 18 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,521 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 07 00:00:00 CEST 2027","effectiveDate": "Mon Feb 19 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,521 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 08 00:00:00 CEST 2027","effectiveDate": "Tue Feb 20 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,522 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 09 00:00:00 CEST 2027","effectiveDate": "Wed Feb 21 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,522 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 10 00:00:00 CEST 2027","effectiveDate": "Thu Feb 22 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,522 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 11 00:00:00 CEST 2027","effectiveDate": "Fri Feb 23 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,522 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 12 00:00:00 CEST 2027","effectiveDate": "Sat Feb 24 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,522 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 13 00:00:00 CEST 2027","effectiveDate": "Sun Feb 25 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,522 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 14 00:00:00 CEST 2027","effectiveDate": "Mon Feb 26 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,522 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 15 00:00:00 CEST 2027","effectiveDate": "Tue Feb 27 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,522 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 16 00:00:00 CEST 2027","effectiveDate": "Wed Feb 28 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,532 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 17 00:00:00 CEST 2027","effectiveDate": "Thu Mar 01 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,532 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 18 00:00:00 CEST 2027","effectiveDate": "Fri Mar 02 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,532 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 19 00:00:00 CEST 2027","effectiveDate": "Sat Mar 03 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,532 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 20 00:00:00 CEST 2027","effectiveDate": "Sun Mar 04 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,532 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 21 00:00:00 CEST 2027","effectiveDate": "Mon Mar 05 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,532 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 22 00:00:00 CEST 2027","effectiveDate": "Tue Mar 06 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,532 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 23 00:00:00 CEST 2027","effectiveDate": "Wed Mar 07 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,532 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jun 24 00:00:00 CEST 2027","effectiveDate": "Thu Mar 08 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,532 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jun 25 00:00:00 CEST 2027","effectiveDate": "Fri Mar 09 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,533 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jun 26 00:00:00 CEST 2027","effectiveDate": "Sun Dec 31 00:00:00 CET 2028"
	  }]
})
2023-04-15 17:23:14,539 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jun 27 00:00:00 CEST 2027","effectiveDate": "Mon Jan 01 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,540 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jun 28 00:00:00 CEST 2027","effectiveDate": "Tue Jan 02 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,540 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jun 29 00:00:00 CEST 2027","effectiveDate": "Wed Jan 03 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,540 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 30 00:00:00 CEST 2027","effectiveDate": "Thu Jan 04 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,540 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 01 00:00:00 CEST 2027","effectiveDate": "Fri Jan 05 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,540 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 02 00:00:00 CEST 2027","effectiveDate": "Sat Jan 06 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,540 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 03 00:00:00 CEST 2027","effectiveDate": "Sun Jan 07 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,540 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 04 00:00:00 CEST 2027","effectiveDate": "Mon Jan 08 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,540 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 05 00:00:00 CEST 2027","effectiveDate": "Tue Jan 09 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,540 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 06 00:00:00 CEST 2027","effectiveDate": "Wed Jan 10 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,546 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 07 00:00:00 CEST 2027","effectiveDate": "Thu Jan 11 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,546 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 08 00:00:00 CEST 2027","effectiveDate": "Fri Jan 12 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,546 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 09 00:00:00 CEST 2027","effectiveDate": "Sat Jan 13 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,547 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 10 00:00:00 CEST 2027","effectiveDate": "Sun Jan 14 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,547 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 11 00:00:00 CEST 2027","effectiveDate": "Mon Jan 15 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,547 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 12 00:00:00 CEST 2027","effectiveDate": "Tue Jan 16 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,547 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 13 00:00:00 CEST 2027","effectiveDate": "Wed Jan 17 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,547 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 14 00:00:00 CEST 2027","effectiveDate": "Thu Jan 18 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,547 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 15 00:00:00 CEST 2027","effectiveDate": "Fri Jan 19 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,547 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 16 00:00:00 CEST 2027","effectiveDate": "Sat Jan 20 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,554 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 17 00:00:00 CEST 2027","effectiveDate": "Sun Jan 21 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,554 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 18 00:00:00 CEST 2027","effectiveDate": "Mon Jan 22 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,555 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 19 00:00:00 CEST 2027","effectiveDate": "Tue Jan 23 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,555 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 20 00:00:00 CEST 2027","effectiveDate": "Wed Jan 24 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,555 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 21 00:00:00 CEST 2027","effectiveDate": "Thu Jan 25 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,555 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 22 00:00:00 CEST 2027","effectiveDate": "Fri Jan 26 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,555 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 23 00:00:00 CEST 2027","effectiveDate": "Sat Jan 27 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,555 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 24 00:00:00 CEST 2027","effectiveDate": "Sun Jan 28 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,555 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 25 00:00:00 CEST 2027","effectiveDate": "Mon Jan 29 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,555 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 26 00:00:00 CEST 2027","effectiveDate": "Tue Jan 30 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,564 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 27 00:00:00 CEST 2027","effectiveDate": "Wed Jan 31 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,564 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 28 00:00:00 CEST 2027","effectiveDate": "Thu Feb 01 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,565 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 29 00:00:00 CEST 2027","effectiveDate": "Fri Feb 02 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,565 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 30 00:00:00 CEST 2027","effectiveDate": "Sat Feb 03 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,565 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 31 00:00:00 CEST 2027","effectiveDate": "Sun Feb 04 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,565 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 01 00:00:00 CEST 2027","effectiveDate": "Mon Feb 05 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,565 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 02 00:00:00 CEST 2027","effectiveDate": "Tue Feb 06 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,565 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 03 00:00:00 CEST 2027","effectiveDate": "Wed Feb 07 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,565 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 04 00:00:00 CEST 2027","effectiveDate": "Thu Feb 08 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,565 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 05 00:00:00 CEST 2027","effectiveDate": "Fri Feb 09 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,576 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 06 00:00:00 CEST 2027","effectiveDate": "Sat Feb 10 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,576 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 07 00:00:00 CEST 2027","effectiveDate": "Sun Feb 11 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,576 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 08 00:00:00 CEST 2027","effectiveDate": "Mon Feb 12 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,576 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 09 00:00:00 CEST 2027","effectiveDate": "Tue Feb 13 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,576 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 10 00:00:00 CEST 2027","effectiveDate": "Wed Feb 14 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,577 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 11 00:00:00 CEST 2027","effectiveDate": "Thu Feb 15 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,577 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 12 00:00:00 CEST 2027","effectiveDate": "Fri Feb 16 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,577 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 13 00:00:00 CEST 2027","effectiveDate": "Sat Feb 17 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,577 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 14 00:00:00 CEST 2027","effectiveDate": "Sun Feb 18 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,577 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 15 00:00:00 CEST 2027","effectiveDate": "Mon Feb 19 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,584 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 16 00:00:00 CEST 2027","effectiveDate": "Tue Feb 20 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,584 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 17 00:00:00 CEST 2027","effectiveDate": "Wed Feb 21 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,584 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 18 00:00:00 CEST 2027","effectiveDate": "Thu Feb 22 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,584 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 19 00:00:00 CEST 2027","effectiveDate": "Fri Feb 23 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,585 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 20 00:00:00 CEST 2027","effectiveDate": "Sat Feb 24 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,585 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 21 00:00:00 CEST 2027","effectiveDate": "Sun Feb 25 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,585 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 22 00:00:00 CEST 2027","effectiveDate": "Mon Feb 26 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,585 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 23 00:00:00 CEST 2027","effectiveDate": "Tue Feb 27 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,585 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 24 00:00:00 CEST 2027","effectiveDate": "Wed Feb 28 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,585 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 25 00:00:00 CEST 2027","effectiveDate": "Thu Mar 01 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,594 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 26 00:00:00 CEST 2027","effectiveDate": "Fri Mar 02 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,595 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 27 00:00:00 CEST 2027","effectiveDate": "Sat Mar 03 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,595 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 28 00:00:00 CEST 2027","effectiveDate": "Sun Mar 04 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,595 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 29 00:00:00 CEST 2027","effectiveDate": "Mon Mar 05 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,595 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 30 00:00:00 CEST 2027","effectiveDate": "Tue Mar 06 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,595 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 31 00:00:00 CEST 2027","effectiveDate": "Wed Mar 07 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,595 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 01 00:00:00 CEST 2027","effectiveDate": "Thu Mar 08 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,595 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 02 00:00:00 CEST 2027","effectiveDate": "Fri Mar 09 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,596 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 03 00:00:00 CEST 2027","effectiveDate": "Sat Mar 10 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,596 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 04 00:00:00 CEST 2027","effectiveDate": "Sun Mar 11 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,606 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 05 00:00:00 CEST 2027","effectiveDate": "Mon Mar 12 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,606 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 06 00:00:00 CEST 2027","effectiveDate": "Tue Mar 13 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,606 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 07 00:00:00 CEST 2027","effectiveDate": "Wed Mar 14 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,606 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jun 30 00:00:00 CEST 2027","effectiveDate": "Thu Mar 15 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,606 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 01 00:00:00 CEST 2027","effectiveDate": "Fri Mar 16 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,607 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 02 00:00:00 CEST 2027","effectiveDate": "Sat Mar 17 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,607 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 03 00:00:00 CEST 2027","effectiveDate": "Sun Mar 18 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,607 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 04 00:00:00 CEST 2027","effectiveDate": "Mon Mar 19 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,607 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 05 00:00:00 CEST 2027","effectiveDate": "Tue Mar 20 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,607 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 06 00:00:00 CEST 2027","effectiveDate": "Wed Mar 21 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,616 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 07 00:00:00 CEST 2027","effectiveDate": "Thu Mar 22 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,616 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 08 00:00:00 CEST 2027","effectiveDate": "Fri Mar 23 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,616 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 09 00:00:00 CEST 2027","effectiveDate": "Sat Mar 24 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,616 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 10 00:00:00 CEST 2027","effectiveDate": "Sun Mar 25 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,617 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 11 00:00:00 CEST 2027","effectiveDate": "Mon Mar 26 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,617 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 12 00:00:00 CEST 2027","effectiveDate": "Tue Mar 27 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,617 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 13 00:00:00 CEST 2027","effectiveDate": "Wed Mar 28 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,617 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 14 00:00:00 CEST 2027","effectiveDate": "Thu Mar 29 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,617 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 15 00:00:00 CEST 2027","effectiveDate": "Fri Mar 30 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,617 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 16 00:00:00 CEST 2027","effectiveDate": "Sat Mar 31 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,628 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 17 00:00:00 CEST 2027","effectiveDate": "Sun Apr 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,628 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 18 00:00:00 CEST 2027","effectiveDate": "Mon Apr 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,629 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 19 00:00:00 CEST 2027","effectiveDate": "Tue Apr 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,629 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 20 00:00:00 CEST 2027","effectiveDate": "Wed Apr 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,629 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 21 00:00:00 CEST 2027","effectiveDate": "Thu Apr 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,629 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 22 00:00:00 CEST 2027","effectiveDate": "Fri Apr 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,629 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 23 00:00:00 CEST 2027","effectiveDate": "Sat Apr 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,629 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 24 00:00:00 CEST 2027","effectiveDate": "Sun Apr 08 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,629 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jul 25 00:00:00 CEST 2027","effectiveDate": "Mon Apr 09 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,629 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jul 26 00:00:00 CEST 2027","effectiveDate": "Wed Jan 31 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,638 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jul 27 00:00:00 CEST 2027","effectiveDate": "Thu Feb 01 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,640 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jul 28 00:00:00 CEST 2027","effectiveDate": "Fri Feb 02 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,640 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jul 29 00:00:00 CEST 2027","effectiveDate": "Sat Feb 03 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,640 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jul 30 00:00:00 CEST 2027","effectiveDate": "Sun Feb 04 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,640 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 31 00:00:00 CEST 2027","effectiveDate": "Mon Feb 05 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,640 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 01 00:00:00 CEST 2027","effectiveDate": "Tue Feb 06 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,640 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 02 00:00:00 CEST 2027","effectiveDate": "Wed Feb 07 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,640 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 03 00:00:00 CEST 2027","effectiveDate": "Thu Feb 08 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,641 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 04 00:00:00 CEST 2027","effectiveDate": "Fri Feb 09 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,641 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 05 00:00:00 CEST 2027","effectiveDate": "Sat Feb 10 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,650 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 06 00:00:00 CEST 2027","effectiveDate": "Sun Feb 11 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,650 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 07 00:00:00 CEST 2027","effectiveDate": "Mon Feb 12 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,651 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 08 00:00:00 CEST 2027","effectiveDate": "Tue Feb 13 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,651 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 09 00:00:00 CEST 2027","effectiveDate": "Wed Feb 14 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,651 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 10 00:00:00 CEST 2027","effectiveDate": "Thu Feb 15 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,651 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 11 00:00:00 CEST 2027","effectiveDate": "Fri Feb 16 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,651 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 12 00:00:00 CEST 2027","effectiveDate": "Sat Feb 17 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,651 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 13 00:00:00 CEST 2027","effectiveDate": "Sun Feb 18 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,651 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 14 00:00:00 CEST 2027","effectiveDate": "Mon Feb 19 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,651 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 15 00:00:00 CEST 2027","effectiveDate": "Tue Feb 20 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,662 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 16 00:00:00 CEST 2027","effectiveDate": "Wed Feb 21 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,662 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 17 00:00:00 CEST 2027","effectiveDate": "Thu Feb 22 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,662 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 18 00:00:00 CEST 2027","effectiveDate": "Fri Feb 23 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,662 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 19 00:00:00 CEST 2027","effectiveDate": "Sat Feb 24 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,662 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 20 00:00:00 CEST 2027","effectiveDate": "Sun Feb 25 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,662 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 21 00:00:00 CEST 2027","effectiveDate": "Mon Feb 26 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,663 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 22 00:00:00 CEST 2027","effectiveDate": "Tue Feb 27 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,663 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 23 00:00:00 CEST 2027","effectiveDate": "Wed Feb 28 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,663 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 24 00:00:00 CEST 2027","effectiveDate": "Thu Mar 01 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,663 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 25 00:00:00 CEST 2027","effectiveDate": "Fri Mar 02 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,674 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 26 00:00:00 CEST 2027","effectiveDate": "Sat Mar 03 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,676 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 27 00:00:00 CEST 2027","effectiveDate": "Sun Mar 04 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,676 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 28 00:00:00 CEST 2027","effectiveDate": "Mon Mar 05 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,676 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 29 00:00:00 CEST 2027","effectiveDate": "Tue Mar 06 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,676 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 30 00:00:00 CEST 2027","effectiveDate": "Wed Mar 07 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,676 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 31 00:00:00 CEST 2027","effectiveDate": "Thu Mar 08 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,676 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 01 00:00:00 CEST 2027","effectiveDate": "Fri Mar 09 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,676 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 02 00:00:00 CEST 2027","effectiveDate": "Sat Mar 10 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,676 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 03 00:00:00 CEST 2027","effectiveDate": "Sun Mar 11 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,677 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 04 00:00:00 CEST 2027","effectiveDate": "Mon Mar 12 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,686 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 05 00:00:00 CEST 2027","effectiveDate": "Tue Mar 13 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,686 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 06 00:00:00 CEST 2027","effectiveDate": "Wed Mar 14 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,686 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 07 00:00:00 CEST 2027","effectiveDate": "Thu Mar 15 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,687 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 08 00:00:00 CEST 2027","effectiveDate": "Fri Mar 16 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,687 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 09 00:00:00 CEST 2027","effectiveDate": "Sat Mar 17 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,687 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 10 00:00:00 CEST 2027","effectiveDate": "Sun Mar 18 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,687 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 11 00:00:00 CEST 2027","effectiveDate": "Mon Mar 19 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,687 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 12 00:00:00 CEST 2027","effectiveDate": "Tue Mar 20 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,687 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 13 00:00:00 CEST 2027","effectiveDate": "Wed Mar 21 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,687 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 14 00:00:00 CEST 2027","effectiveDate": "Thu Mar 22 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,697 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 15 00:00:00 CEST 2027","effectiveDate": "Fri Mar 23 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,698 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 16 00:00:00 CEST 2027","effectiveDate": "Sat Mar 24 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,698 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 17 00:00:00 CEST 2027","effectiveDate": "Sun Mar 25 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,698 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 18 00:00:00 CEST 2027","effectiveDate": "Mon Mar 26 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,698 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 19 00:00:00 CEST 2027","effectiveDate": "Tue Mar 27 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,698 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 20 00:00:00 CEST 2027","effectiveDate": "Wed Mar 28 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,698 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 21 00:00:00 CEST 2027","effectiveDate": "Thu Mar 29 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,698 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 22 00:00:00 CEST 2027","effectiveDate": "Fri Mar 30 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,698 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 23 00:00:00 CEST 2027","effectiveDate": "Sat Mar 31 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,698 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 24 00:00:00 CEST 2027","effectiveDate": "Sun Apr 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,708 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 25 00:00:00 CEST 2027","effectiveDate": "Mon Apr 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,708 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 26 00:00:00 CEST 2027","effectiveDate": "Tue Apr 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,708 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 27 00:00:00 CEST 2027","effectiveDate": "Wed Apr 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,709 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 28 00:00:00 CEST 2027","effectiveDate": "Thu Apr 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,709 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 29 00:00:00 CEST 2027","effectiveDate": "Fri Apr 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,709 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 30 00:00:00 CEST 2027","effectiveDate": "Sat Apr 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,709 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 01 00:00:00 CEST 2027","effectiveDate": "Sun Apr 08 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,709 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 02 00:00:00 CEST 2027","effectiveDate": "Mon Apr 09 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,709 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 03 00:00:00 CEST 2027","effectiveDate": "Tue Apr 10 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,709 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 04 00:00:00 CEST 2027","effectiveDate": "Wed Apr 11 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,719 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 05 00:00:00 CEST 2027","effectiveDate": "Thu Apr 12 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,720 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 06 00:00:00 CEST 2027","effectiveDate": "Fri Apr 13 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,720 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 07 00:00:00 CEST 2027","effectiveDate": "Sat Apr 14 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,720 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jul 31 00:00:00 CEST 2027","effectiveDate": "Sun Apr 15 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,720 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 01 00:00:00 CEST 2027","effectiveDate": "Mon Apr 16 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,720 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 02 00:00:00 CEST 2027","effectiveDate": "Tue Apr 17 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,720 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 03 00:00:00 CEST 2027","effectiveDate": "Wed Apr 18 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,720 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 04 00:00:00 CEST 2027","effectiveDate": "Thu Apr 19 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,720 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 05 00:00:00 CEST 2027","effectiveDate": "Fri Apr 20 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,721 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 06 00:00:00 CEST 2027","effectiveDate": "Sat Apr 21 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,730 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 07 00:00:00 CEST 2027","effectiveDate": "Sun Apr 22 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,730 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 08 00:00:00 CEST 2027","effectiveDate": "Mon Apr 23 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,731 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 09 00:00:00 CEST 2027","effectiveDate": "Tue Apr 24 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,731 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 10 00:00:00 CEST 2027","effectiveDate": "Wed Apr 25 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,731 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 11 00:00:00 CEST 2027","effectiveDate": "Thu Apr 26 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,731 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 12 00:00:00 CEST 2027","effectiveDate": "Fri Apr 27 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,731 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 13 00:00:00 CEST 2027","effectiveDate": "Sat Apr 28 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,731 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 14 00:00:00 CEST 2027","effectiveDate": "Sun Apr 29 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,731 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 15 00:00:00 CEST 2027","effectiveDate": "Mon Apr 30 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,731 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 16 00:00:00 CEST 2027","effectiveDate": "Tue May 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,739 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 17 00:00:00 CEST 2027","effectiveDate": "Wed May 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,739 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 18 00:00:00 CEST 2027","effectiveDate": "Thu May 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,739 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 19 00:00:00 CEST 2027","effectiveDate": "Fri May 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,741 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 20 00:00:00 CEST 2027","effectiveDate": "Sat May 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,741 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 21 00:00:00 CEST 2027","effectiveDate": "Sun May 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,741 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 22 00:00:00 CEST 2027","effectiveDate": "Mon May 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,741 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 23 00:00:00 CEST 2027","effectiveDate": "Tue May 08 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,741 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 24 00:00:00 CEST 2027","effectiveDate": "Wed May 09 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,741 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Aug 25 00:00:00 CEST 2027","effectiveDate": "Thu May 10 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,741 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Aug 26 00:00:00 CEST 2027","effectiveDate": "Wed Feb 28 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,748 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Aug 27 00:00:00 CEST 2027","effectiveDate": "Thu Mar 01 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,748 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Aug 28 00:00:00 CEST 2027","effectiveDate": "Fri Mar 02 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,748 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Aug 29 00:00:00 CEST 2027","effectiveDate": "Sat Mar 03 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,748 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Aug 30 00:00:00 CEST 2027","effectiveDate": "Sun Mar 04 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,749 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 31 00:00:00 CEST 2027","effectiveDate": "Mon Mar 05 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,749 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 01 00:00:00 CEST 2027","effectiveDate": "Tue Mar 06 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,749 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 02 00:00:00 CEST 2027","effectiveDate": "Wed Mar 07 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,749 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 03 00:00:00 CEST 2027","effectiveDate": "Thu Mar 08 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,749 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 04 00:00:00 CEST 2027","effectiveDate": "Fri Mar 09 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,749 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 05 00:00:00 CEST 2027","effectiveDate": "Sat Mar 10 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,755 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 06 00:00:00 CEST 2027","effectiveDate": "Sun Mar 11 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,755 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 07 00:00:00 CEST 2027","effectiveDate": "Mon Mar 12 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,756 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 08 00:00:00 CEST 2027","effectiveDate": "Tue Mar 13 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,756 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 09 00:00:00 CEST 2027","effectiveDate": "Wed Mar 14 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,756 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 10 00:00:00 CEST 2027","effectiveDate": "Thu Mar 15 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,756 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 11 00:00:00 CEST 2027","effectiveDate": "Fri Mar 16 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,756 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 12 00:00:00 CEST 2027","effectiveDate": "Sat Mar 17 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,756 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 13 00:00:00 CEST 2027","effectiveDate": "Sun Mar 18 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,756 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 14 00:00:00 CEST 2027","effectiveDate": "Mon Mar 19 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,756 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 15 00:00:00 CEST 2027","effectiveDate": "Tue Mar 20 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,763 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 16 00:00:00 CEST 2027","effectiveDate": "Wed Mar 21 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,764 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 17 00:00:00 CEST 2027","effectiveDate": "Thu Mar 22 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,764 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 18 00:00:00 CEST 2027","effectiveDate": "Fri Mar 23 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,764 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 19 00:00:00 CEST 2027","effectiveDate": "Sat Mar 24 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,764 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 20 00:00:00 CEST 2027","effectiveDate": "Sun Mar 25 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:14,764 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 21 00:00:00 CEST 2027","effectiveDate": "Mon Mar 26 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,764 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 22 00:00:00 CEST 2027","effectiveDate": "Tue Mar 27 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,764 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 23 00:00:00 CEST 2027","effectiveDate": "Wed Mar 28 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,764 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 24 00:00:00 CEST 2027","effectiveDate": "Thu Mar 29 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,764 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 25 00:00:00 CEST 2027","effectiveDate": "Fri Mar 30 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,773 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 26 00:00:00 CEST 2027","effectiveDate": "Sat Mar 31 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,774 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 27 00:00:00 CEST 2027","effectiveDate": "Sun Apr 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,774 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 28 00:00:00 CEST 2027","effectiveDate": "Mon Apr 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,774 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 29 00:00:00 CEST 2027","effectiveDate": "Tue Apr 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,774 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 30 00:00:00 CEST 2027","effectiveDate": "Wed Apr 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,774 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 01 00:00:00 CEST 2027","effectiveDate": "Thu Apr 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,774 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 02 00:00:00 CEST 2027","effectiveDate": "Fri Apr 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,774 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 03 00:00:00 CEST 2027","effectiveDate": "Sat Apr 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,775 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 04 00:00:00 CEST 2027","effectiveDate": "Sun Apr 08 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,775 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 05 00:00:00 CEST 2027","effectiveDate": "Mon Apr 09 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,783 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 06 00:00:00 CEST 2027","effectiveDate": "Tue Apr 10 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,783 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 07 00:00:00 CEST 2027","effectiveDate": "Wed Apr 11 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,783 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 08 00:00:00 CEST 2027","effectiveDate": "Thu Apr 12 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,783 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 09 00:00:00 CEST 2027","effectiveDate": "Fri Apr 13 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,784 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 10 00:00:00 CEST 2027","effectiveDate": "Sat Apr 14 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,784 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 11 00:00:00 CEST 2027","effectiveDate": "Sun Apr 15 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,784 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 12 00:00:00 CEST 2027","effectiveDate": "Mon Apr 16 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,784 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 13 00:00:00 CEST 2027","effectiveDate": "Tue Apr 17 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,784 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 14 00:00:00 CEST 2027","effectiveDate": "Wed Apr 18 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,784 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 15 00:00:00 CEST 2027","effectiveDate": "Thu Apr 19 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,792 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 16 00:00:00 CEST 2027","effectiveDate": "Fri Apr 20 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,792 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 17 00:00:00 CEST 2027","effectiveDate": "Sat Apr 21 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,792 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 18 00:00:00 CEST 2027","effectiveDate": "Sun Apr 22 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,792 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 19 00:00:00 CEST 2027","effectiveDate": "Mon Apr 23 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,792 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 20 00:00:00 CEST 2027","effectiveDate": "Tue Apr 24 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,792 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 21 00:00:00 CEST 2027","effectiveDate": "Wed Apr 25 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,793 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 22 00:00:00 CEST 2027","effectiveDate": "Thu Apr 26 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,793 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 23 00:00:00 CEST 2027","effectiveDate": "Fri Apr 27 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,793 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 24 00:00:00 CEST 2027","effectiveDate": "Sat Apr 28 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,793 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 25 00:00:00 CEST 2027","effectiveDate": "Sun Apr 29 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,800 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 26 00:00:00 CEST 2027","effectiveDate": "Mon Apr 30 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,800 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 27 00:00:00 CEST 2027","effectiveDate": "Tue May 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,800 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 28 00:00:00 CEST 2027","effectiveDate": "Wed May 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,800 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 29 00:00:00 CEST 2027","effectiveDate": "Thu May 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,802 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 30 00:00:00 CEST 2027","effectiveDate": "Fri May 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,802 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 31 00:00:00 CEST 2027","effectiveDate": "Sat May 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,802 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 01 00:00:00 CET 2027","effectiveDate": "Sun May 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,802 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 02 00:00:00 CET 2027","effectiveDate": "Mon May 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,802 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 03 00:00:00 CET 2027","effectiveDate": "Tue May 08 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,802 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 04 00:00:00 CET 2027","effectiveDate": "Wed May 09 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,809 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 05 00:00:00 CET 2027","effectiveDate": "Thu May 10 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,809 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 06 00:00:00 CET 2027","effectiveDate": "Fri May 11 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,809 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 07 00:00:00 CET 2027","effectiveDate": "Sat May 12 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,810 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Aug 31 00:00:00 CEST 2027","effectiveDate": "Sun May 13 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,810 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 01 00:00:00 CEST 2027","effectiveDate": "Mon May 14 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,810 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 02 00:00:00 CEST 2027","effectiveDate": "Tue May 15 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,810 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 03 00:00:00 CEST 2027","effectiveDate": "Wed May 16 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,810 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 04 00:00:00 CEST 2027","effectiveDate": "Thu May 17 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,810 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 05 00:00:00 CEST 2027","effectiveDate": "Fri May 18 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,810 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 06 00:00:00 CEST 2027","effectiveDate": "Sat May 19 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,820 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 07 00:00:00 CEST 2027","effectiveDate": "Sun May 20 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,820 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 08 00:00:00 CEST 2027","effectiveDate": "Mon May 21 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,821 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 09 00:00:00 CEST 2027","effectiveDate": "Tue May 22 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,821 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 10 00:00:00 CEST 2027","effectiveDate": "Wed May 23 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,821 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 11 00:00:00 CEST 2027","effectiveDate": "Thu May 24 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,821 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 12 00:00:00 CEST 2027","effectiveDate": "Fri May 25 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,821 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 13 00:00:00 CEST 2027","effectiveDate": "Sat May 26 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,821 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 14 00:00:00 CEST 2027","effectiveDate": "Sun May 27 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,821 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 15 00:00:00 CEST 2027","effectiveDate": "Mon May 28 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,821 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 16 00:00:00 CEST 2027","effectiveDate": "Tue May 29 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,830 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 17 00:00:00 CEST 2027","effectiveDate": "Wed May 30 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,830 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 18 00:00:00 CEST 2027","effectiveDate": "Thu May 31 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,830 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 19 00:00:00 CEST 2027","effectiveDate": "Fri Jun 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,830 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 20 00:00:00 CEST 2027","effectiveDate": "Sat Jun 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,830 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 21 00:00:00 CEST 2027","effectiveDate": "Sun Jun 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,830 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 22 00:00:00 CEST 2027","effectiveDate": "Mon Jun 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,831 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 23 00:00:00 CEST 2027","effectiveDate": "Tue Jun 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,831 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Sep 24 00:00:00 CEST 2027","effectiveDate": "Wed Jun 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,831 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Sep 25 00:00:00 CEST 2027","effectiveDate": "Thu Jun 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,831 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Sep 26 00:00:00 CEST 2027","effectiveDate": "Sat Mar 31 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,841 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Sep 27 00:00:00 CEST 2027","effectiveDate": "Sun Apr 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,841 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Sep 28 00:00:00 CEST 2027","effectiveDate": "Mon Apr 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,841 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Sep 29 00:00:00 CEST 2027","effectiveDate": "Tue Apr 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,842 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 30 00:00:00 CEST 2027","effectiveDate": "Wed Apr 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,842 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 01 00:00:00 CEST 2027","effectiveDate": "Thu Apr 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,842 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 02 00:00:00 CEST 2027","effectiveDate": "Fri Apr 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,842 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 03 00:00:00 CEST 2027","effectiveDate": "Sat Apr 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,842 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 04 00:00:00 CEST 2027","effectiveDate": "Sun Apr 08 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,842 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 05 00:00:00 CEST 2027","effectiveDate": "Mon Apr 09 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,842 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 06 00:00:00 CEST 2027","effectiveDate": "Tue Apr 10 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,849 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 07 00:00:00 CEST 2027","effectiveDate": "Wed Apr 11 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,849 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 08 00:00:00 CEST 2027","effectiveDate": "Thu Apr 12 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,849 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 09 00:00:00 CEST 2027","effectiveDate": "Fri Apr 13 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,851 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 10 00:00:00 CEST 2027","effectiveDate": "Sat Apr 14 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,851 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 11 00:00:00 CEST 2027","effectiveDate": "Sun Apr 15 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,851 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 12 00:00:00 CEST 2027","effectiveDate": "Mon Apr 16 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,851 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 13 00:00:00 CEST 2027","effectiveDate": "Tue Apr 17 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,851 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 14 00:00:00 CEST 2027","effectiveDate": "Wed Apr 18 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,851 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 15 00:00:00 CEST 2027","effectiveDate": "Thu Apr 19 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,851 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 16 00:00:00 CEST 2027","effectiveDate": "Fri Apr 20 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,858 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 17 00:00:00 CEST 2027","effectiveDate": "Sat Apr 21 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,859 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 18 00:00:00 CEST 2027","effectiveDate": "Sun Apr 22 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,859 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 19 00:00:00 CEST 2027","effectiveDate": "Mon Apr 23 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,859 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 20 00:00:00 CEST 2027","effectiveDate": "Tue Apr 24 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,859 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 21 00:00:00 CEST 2027","effectiveDate": "Wed Apr 25 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,859 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 22 00:00:00 CEST 2027","effectiveDate": "Thu Apr 26 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,859 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 23 00:00:00 CEST 2027","effectiveDate": "Fri Apr 27 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,859 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 24 00:00:00 CEST 2027","effectiveDate": "Sat Apr 28 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,859 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 25 00:00:00 CEST 2027","effectiveDate": "Sun Apr 29 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,859 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 26 00:00:00 CEST 2027","effectiveDate": "Mon Apr 30 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,865 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 27 00:00:00 CEST 2027","effectiveDate": "Tue May 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,865 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 28 00:00:00 CEST 2027","effectiveDate": "Wed May 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,865 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 29 00:00:00 CEST 2027","effectiveDate": "Thu May 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,865 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 30 00:00:00 CEST 2027","effectiveDate": "Fri May 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,865 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 31 00:00:00 CEST 2027","effectiveDate": "Sat May 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,865 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 01 00:00:00 CET 2027","effectiveDate": "Sun May 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,865 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 02 00:00:00 CET 2027","effectiveDate": "Mon May 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,865 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 03 00:00:00 CET 2027","effectiveDate": "Tue May 08 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,866 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 04 00:00:00 CET 2027","effectiveDate": "Wed May 09 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,866 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 05 00:00:00 CET 2027","effectiveDate": "Thu May 10 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,872 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 06 00:00:00 CET 2027","effectiveDate": "Fri May 11 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,872 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 07 00:00:00 CET 2027","effectiveDate": "Sat May 12 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,873 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 08 00:00:00 CET 2027","effectiveDate": "Sun May 13 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,873 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 09 00:00:00 CET 2027","effectiveDate": "Mon May 14 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,873 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 10 00:00:00 CET 2027","effectiveDate": "Tue May 15 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,873 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 11 00:00:00 CET 2027","effectiveDate": "Wed May 16 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,873 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 12 00:00:00 CET 2027","effectiveDate": "Thu May 17 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,873 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 13 00:00:00 CET 2027","effectiveDate": "Fri May 18 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,873 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 14 00:00:00 CET 2027","effectiveDate": "Sat May 19 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,873 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 15 00:00:00 CET 2027","effectiveDate": "Sun May 20 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,882 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 16 00:00:00 CET 2027","effectiveDate": "Mon May 21 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,884 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 17 00:00:00 CET 2027","effectiveDate": "Tue May 22 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,884 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 18 00:00:00 CET 2027","effectiveDate": "Wed May 23 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,884 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 19 00:00:00 CET 2027","effectiveDate": "Thu May 24 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,884 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 20 00:00:00 CET 2027","effectiveDate": "Fri May 25 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,884 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 21 00:00:00 CET 2027","effectiveDate": "Sat May 26 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,884 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 22 00:00:00 CET 2027","effectiveDate": "Sun May 27 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,884 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 23 00:00:00 CET 2027","effectiveDate": "Mon May 28 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,884 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 24 00:00:00 CET 2027","effectiveDate": "Tue May 29 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,885 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 25 00:00:00 CET 2027","effectiveDate": "Wed May 30 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,892 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 26 00:00:00 CET 2027","effectiveDate": "Thu May 31 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,892 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 27 00:00:00 CET 2027","effectiveDate": "Fri Jun 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,893 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 28 00:00:00 CET 2027","effectiveDate": "Sat Jun 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,893 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 29 00:00:00 CET 2027","effectiveDate": "Sun Jun 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,893 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 30 00:00:00 CET 2027","effectiveDate": "Mon Jun 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,893 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 01 00:00:00 CET 2027","effectiveDate": "Tue Jun 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,893 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 02 00:00:00 CET 2027","effectiveDate": "Wed Jun 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,893 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 03 00:00:00 CET 2027","effectiveDate": "Thu Jun 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,893 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 04 00:00:00 CET 2027","effectiveDate": "Fri Jun 08 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,893 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 05 00:00:00 CET 2027","effectiveDate": "Sat Jun 09 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,900 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 06 00:00:00 CET 2027","effectiveDate": "Sun Jun 10 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,900 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 07 00:00:00 CET 2027","effectiveDate": "Mon Jun 11 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,900 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 08 00:00:00 CET 2027","effectiveDate": "Tue Jun 12 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,900 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Sep 30 00:00:00 CEST 2027","effectiveDate": "Wed Jun 13 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,900 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 01 00:00:00 CEST 2027","effectiveDate": "Thu Jun 14 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,900 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 02 00:00:00 CEST 2027","effectiveDate": "Fri Jun 15 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,900 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 03 00:00:00 CEST 2027","effectiveDate": "Sat Jun 16 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,900 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 04 00:00:00 CEST 2027","effectiveDate": "Sun Jun 17 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,900 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 05 00:00:00 CEST 2027","effectiveDate": "Mon Jun 18 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,901 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 06 00:00:00 CEST 2027","effectiveDate": "Tue Jun 19 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,906 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 07 00:00:00 CEST 2027","effectiveDate": "Wed Jun 20 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,907 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 08 00:00:00 CEST 2027","effectiveDate": "Thu Jun 21 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,907 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 09 00:00:00 CEST 2027","effectiveDate": "Fri Jun 22 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,907 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 10 00:00:00 CEST 2027","effectiveDate": "Sat Jun 23 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,907 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 11 00:00:00 CEST 2027","effectiveDate": "Sun Jun 24 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,907 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 12 00:00:00 CEST 2027","effectiveDate": "Mon Jun 25 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,907 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 13 00:00:00 CEST 2027","effectiveDate": "Tue Jun 26 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,907 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 14 00:00:00 CEST 2027","effectiveDate": "Wed Jun 27 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,907 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 15 00:00:00 CEST 2027","effectiveDate": "Thu Jun 28 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,907 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 16 00:00:00 CEST 2027","effectiveDate": "Fri Jun 29 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,913 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 17 00:00:00 CEST 2027","effectiveDate": "Sat Jun 30 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,914 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 18 00:00:00 CEST 2027","effectiveDate": "Sun Jul 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,914 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 19 00:00:00 CEST 2027","effectiveDate": "Mon Jul 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,914 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 20 00:00:00 CEST 2027","effectiveDate": "Tue Jul 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,914 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 21 00:00:00 CEST 2027","effectiveDate": "Wed Jul 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,914 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 22 00:00:00 CEST 2027","effectiveDate": "Thu Jul 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,914 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 23 00:00:00 CEST 2027","effectiveDate": "Fri Jul 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,914 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 24 00:00:00 CEST 2027","effectiveDate": "Sat Jul 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,914 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Oct 25 00:00:00 CEST 2027","effectiveDate": "Sun Jul 08 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,914 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Oct 26 00:00:00 CEST 2027","effectiveDate": "Mon Apr 30 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,920 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Oct 27 00:00:00 CEST 2027","effectiveDate": "Tue May 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,920 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Oct 28 00:00:00 CEST 2027","effectiveDate": "Wed May 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,920 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Oct 29 00:00:00 CEST 2027","effectiveDate": "Thu May 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,920 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Oct 30 00:00:00 CEST 2027","effectiveDate": "Fri May 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,920 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 31 00:00:00 CEST 2027","effectiveDate": "Sat May 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,920 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 01 00:00:00 CET 2027","effectiveDate": "Sun May 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,920 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 02 00:00:00 CET 2027","effectiveDate": "Mon May 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,920 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 03 00:00:00 CET 2027","effectiveDate": "Tue May 08 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,920 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 04 00:00:00 CET 2027","effectiveDate": "Wed May 09 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,921 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 05 00:00:00 CET 2027","effectiveDate": "Thu May 10 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,927 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 06 00:00:00 CET 2027","effectiveDate": "Fri May 11 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,927 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 07 00:00:00 CET 2027","effectiveDate": "Sat May 12 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,927 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 08 00:00:00 CET 2027","effectiveDate": "Sun May 13 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,927 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 09 00:00:00 CET 2027","effectiveDate": "Mon May 14 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,927 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 10 00:00:00 CET 2027","effectiveDate": "Tue May 15 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,927 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 11 00:00:00 CET 2027","effectiveDate": "Wed May 16 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,927 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 12 00:00:00 CET 2027","effectiveDate": "Thu May 17 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,927 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 13 00:00:00 CET 2027","effectiveDate": "Fri May 18 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,927 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 14 00:00:00 CET 2027","effectiveDate": "Sat May 19 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,927 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 15 00:00:00 CET 2027","effectiveDate": "Sun May 20 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,933 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 16 00:00:00 CET 2027","effectiveDate": "Mon May 21 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,933 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 17 00:00:00 CET 2027","effectiveDate": "Tue May 22 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,933 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 18 00:00:00 CET 2027","effectiveDate": "Wed May 23 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,934 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 19 00:00:00 CET 2027","effectiveDate": "Thu May 24 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,934 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 20 00:00:00 CET 2027","effectiveDate": "Fri May 25 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,934 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 21 00:00:00 CET 2027","effectiveDate": "Sat May 26 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,934 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 22 00:00:00 CET 2027","effectiveDate": "Sun May 27 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,934 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 23 00:00:00 CET 2027","effectiveDate": "Mon May 28 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,934 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 24 00:00:00 CET 2027","effectiveDate": "Tue May 29 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,934 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 25 00:00:00 CET 2027","effectiveDate": "Wed May 30 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,940 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 26 00:00:00 CET 2027","effectiveDate": "Thu May 31 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,941 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 27 00:00:00 CET 2027","effectiveDate": "Fri Jun 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,941 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 28 00:00:00 CET 2027","effectiveDate": "Sat Jun 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,941 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 29 00:00:00 CET 2027","effectiveDate": "Sun Jun 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,941 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 30 00:00:00 CET 2027","effectiveDate": "Mon Jun 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,941 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 01 00:00:00 CET 2027","effectiveDate": "Tue Jun 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,941 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 02 00:00:00 CET 2027","effectiveDate": "Wed Jun 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,941 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 03 00:00:00 CET 2027","effectiveDate": "Thu Jun 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,941 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 04 00:00:00 CET 2027","effectiveDate": "Fri Jun 08 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,941 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 05 00:00:00 CET 2027","effectiveDate": "Sat Jun 09 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,947 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 06 00:00:00 CET 2027","effectiveDate": "Sun Jun 10 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,947 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 07 00:00:00 CET 2027","effectiveDate": "Mon Jun 11 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,947 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 08 00:00:00 CET 2027","effectiveDate": "Tue Jun 12 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,947 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 09 00:00:00 CET 2027","effectiveDate": "Wed Jun 13 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,947 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 10 00:00:00 CET 2027","effectiveDate": "Thu Jun 14 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,947 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 11 00:00:00 CET 2027","effectiveDate": "Fri Jun 15 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,947 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 12 00:00:00 CET 2027","effectiveDate": "Sat Jun 16 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,947 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 13 00:00:00 CET 2027","effectiveDate": "Sun Jun 17 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,947 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 14 00:00:00 CET 2027","effectiveDate": "Mon Jun 18 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,947 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 15 00:00:00 CET 2027","effectiveDate": "Tue Jun 19 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,953 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 16 00:00:00 CET 2027","effectiveDate": "Wed Jun 20 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,953 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 17 00:00:00 CET 2027","effectiveDate": "Thu Jun 21 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,953 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 18 00:00:00 CET 2027","effectiveDate": "Fri Jun 22 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,953 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 19 00:00:00 CET 2027","effectiveDate": "Sat Jun 23 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,953 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 20 00:00:00 CET 2027","effectiveDate": "Sun Jun 24 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,953 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 21 00:00:00 CET 2027","effectiveDate": "Mon Jun 25 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,953 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 22 00:00:00 CET 2027","effectiveDate": "Tue Jun 26 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,953 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 23 00:00:00 CET 2027","effectiveDate": "Wed Jun 27 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,953 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 24 00:00:00 CET 2027","effectiveDate": "Thu Jun 28 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,953 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 25 00:00:00 CET 2027","effectiveDate": "Fri Jun 29 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,960 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 26 00:00:00 CET 2027","effectiveDate": "Sat Jun 30 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,960 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 27 00:00:00 CET 2027","effectiveDate": "Sun Jul 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,961 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 28 00:00:00 CET 2027","effectiveDate": "Mon Jul 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,961 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 29 00:00:00 CET 2027","effectiveDate": "Tue Jul 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,961 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 30 00:00:00 CET 2027","effectiveDate": "Wed Jul 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,961 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 31 00:00:00 CET 2027","effectiveDate": "Thu Jul 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,961 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 01 00:00:00 CET 2028","effectiveDate": "Fri Jul 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,961 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 02 00:00:00 CET 2028","effectiveDate": "Sat Jul 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,961 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 03 00:00:00 CET 2028","effectiveDate": "Sun Jul 08 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,961 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 04 00:00:00 CET 2028","effectiveDate": "Mon Jul 09 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,967 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 05 00:00:00 CET 2028","effectiveDate": "Tue Jul 10 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,968 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 06 00:00:00 CET 2028","effectiveDate": "Wed Jul 11 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,968 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 07 00:00:00 CET 2028","effectiveDate": "Thu Jul 12 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,968 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Oct 31 00:00:00 CEST 2027","effectiveDate": "Fri Jul 13 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,968 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 01 00:00:00 CET 2027","effectiveDate": "Sat Jul 14 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,968 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 02 00:00:00 CET 2027","effectiveDate": "Sun Jul 15 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,968 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 03 00:00:00 CET 2027","effectiveDate": "Mon Jul 16 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,968 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 04 00:00:00 CET 2027","effectiveDate": "Tue Jul 17 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,968 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 05 00:00:00 CET 2027","effectiveDate": "Wed Jul 18 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,968 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 06 00:00:00 CET 2027","effectiveDate": "Thu Jul 19 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,973 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 07 00:00:00 CET 2027","effectiveDate": "Fri Jul 20 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,973 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 08 00:00:00 CET 2027","effectiveDate": "Sat Jul 21 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,974 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 09 00:00:00 CET 2027","effectiveDate": "Sun Jul 22 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,974 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 10 00:00:00 CET 2027","effectiveDate": "Mon Jul 23 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,974 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 11 00:00:00 CET 2027","effectiveDate": "Tue Jul 24 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,974 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 12 00:00:00 CET 2027","effectiveDate": "Wed Jul 25 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,974 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 13 00:00:00 CET 2027","effectiveDate": "Thu Jul 26 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,974 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 14 00:00:00 CET 2027","effectiveDate": "Fri Jul 27 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,974 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 15 00:00:00 CET 2027","effectiveDate": "Sat Jul 28 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,974 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 16 00:00:00 CET 2027","effectiveDate": "Sun Jul 29 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,985 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 17 00:00:00 CET 2027","effectiveDate": "Mon Jul 30 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,985 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 18 00:00:00 CET 2027","effectiveDate": "Tue Jul 31 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,985 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 19 00:00:00 CET 2027","effectiveDate": "Wed Aug 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,985 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 20 00:00:00 CET 2027","effectiveDate": "Thu Aug 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,985 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 21 00:00:00 CET 2027","effectiveDate": "Fri Aug 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,985 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 22 00:00:00 CET 2027","effectiveDate": "Sat Aug 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,985 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 23 00:00:00 CET 2027","effectiveDate": "Sun Aug 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,986 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Nov 24 00:00:00 CET 2027","effectiveDate": "Mon Aug 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,986 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Nov 25 00:00:00 CET 2027","effectiveDate": "Tue Aug 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,986 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Nov 26 00:00:00 CET 2027","effectiveDate": "Thu May 31 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,995 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Nov 27 00:00:00 CET 2027","effectiveDate": "Fri Jun 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,995 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Nov 28 00:00:00 CET 2027","effectiveDate": "Sat Jun 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,995 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Nov 29 00:00:00 CET 2027","effectiveDate": "Sun Jun 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,995 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 30 00:00:00 CET 2027","effectiveDate": "Mon Jun 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,996 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 01 00:00:00 CET 2027","effectiveDate": "Tue Jun 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,996 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 02 00:00:00 CET 2027","effectiveDate": "Wed Jun 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,996 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 03 00:00:00 CET 2027","effectiveDate": "Thu Jun 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,996 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 04 00:00:00 CET 2027","effectiveDate": "Fri Jun 08 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,996 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 05 00:00:00 CET 2027","effectiveDate": "Sat Jun 09 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:14,996 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 06 00:00:00 CET 2027","effectiveDate": "Sun Jun 10 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,007 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 07 00:00:00 CET 2027","effectiveDate": "Mon Jun 11 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,007 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 08 00:00:00 CET 2027","effectiveDate": "Tue Jun 12 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,007 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 09 00:00:00 CET 2027","effectiveDate": "Wed Jun 13 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,007 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 10 00:00:00 CET 2027","effectiveDate": "Thu Jun 14 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,007 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 11 00:00:00 CET 2027","effectiveDate": "Fri Jun 15 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,007 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 12 00:00:00 CET 2027","effectiveDate": "Sat Jun 16 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,008 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 13 00:00:00 CET 2027","effectiveDate": "Sun Jun 17 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,008 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 14 00:00:00 CET 2027","effectiveDate": "Mon Jun 18 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,008 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 15 00:00:00 CET 2027","effectiveDate": "Tue Jun 19 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,008 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 16 00:00:00 CET 2027","effectiveDate": "Wed Jun 20 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,021 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 17 00:00:00 CET 2027","effectiveDate": "Thu Jun 21 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,021 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 18 00:00:00 CET 2027","effectiveDate": "Fri Jun 22 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,021 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 19 00:00:00 CET 2027","effectiveDate": "Sat Jun 23 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,021 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 20 00:00:00 CET 2027","effectiveDate": "Sun Jun 24 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,021 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 21 00:00:00 CET 2027","effectiveDate": "Mon Jun 25 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,021 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 22 00:00:00 CET 2027","effectiveDate": "Tue Jun 26 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,021 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 23 00:00:00 CET 2027","effectiveDate": "Wed Jun 27 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,021 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 24 00:00:00 CET 2027","effectiveDate": "Thu Jun 28 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,022 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 25 00:00:00 CET 2027","effectiveDate": "Fri Jun 29 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,022 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 26 00:00:00 CET 2027","effectiveDate": "Sat Jun 30 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,030 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 27 00:00:00 CET 2027","effectiveDate": "Sun Jul 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,030 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 28 00:00:00 CET 2027","effectiveDate": "Mon Jul 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,030 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 29 00:00:00 CET 2027","effectiveDate": "Tue Jul 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,030 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 30 00:00:00 CET 2027","effectiveDate": "Wed Jul 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,030 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 31 00:00:00 CET 2027","effectiveDate": "Thu Jul 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,030 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 01 00:00:00 CET 2028","effectiveDate": "Fri Jul 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,030 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 02 00:00:00 CET 2028","effectiveDate": "Sat Jul 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,030 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 03 00:00:00 CET 2028","effectiveDate": "Sun Jul 08 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,030 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 04 00:00:00 CET 2028","effectiveDate": "Mon Jul 09 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,030 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 05 00:00:00 CET 2028","effectiveDate": "Tue Jul 10 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,040 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 06 00:00:00 CET 2028","effectiveDate": "Wed Jul 11 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,040 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 07 00:00:00 CET 2028","effectiveDate": "Thu Jul 12 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,040 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 08 00:00:00 CET 2028","effectiveDate": "Fri Jul 13 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,040 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 09 00:00:00 CET 2028","effectiveDate": "Sat Jul 14 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,040 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 10 00:00:00 CET 2028","effectiveDate": "Sun Jul 15 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,040 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 11 00:00:00 CET 2028","effectiveDate": "Mon Jul 16 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,040 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 12 00:00:00 CET 2028","effectiveDate": "Tue Jul 17 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,040 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 13 00:00:00 CET 2028","effectiveDate": "Wed Jul 18 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,041 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 14 00:00:00 CET 2028","effectiveDate": "Thu Jul 19 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,041 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 15 00:00:00 CET 2028","effectiveDate": "Fri Jul 20 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,048 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 16 00:00:00 CET 2028","effectiveDate": "Sat Jul 21 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,049 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 17 00:00:00 CET 2028","effectiveDate": "Sun Jul 22 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,049 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 18 00:00:00 CET 2028","effectiveDate": "Mon Jul 23 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,049 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 19 00:00:00 CET 2028","effectiveDate": "Tue Jul 24 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,049 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 20 00:00:00 CET 2028","effectiveDate": "Wed Jul 25 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,049 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 21 00:00:00 CET 2028","effectiveDate": "Thu Jul 26 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,049 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 22 00:00:00 CET 2028","effectiveDate": "Fri Jul 27 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,049 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 23 00:00:00 CET 2028","effectiveDate": "Sat Jul 28 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,049 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 24 00:00:00 CET 2028","effectiveDate": "Sun Jul 29 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,050 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 25 00:00:00 CET 2028","effectiveDate": "Mon Jul 30 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,064 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 26 00:00:00 CET 2028","effectiveDate": "Tue Jul 31 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,064 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 27 00:00:00 CET 2028","effectiveDate": "Wed Aug 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,064 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 28 00:00:00 CET 2028","effectiveDate": "Thu Aug 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,065 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 29 00:00:00 CET 2028","effectiveDate": "Fri Aug 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,065 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 30 00:00:00 CET 2028","effectiveDate": "Sat Aug 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,065 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 31 00:00:00 CET 2028","effectiveDate": "Sun Aug 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,065 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 01 00:00:00 CET 2028","effectiveDate": "Mon Aug 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,065 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 02 00:00:00 CET 2028","effectiveDate": "Tue Aug 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,065 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 03 00:00:00 CET 2028","effectiveDate": "Wed Aug 08 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,065 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 04 00:00:00 CET 2028","effectiveDate": "Thu Aug 09 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,078 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 05 00:00:00 CET 2028","effectiveDate": "Fri Aug 10 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,078 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 06 00:00:00 CET 2028","effectiveDate": "Sat Aug 11 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,078 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 07 00:00:00 CET 2028","effectiveDate": "Sun Aug 12 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,078 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Nov 30 00:00:00 CET 2027","effectiveDate": "Mon Aug 13 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,078 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 01 00:00:00 CET 2027","effectiveDate": "Tue Aug 14 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,079 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 02 00:00:00 CET 2027","effectiveDate": "Wed Aug 15 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,079 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 03 00:00:00 CET 2027","effectiveDate": "Thu Aug 16 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,079 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 04 00:00:00 CET 2027","effectiveDate": "Fri Aug 17 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,079 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 05 00:00:00 CET 2027","effectiveDate": "Sat Aug 18 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,079 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 06 00:00:00 CET 2027","effectiveDate": "Sun Aug 19 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,094 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 07 00:00:00 CET 2027","effectiveDate": "Mon Aug 20 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,095 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 08 00:00:00 CET 2027","effectiveDate": "Tue Aug 21 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,095 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 09 00:00:00 CET 2027","effectiveDate": "Wed Aug 22 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,095 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 10 00:00:00 CET 2027","effectiveDate": "Thu Aug 23 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,095 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 11 00:00:00 CET 2027","effectiveDate": "Fri Aug 24 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,095 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 12 00:00:00 CET 2027","effectiveDate": "Sat Aug 25 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,095 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 13 00:00:00 CET 2027","effectiveDate": "Sun Aug 26 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,095 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 14 00:00:00 CET 2027","effectiveDate": "Mon Aug 27 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,095 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 15 00:00:00 CET 2027","effectiveDate": "Tue Aug 28 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,095 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 16 00:00:00 CET 2027","effectiveDate": "Wed Aug 29 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,104 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 17 00:00:00 CET 2027","effectiveDate": "Thu Aug 30 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,105 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 18 00:00:00 CET 2027","effectiveDate": "Fri Aug 31 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,105 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 19 00:00:00 CET 2027","effectiveDate": "Sat Sep 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,105 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 20 00:00:00 CET 2027","effectiveDate": "Sun Sep 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,105 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 21 00:00:00 CET 2027","effectiveDate": "Mon Sep 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,105 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 22 00:00:00 CET 2027","effectiveDate": "Tue Sep 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,105 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 23 00:00:00 CET 2027","effectiveDate": "Wed Sep 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,106 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 24 00:00:00 CET 2027","effectiveDate": "Thu Sep 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,106 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Dec 25 00:00:00 CET 2027","effectiveDate": "Fri Sep 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,106 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 26 00:00:00 CET 2027","effectiveDate": "Sat Jun 30 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,114 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Dec 27 00:00:00 CET 2027","effectiveDate": "Sun Jul 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,114 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Dec 28 00:00:00 CET 2027","effectiveDate": "Mon Jul 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,114 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Dec 29 00:00:00 CET 2027","effectiveDate": "Tue Jul 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,114 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Dec 30 00:00:00 CET 2027","effectiveDate": "Wed Jul 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,115 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 31 00:00:00 CET 2027","effectiveDate": "Thu Jul 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,115 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 01 00:00:00 CET 2028","effectiveDate": "Fri Jul 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,115 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 02 00:00:00 CET 2028","effectiveDate": "Sat Jul 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,115 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 03 00:00:00 CET 2028","effectiveDate": "Sun Jul 08 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,115 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 04 00:00:00 CET 2028","effectiveDate": "Mon Jul 09 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,115 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 05 00:00:00 CET 2028","effectiveDate": "Tue Jul 10 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,122 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 06 00:00:00 CET 2028","effectiveDate": "Wed Jul 11 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,122 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 07 00:00:00 CET 2028","effectiveDate": "Thu Jul 12 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,123 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 08 00:00:00 CET 2028","effectiveDate": "Fri Jul 13 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,123 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 09 00:00:00 CET 2028","effectiveDate": "Sat Jul 14 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,123 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 10 00:00:00 CET 2028","effectiveDate": "Sun Jul 15 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,123 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 11 00:00:00 CET 2028","effectiveDate": "Mon Jul 16 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,123 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 12 00:00:00 CET 2028","effectiveDate": "Tue Jul 17 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,123 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 13 00:00:00 CET 2028","effectiveDate": "Wed Jul 18 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,124 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 14 00:00:00 CET 2028","effectiveDate": "Thu Jul 19 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,124 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 15 00:00:00 CET 2028","effectiveDate": "Fri Jul 20 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,132 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 16 00:00:00 CET 2028","effectiveDate": "Sat Jul 21 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,132 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 17 00:00:00 CET 2028","effectiveDate": "Sun Jul 22 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,132 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 18 00:00:00 CET 2028","effectiveDate": "Mon Jul 23 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,132 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 19 00:00:00 CET 2028","effectiveDate": "Tue Jul 24 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,132 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 20 00:00:00 CET 2028","effectiveDate": "Wed Jul 25 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,132 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 21 00:00:00 CET 2028","effectiveDate": "Thu Jul 26 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,133 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 22 00:00:00 CET 2028","effectiveDate": "Fri Jul 27 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,133 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 23 00:00:00 CET 2028","effectiveDate": "Sat Jul 28 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,133 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 24 00:00:00 CET 2028","effectiveDate": "Sun Jul 29 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,133 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 25 00:00:00 CET 2028","effectiveDate": "Mon Jul 30 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,142 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 26 00:00:00 CET 2028","effectiveDate": "Tue Jul 31 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,142 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 27 00:00:00 CET 2028","effectiveDate": "Wed Aug 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,143 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 28 00:00:00 CET 2028","effectiveDate": "Thu Aug 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,143 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 29 00:00:00 CET 2028","effectiveDate": "Fri Aug 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,143 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 30 00:00:00 CET 2028","effectiveDate": "Sat Aug 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,143 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 31 00:00:00 CET 2028","effectiveDate": "Sun Aug 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,143 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 01 00:00:00 CET 2028","effectiveDate": "Mon Aug 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,143 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 02 00:00:00 CET 2028","effectiveDate": "Tue Aug 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,143 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 03 00:00:00 CET 2028","effectiveDate": "Wed Aug 08 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,143 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 04 00:00:00 CET 2028","effectiveDate": "Thu Aug 09 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,151 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 05 00:00:00 CET 2028","effectiveDate": "Fri Aug 10 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,152 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 06 00:00:00 CET 2028","effectiveDate": "Sat Aug 11 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,152 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 07 00:00:00 CET 2028","effectiveDate": "Sun Aug 12 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,152 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 08 00:00:00 CET 2028","effectiveDate": "Mon Aug 13 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,152 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 09 00:00:00 CET 2028","effectiveDate": "Tue Aug 14 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,152 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 10 00:00:00 CET 2028","effectiveDate": "Wed Aug 15 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,152 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 11 00:00:00 CET 2028","effectiveDate": "Thu Aug 16 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,152 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 12 00:00:00 CET 2028","effectiveDate": "Fri Aug 17 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,152 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 13 00:00:00 CET 2028","effectiveDate": "Sat Aug 18 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,152 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 14 00:00:00 CET 2028","effectiveDate": "Sun Aug 19 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,160 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 15 00:00:00 CET 2028","effectiveDate": "Mon Aug 20 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,160 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 16 00:00:00 CET 2028","effectiveDate": "Tue Aug 21 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,160 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 17 00:00:00 CET 2028","effectiveDate": "Wed Aug 22 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,161 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 18 00:00:00 CET 2028","effectiveDate": "Thu Aug 23 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,161 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 19 00:00:00 CET 2028","effectiveDate": "Fri Aug 24 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,161 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 20 00:00:00 CET 2028","effectiveDate": "Sat Aug 25 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,161 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 21 00:00:00 CET 2028","effectiveDate": "Sun Aug 26 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,161 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 22 00:00:00 CET 2028","effectiveDate": "Mon Aug 27 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,161 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 23 00:00:00 CET 2028","effectiveDate": "Tue Aug 28 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,161 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 24 00:00:00 CET 2028","effectiveDate": "Wed Aug 29 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,170 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 25 00:00:00 CET 2028","effectiveDate": "Thu Aug 30 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,170 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 26 00:00:00 CET 2028","effectiveDate": "Fri Aug 31 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,170 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 27 00:00:00 CET 2028","effectiveDate": "Sat Sep 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,170 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 28 00:00:00 CET 2028","effectiveDate": "Sun Sep 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,170 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 29 00:00:00 CET 2028","effectiveDate": "Mon Sep 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,170 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 01 00:00:00 CET 2028","effectiveDate": "Tue Sep 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,170 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 02 00:00:00 CET 2028","effectiveDate": "Wed Sep 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,171 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 03 00:00:00 CET 2028","effectiveDate": "Thu Sep 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,171 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 04 00:00:00 CET 2028","effectiveDate": "Fri Sep 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,171 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 05 00:00:00 CET 2028","effectiveDate": "Sat Sep 08 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,182 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 06 00:00:00 CET 2028","effectiveDate": "Sun Sep 09 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,183 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 07 00:00:00 CET 2028","effectiveDate": "Mon Sep 10 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,183 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 08 00:00:00 CET 2028","effectiveDate": "Tue Sep 11 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,183 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Dec 31 00:00:00 CET 2027","effectiveDate": "Wed Sep 12 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,183 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 01 00:00:00 CET 2028","effectiveDate": "Thu Sep 13 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,183 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 02 00:00:00 CET 2028","effectiveDate": "Fri Sep 14 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,184 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 03 00:00:00 CET 2028","effectiveDate": "Sat Sep 15 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,184 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 04 00:00:00 CET 2028","effectiveDate": "Sun Sep 16 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,184 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 05 00:00:00 CET 2028","effectiveDate": "Mon Sep 17 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,184 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 06 00:00:00 CET 2028","effectiveDate": "Tue Sep 18 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,196 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 07 00:00:00 CET 2028","effectiveDate": "Wed Sep 19 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,197 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 08 00:00:00 CET 2028","effectiveDate": "Thu Sep 20 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,197 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 09 00:00:00 CET 2028","effectiveDate": "Fri Sep 21 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,197 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 10 00:00:00 CET 2028","effectiveDate": "Sat Sep 22 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,197 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 11 00:00:00 CET 2028","effectiveDate": "Sun Sep 23 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,197 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 12 00:00:00 CET 2028","effectiveDate": "Mon Sep 24 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,197 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 13 00:00:00 CET 2028","effectiveDate": "Tue Sep 25 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,198 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 14 00:00:00 CET 2028","effectiveDate": "Wed Sep 26 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,198 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 15 00:00:00 CET 2028","effectiveDate": "Thu Sep 27 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,198 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 16 00:00:00 CET 2028","effectiveDate": "Fri Sep 28 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,207 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 17 00:00:00 CET 2028","effectiveDate": "Sat Sep 29 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,207 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 18 00:00:00 CET 2028","effectiveDate": "Sun Sep 30 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,207 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 19 00:00:00 CET 2028","effectiveDate": "Mon Oct 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,207 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 20 00:00:00 CET 2028","effectiveDate": "Tue Oct 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,207 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 21 00:00:00 CET 2028","effectiveDate": "Wed Oct 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,207 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 22 00:00:00 CET 2028","effectiveDate": "Thu Oct 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,207 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 23 00:00:00 CET 2028","effectiveDate": "Fri Oct 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,207 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 24 00:00:00 CET 2028","effectiveDate": "Sat Oct 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,207 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 25 00:00:00 CET 2028","effectiveDate": "Sun Oct 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,207 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 26 00:00:00 CET 2028","effectiveDate": "Tue Jul 31 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,218 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 27 00:00:00 CET 2028","effectiveDate": "Wed Aug 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,219 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 28 00:00:00 CET 2028","effectiveDate": "Thu Aug 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,219 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Jan 29 00:00:00 CET 2028","effectiveDate": "Fri Aug 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,219 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Jan 30 00:00:00 CET 2028","effectiveDate": "Sat Aug 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,219 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 31 00:00:00 CET 2028","effectiveDate": "Sun Aug 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,220 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 01 00:00:00 CET 2028","effectiveDate": "Mon Aug 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,220 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 02 00:00:00 CET 2028","effectiveDate": "Tue Aug 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,220 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 03 00:00:00 CET 2028","effectiveDate": "Wed Aug 08 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,220 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 04 00:00:00 CET 2028","effectiveDate": "Thu Aug 09 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,221 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 05 00:00:00 CET 2028","effectiveDate": "Fri Aug 10 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,232 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 06 00:00:00 CET 2028","effectiveDate": "Sat Aug 11 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,233 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 07 00:00:00 CET 2028","effectiveDate": "Sun Aug 12 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,233 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 08 00:00:00 CET 2028","effectiveDate": "Mon Aug 13 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,233 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 09 00:00:00 CET 2028","effectiveDate": "Tue Aug 14 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,233 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 10 00:00:00 CET 2028","effectiveDate": "Wed Aug 15 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,233 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 11 00:00:00 CET 2028","effectiveDate": "Thu Aug 16 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,233 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 12 00:00:00 CET 2028","effectiveDate": "Fri Aug 17 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,233 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 13 00:00:00 CET 2028","effectiveDate": "Sat Aug 18 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,233 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 14 00:00:00 CET 2028","effectiveDate": "Sun Aug 19 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,233 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 15 00:00:00 CET 2028","effectiveDate": "Mon Aug 20 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,244 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 16 00:00:00 CET 2028","effectiveDate": "Tue Aug 21 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,245 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 17 00:00:00 CET 2028","effectiveDate": "Wed Aug 22 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,245 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 18 00:00:00 CET 2028","effectiveDate": "Thu Aug 23 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,245 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 19 00:00:00 CET 2028","effectiveDate": "Fri Aug 24 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,245 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 20 00:00:00 CET 2028","effectiveDate": "Sat Aug 25 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,245 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 21 00:00:00 CET 2028","effectiveDate": "Sun Aug 26 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,245 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 22 00:00:00 CET 2028","effectiveDate": "Mon Aug 27 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,245 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 23 00:00:00 CET 2028","effectiveDate": "Tue Aug 28 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,245 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 24 00:00:00 CET 2028","effectiveDate": "Wed Aug 29 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,245 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 25 00:00:00 CET 2028","effectiveDate": "Thu Aug 30 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,255 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 26 00:00:00 CET 2028","effectiveDate": "Fri Aug 31 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,255 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 27 00:00:00 CET 2028","effectiveDate": "Sat Sep 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,255 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 28 00:00:00 CET 2028","effectiveDate": "Sun Sep 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,255 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 29 00:00:00 CET 2028","effectiveDate": "Mon Sep 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,255 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 01 00:00:00 CET 2028","effectiveDate": "Tue Sep 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,255 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 02 00:00:00 CET 2028","effectiveDate": "Wed Sep 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,255 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 03 00:00:00 CET 2028","effectiveDate": "Thu Sep 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,255 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 04 00:00:00 CET 2028","effectiveDate": "Fri Sep 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,255 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 05 00:00:00 CET 2028","effectiveDate": "Sat Sep 08 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,255 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 06 00:00:00 CET 2028","effectiveDate": "Sun Sep 09 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,263 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 07 00:00:00 CET 2028","effectiveDate": "Mon Sep 10 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,263 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 08 00:00:00 CET 2028","effectiveDate": "Tue Sep 11 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,263 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 09 00:00:00 CET 2028","effectiveDate": "Wed Sep 12 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,263 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 10 00:00:00 CET 2028","effectiveDate": "Thu Sep 13 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,263 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 11 00:00:00 CET 2028","effectiveDate": "Fri Sep 14 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,265 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 12 00:00:00 CET 2028","effectiveDate": "Sat Sep 15 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,265 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 13 00:00:00 CET 2028","effectiveDate": "Sun Sep 16 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,265 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 14 00:00:00 CET 2028","effectiveDate": "Mon Sep 17 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,265 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 15 00:00:00 CET 2028","effectiveDate": "Tue Sep 18 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,265 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 16 00:00:00 CET 2028","effectiveDate": "Wed Sep 19 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,274 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 17 00:00:00 CET 2028","effectiveDate": "Thu Sep 20 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,274 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 18 00:00:00 CET 2028","effectiveDate": "Fri Sep 21 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,274 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 19 00:00:00 CET 2028","effectiveDate": "Sat Sep 22 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,274 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 20 00:00:00 CET 2028","effectiveDate": "Sun Sep 23 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,274 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 21 00:00:00 CET 2028","effectiveDate": "Mon Sep 24 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,275 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 22 00:00:00 CET 2028","effectiveDate": "Tue Sep 25 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,275 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 23 00:00:00 CET 2028","effectiveDate": "Wed Sep 26 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,275 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 24 00:00:00 CET 2028","effectiveDate": "Thu Sep 27 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,275 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Mar 25 00:00:00 CET 2028","effectiveDate": "Fri Sep 28 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,275 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Mar 26 00:00:00 CET 2028","effectiveDate": "Sat Sep 29 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,284 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Mar 27 00:00:00 CEST 2028","effectiveDate": "Sun Sep 30 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,284 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Mar 28 00:00:00 CEST 2028","effectiveDate": "Mon Oct 01 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,284 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Mar 29 00:00:00 CEST 2028","effectiveDate": "Tue Oct 02 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,284 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Mar 30 00:00:00 CEST 2028","effectiveDate": "Wed Oct 03 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,284 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Mar 31 00:00:00 CEST 2028","effectiveDate": "Thu Oct 04 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,284 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 01 00:00:00 CEST 2028","effectiveDate": "Fri Oct 05 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,284 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Apr 02 00:00:00 CEST 2028","effectiveDate": "Sat Oct 06 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,284 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Apr 03 00:00:00 CEST 2028","effectiveDate": "Sun Oct 07 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,284 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Apr 04 00:00:00 CEST 2028","effectiveDate": "Mon Oct 08 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,285 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Apr 05 00:00:00 CEST 2028","effectiveDate": "Tue Oct 09 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,292 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Apr 06 00:00:00 CEST 2028","effectiveDate": "Wed Oct 10 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,293 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Apr 07 00:00:00 CEST 2028","effectiveDate": "Thu Oct 11 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,293 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Apr 08 00:00:00 CEST 2028","effectiveDate": "Fri Oct 12 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,293 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 31 00:00:00 CET 2028","effectiveDate": "Sat Oct 13 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,293 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 01 00:00:00 CET 2028","effectiveDate": "Sun Oct 14 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,293 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 02 00:00:00 CET 2028","effectiveDate": "Mon Oct 15 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,293 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 03 00:00:00 CET 2028","effectiveDate": "Tue Oct 16 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,293 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 04 00:00:00 CET 2028","effectiveDate": "Wed Oct 17 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,293 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 05 00:00:00 CET 2028","effectiveDate": "Thu Oct 18 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,293 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 06 00:00:00 CET 2028","effectiveDate": "Fri Oct 19 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,301 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 07 00:00:00 CET 2028","effectiveDate": "Sat Oct 20 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,301 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 08 00:00:00 CET 2028","effectiveDate": "Sun Oct 21 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,301 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 09 00:00:00 CET 2028","effectiveDate": "Mon Oct 22 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,301 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 10 00:00:00 CET 2028","effectiveDate": "Tue Oct 23 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,301 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 11 00:00:00 CET 2028","effectiveDate": "Wed Oct 24 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,301 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 12 00:00:00 CET 2028","effectiveDate": "Thu Oct 25 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,301 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 13 00:00:00 CET 2028","effectiveDate": "Fri Oct 26 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,301 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 14 00:00:00 CET 2028","effectiveDate": "Sat Oct 27 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,301 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 15 00:00:00 CET 2028","effectiveDate": "Sun Oct 28 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,301 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 16 00:00:00 CET 2028","effectiveDate": "Mon Oct 29 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:15,310 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 17 00:00:00 CET 2028","effectiveDate": "Tue Oct 30 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:15,310 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 18 00:00:00 CET 2028","effectiveDate": "Wed Oct 31 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:15,310 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 19 00:00:00 CET 2028","effectiveDate": "Thu Nov 01 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:15,310 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Feb 20 00:00:00 CET 2028","effectiveDate": "Fri Nov 02 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:15,310 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Feb 21 00:00:00 CET 2028","effectiveDate": "Sat Nov 03 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:15,310 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Feb 22 00:00:00 CET 2028","effectiveDate": "Sun Nov 04 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:15,310 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Feb 23 00:00:00 CET 2028","effectiveDate": "Mon Nov 05 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:15,310 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Feb 24 00:00:00 CET 2028","effectiveDate": "Tue Nov 06 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:15,310 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Feb 25 00:00:00 CET 2028","effectiveDate": "Wed Nov 07 00:00:00 CET 2029"
	  }]
})
2023-04-15 17:23:15,311 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sat Feb 26 00:00:00 CET 2028","effectiveDate": "Fri Aug 31 00:00:00 CEST 2029"
	  }]
})
2023-04-15 17:23:15,328 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 5s915ms
2023-04-15 17:23:15,339 INFO com.yuripe.batchType0A.Listener.JobCompletionNotificationListener [main] !!! JOB FINISHED! Time to verify the results
2023-04-15 17:23:15,348 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=27, type=class java.lang.Long, identifying=true}'}] and the following status: [COMPLETED] in 5s959ms
2023-04-15 17:23:15,616 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:23:15,619 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@4ec27c4c] for TypeConfiguration
2023-04-15 17:23:15,619 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@aa8195a] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@4ec27c4c]
2023-04-15 17:23:15,622 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 17:23:15,641 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 17:26:41,060 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 17:26:41,160 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 17:26:41,519 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 10928 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 17:26:41,522 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 17:26:42,177 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:26:42,180 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 17:26:42,205 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 19 ms. Found 0 JDBC repository interfaces.
2023-04-15 17:26:42,217 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:26:42,218 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 17:26:42,228 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 4 ms. Found 0 JPA repository interfaces.
2023-04-15 17:26:42,625 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 17:26:43,112 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7ac48e10
2023-04-15 17:26:43,115 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 17:26:43,258 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 17:26:43,312 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 17:26:43,639 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 17:26:43,653 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@3f322610
2023-04-15 17:26:43,654 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@3f322610
2023-04-15 17:26:43,654 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@3f322610
2023-04-15 17:26:43,655 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@1e477944
2023-04-15 17:26:43,655 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@1e477944
2023-04-15 17:26:43,655 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@6cf047cf
2023-04-15 17:26:43,656 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@6cf047cf
2023-04-15 17:26:43,656 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 17:26:43,656 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 17:26:43,657 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 17:26:43,657 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 17:26:43,658 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@323e026d
2023-04-15 17:26:43,659 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 17:26:43,659 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 17:26:43,660 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@1716c037
2023-04-15 17:26:43,661 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 17:26:43,661 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 17:26:43,661 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 17:26:43,662 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 17:26:43,662 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 17:26:43,662 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 17:26:43,662 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 17:26:43,663 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 17:26:43,663 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 17:26:43,663 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 17:26:43,663 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 17:26:43,664 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 17:26:43,664 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 17:26:43,666 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 17:26:43,666 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 17:26:43,666 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:26:43,667 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:26:43,667 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:26:43,667 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 17:26:43,667 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 17:26:43,668 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 17:26:43,668 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:26:43,668 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:26:43,669 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:26:43,669 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 17:26:43,669 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 17:26:43,670 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 17:26:43,670 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 17:26:43,670 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 17:26:43,670 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 17:26:43,672 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 17:26:43,672 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 17:26:43,672 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 17:26:43,672 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 17:26:43,673 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 17:26:43,673 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 17:26:43,673 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 17:26:43,674 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 17:26:43,674 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 17:26:43,674 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 17:26:43,674 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 17:26:43,675 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 17:26:43,675 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 17:26:43,675 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 17:26:43,676 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 17:26:43,676 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 17:26:43,676 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 17:26:43,676 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 17:26:43,677 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 17:26:43,677 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 17:26:43,677 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 17:26:43,677 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 17:26:43,679 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 17:26:43,679 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 17:26:43,679 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 17:26:43,680 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 17:26:43,680 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 17:26:43,680 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 17:26:43,680 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 17:26:43,681 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 17:26:43,681 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 17:26:43,681 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 17:26:43,681 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 17:26:43,682 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 17:26:43,682 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 17:26:43,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 17:26:43,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 17:26:43,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 17:26:43,684 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 17:26:43,684 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 17:26:43,684 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 17:26:43,686 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 17:26:43,686 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 17:26:43,687 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 17:26:43,687 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 17:26:43,688 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 17:26:43,688 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 17:26:43,689 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 17:26:43,689 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 17:26:43,689 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 17:26:43,690 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 17:26:43,691 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 17:26:43,692 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 17:26:43,693 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 17:26:43,694 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 17:26:43,694 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 17:26:43,694 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 17:26:43,695 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 17:26:43,695 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 17:26:43,695 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 17:26:43,696 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 17:26:43,696 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 17:26:43,696 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 17:26:43,697 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 17:26:43,697 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 17:26:43,697 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 17:26:43,698 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 17:26:43,699 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 17:26:43,699 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 17:26:43,700 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 17:26:43,700 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 17:26:43,700 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 17:26:43,701 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 17:26:43,701 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 17:26:43,701 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 17:26:43,701 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 17:26:43,710 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@531a716c
2023-04-15 17:26:43,710 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@531a716c
2023-04-15 17:26:43,713 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@156324b
2023-04-15 17:26:43,713 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@156324b
2023-04-15 17:26:43,715 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@17d76ebb
2023-04-15 17:26:43,716 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@40b31a16
2023-04-15 17:26:43,716 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@25fa6889
2023-04-15 17:26:43,716 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@1de73d37
2023-04-15 17:26:43,718 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@31693a86
2023-04-15 17:26:43,718 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 17:26:43,718 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 17:26:43,718 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@3b30eec5
2023-04-15 17:26:43,718 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@43755e2f
2023-04-15 17:26:43,785 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 17:26:43,787 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 17:26:43,809 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@c67395) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5fc7255c)
2023-04-15 17:26:43,810 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@20a47036) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@70c205bf)
2023-04-15 17:26:43,811 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@43ab9ae9) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2520aa05)
2023-04-15 17:26:43,811 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@26865b57) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@46894dc5)
2023-04-15 17:26:43,811 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@596afb2f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@79ba0285)
2023-04-15 17:26:43,811 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6df2a206) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@61993d18)
2023-04-15 17:26:43,812 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6f240187) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@46a388cc)
2023-04-15 17:26:43,812 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3e39f08c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@16e07bae)
2023-04-15 17:26:43,813 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@598778cc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3386ed8)
2023-04-15 17:26:43,815 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 17:26:43,816 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 17:26:43,817 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 17:26:43,819 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:26:43,819 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:26:43,822 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@210635fd
2023-04-15 17:26:43,822 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@17d76ebb`
2023-04-15 17:26:43,826 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:26:43,827 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:26:43,827 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:26:43,827 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:26:43,828 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:26:43,828 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:26:43,829 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@21a5b599] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@7db162f2]
2023-04-15 17:26:44,196 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@21a5b599] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@66a8751a]
2023-04-15 17:26:44,643 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 17:26:44,651 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@66a8751a] for TypeConfiguration
2023-04-15 17:26:44,653 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:26:44,962 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 17:26:45,555 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Started BatchType0AApplicationTests in 4.23 seconds (process running for 5.367)
2023-04-15 17:26:45,557 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [main] Running default command line with: []
2023-04-15 17:26:45,707 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'run.id':'{value=28, type=class java.lang.Long, identifying=true}'}]
2023-04-15 17:26:45,739 INFO org.springframework.batch.core.job.SimpleStepHandler [main] Executing step: [step1]
2023-04-15 17:26:45,773 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:26:45,774 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:26:45,774 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:26:45,774 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:26:45,775 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:26:45,775 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 01 00:00:00 CET 2024","effectiveDate": "Sun Jul 06 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:26:45,775 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 02 00:00:00 CET 2024","effectiveDate": "Mon Jul 07 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:26:45,775 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 03 00:00:00 CET 2024","effectiveDate": "Tue Jul 08 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:26:45,776 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 04 00:00:00 CET 2024","effectiveDate": "Wed Jul 09 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:26:45,776 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [main] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 05 00:00:00 CET 2024","effectiveDate": "Thu Jul 10 00:00:00 CEST 2025"
	  }]
})
2023-04-15 17:26:45,802 ERROR org.springframework.batch.core.step.AbstractStep [main] Encountered an error executing step step1 in job importUserJob
org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [INSERT INTO BATCH.policy (contractor_customer_code, effective_date, expire_date, insured_customer_code, policy_number, state) VALUES (?, ?, ?, ?, ?, ?)]; Duplicate entry 'P000856' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:103)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1538)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:667)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:691)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1034)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:373)
	at org.springframework.batch.item.database.JdbcBatchItemWriter.write(JdbcBatchItemWriter.java:190)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.writeItems(SimpleChunkProcessor.java:203)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.doWrite(SimpleChunkProcessor.java:170)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.write(SimpleChunkProcessor.java:297)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.process(SimpleChunkProcessor.java:227)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:75)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:389)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:313)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:256)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:362)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:206)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:139)
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:241)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:227)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:178)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:166)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:161)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:156)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:760)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.sql.BatchUpdateException: Duplicate entry 'P000856' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at com.mysql.cj.util.Util.handleNewInstance(Util.java:192)
	at com.mysql.cj.util.Util.getInstance(Util.java:167)
	at com.mysql.cj.util.Util.getInstance(Util.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLError.createBatchUpdateException(SQLError.java:224)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:816)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchInternal(ClientPreparedStatement.java:418)
	at com.mysql.cj.jdbc.StatementImpl.executeBatch(StatementImpl.java:795)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1047)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:651)
	... 114 common frames omitted
Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'P000856' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:795)
	... 120 common frames omitted
2023-04-15 17:26:45,809 INFO org.springframework.batch.core.step.AbstractStep [main] Step: [step1] executed in 69ms
2023-04-15 17:26:45,823 INFO com.yuripe.batchType0A.Listener.JobFailureNotificationListener [main] !!! JOB FAILED! Time to verify the results
2023-04-15 17:26:45,831 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'run.id':'{value=28, type=class java.lang.Long, identifying=true}'}] and the following status: [FAILED] in 106ms
2023-04-15 17:26:46,051 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [SpringApplicationShutdownHook] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:26:46,053 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@66a8751a] for TypeConfiguration
2023-04-15 17:26:46,054 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [SpringApplicationShutdownHook] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@5617f71d] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@66a8751a]
2023-04-15 17:26:46,057 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown initiated...
2023-04-15 17:26:46,070 INFO com.zaxxer.hikari.HikariDataSource [SpringApplicationShutdownHook] HikariPool-1 - Shutdown completed.
2023-04-15 17:36:28,988 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 17:36:29,083 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 17:36:29,455 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 11668 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 17:36:29,456 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 17:36:30,144 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:36:30,146 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 17:36:30,169 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 16 ms. Found 0 JDBC repository interfaces.
2023-04-15 17:36:30,180 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:36:30,181 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 17:36:30,188 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 17:36:30,561 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 17:36:31,076 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@3002e397
2023-04-15 17:36:31,078 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 17:36:31,177 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 17:36:31,259 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 17:36:31,564 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 17:36:31,582 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 17:36:31,583 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 17:36:31,583 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 17:36:31,583 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 17:36:31,583 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 17:36:31,584 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 17:36:31,584 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 17:36:31,584 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 17:36:31,584 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 17:36:31,585 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 17:36:31,585 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 17:36:31,585 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 17:36:31,585 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 17:36:31,587 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 17:36:31,587 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 17:36:31,588 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:36:31,588 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:36:31,588 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:36:31,588 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:36:31,589 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 17:36:31,589 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 17:36:31,589 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 17:36:31,590 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 17:36:31,590 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 17:36:31,590 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 17:36:31,590 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 17:36:31,591 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 17:36:31,591 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 17:36:31,591 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 17:36:31,591 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 17:36:31,592 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 17:36:31,592 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 17:36:31,592 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 17:36:31,592 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 17:36:31,592 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 17:36:31,592 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 17:36:31,593 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 17:36:31,593 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 17:36:31,593 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 17:36:31,595 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 17:36:31,595 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 17:36:31,595 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 17:36:31,595 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 17:36:31,595 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 17:36:31,595 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 17:36:31,596 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 17:36:31,596 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 17:36:31,596 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 17:36:31,597 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 17:36:31,597 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 17:36:31,597 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 17:36:31,597 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 17:36:31,598 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 17:36:31,598 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 17:36:31,598 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 17:36:31,598 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 17:36:31,598 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 17:36:31,599 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 17:36:31,599 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 17:36:31,599 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 17:36:31,599 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 17:36:31,599 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 17:36:31,599 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 17:36:31,599 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 17:36:31,600 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 17:36:31,600 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 17:36:31,600 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 17:36:31,600 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 17:36:31,600 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 17:36:31,600 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 17:36:31,601 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 17:36:31,601 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 17:36:31,601 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 17:36:31,601 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 17:36:31,601 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 17:36:31,601 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 17:36:31,601 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 17:36:31,603 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 17:36:31,603 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 17:36:31,603 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 17:36:31,603 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 17:36:31,603 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 17:36:31,604 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 17:36:31,604 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 17:36:31,604 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 17:36:31,604 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 17:36:31,605 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 17:36:31,605 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 17:36:31,605 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 17:36:31,605 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 17:36:31,605 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 17:36:31,605 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 17:36:31,606 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 17:36:31,606 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 17:36:31,606 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 17:36:31,606 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 17:36:31,606 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 17:36:31,606 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 17:36:31,606 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 17:36:31,607 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 17:36:31,607 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 17:36:31,607 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 17:36:31,607 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@8ac512e
2023-04-15 17:36:31,607 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@4bbc21bd
2023-04-15 17:36:31,608 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@14e3d439
2023-04-15 17:36:31,608 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@d85b399
2023-04-15 17:36:31,608 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@d85b399
2023-04-15 17:36:31,608 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@674aa626
2023-04-15 17:36:31,608 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@674aa626
2023-04-15 17:36:31,608 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@674aa626
2023-04-15 17:36:31,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@4dd1d2bb
2023-04-15 17:36:31,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@4dd1d2bb
2023-04-15 17:36:31,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@47198524
2023-04-15 17:36:31,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@47198524
2023-04-15 17:36:31,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@67a0ff25
2023-04-15 17:36:31,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@67a0ff25
2023-04-15 17:36:31,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@55e91e61
2023-04-15 17:36:31,609 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@55e91e61
2023-04-15 17:36:31,610 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@166e5a6d
2023-04-15 17:36:31,610 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@166e5a6d
2023-04-15 17:36:31,610 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@1d55dd21
2023-04-15 17:36:31,616 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@4ad1a276
2023-04-15 17:36:31,616 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@4ad1a276
2023-04-15 17:36:31,618 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@305aaedf
2023-04-15 17:36:31,618 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@305aaedf
2023-04-15 17:36:31,620 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@3d71e10b
2023-04-15 17:36:31,620 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@71139e77
2023-04-15 17:36:31,620 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@4de91056
2023-04-15 17:36:31,620 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@2404abe2
2023-04-15 17:36:31,621 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@16cf7fd0
2023-04-15 17:36:31,621 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@7bc2bb58
2023-04-15 17:36:31,621 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@7e2c6fd6
2023-04-15 17:36:31,621 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@7ff6804a
2023-04-15 17:36:31,622 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@12aa519b
2023-04-15 17:36:31,676 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 17:36:31,678 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 17:36:31,703 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@79ba0285) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6df2a206)
2023-04-15 17:36:31,703 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@61993d18) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6f240187)
2023-04-15 17:36:31,704 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@46a388cc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3e39f08c)
2023-04-15 17:36:31,704 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@16e07bae) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@598778cc)
2023-04-15 17:36:31,704 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3386ed8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@727453a3)
2023-04-15 17:36:31,704 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@67dc6b48) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@57f2e67)
2023-04-15 17:36:31,705 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4571cebe) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@154864f8)
2023-04-15 17:36:31,705 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@11cadb32) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6d3ad37a)
2023-04-15 17:36:31,705 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@26f5e45d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@704c3bdf)
2023-04-15 17:36:31,707 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 17:36:31,707 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 17:36:31,708 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 17:36:31,711 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:36:31,711 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:36:31,716 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@1ad1b737
2023-04-15 17:36:31,716 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@3d71e10b`
2023-04-15 17:36:31,721 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:36:31,721 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:36:31,722 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:36:31,722 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:36:31,722 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:36:31,722 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:36:31,725 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@69d2fb0a] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@7e38e254]
2023-04-15 17:36:32,122 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@69d2fb0a] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@2a259f6f]
2023-04-15 17:36:32,650 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 17:36:32,663 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@2a259f6f] for TypeConfiguration
2023-04-15 17:36:32,665 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:36:32,782 WARN org.springframework.web.context.support.GenericWebApplicationContext [main] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'batchController': Unsatisfied dependency expressed through field 'importUserJob': Error creating bean with name 'importUserJob' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'importUserJob' parameter 1: No qualifying bean of type 'java.lang.String' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
2023-04-15 17:36:32,783 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:36:32,786 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@2a259f6f] for TypeConfiguration
2023-04-15 17:36:32,787 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@354e2bff] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@2a259f6f]
2023-04-15 17:36:32,793 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown initiated...
2023-04-15 17:36:32,808 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown completed.
2023-04-15 17:36:32,821 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLogger [main] 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2023-04-15 17:36:32,847 ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter [main] 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 1 of method importUserJob in com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration required a bean of type 'java.lang.String' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'java.lang.String' in your configuration.

2023-04-15 17:36:32,855 ERROR org.springframework.test.context.TestContextManager [main] Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener] to prepare test instance [com.yuripe.batchType0A.BatchType0AApplicationTests@45648e75]
java.lang.IllegalStateException: Failed to load ApplicationContext for [WebMergedContextConfiguration@58932d08 testClass = com.yuripe.batchType0A.BatchType0AApplicationTests, locations = [], classes = [com.yuripe.batchType0A.BatchType0AApplication], contextInitializerClasses = [], activeProfiles = [], propertySourceLocations = [], propertySourceProperties = ["org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@3e7634b9, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@abf688e, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@607fbe09, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@9da1, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@10c626be, org.springframework.boot.test.context.SpringBootTestAnnotation@da100959], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:142)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'batchController': Unsatisfied dependency expressed through field 'importUserJob': Error creating bean with name 'importUserJob' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'importUserJob' parameter 1: No qualifying bean of type 'java.lang.String' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:713)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:693)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:133)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:482)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1416)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:597)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:917)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:310)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	... 67 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'importUserJob' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'importUserJob' parameter 1: No qualifying bean of type 'java.lang.String' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:548)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1417)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1337)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:710)
	... 92 common frames omitted
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'java.lang.String' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1824)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1383)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1337)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:885)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	... 105 common frames omitted
2023-04-15 17:38:05,269 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [com.yuripe.batchType0A.BatchType0AApplicationTests]: BatchType0AApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-04-15 17:38:05,371 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration com.yuripe.batchType0A.BatchType0AApplication for test class com.yuripe.batchType0A.BatchType0AApplicationTests
2023-04-15 17:38:05,761 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] Starting BatchType0AApplicationTests using Java 17.0.2 with PID 13812 (started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 17:38:05,762 INFO com.yuripe.batchType0A.BatchType0AApplicationTests [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 17:38:06,402 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:38:06,404 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 17:38:06,423 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 14 ms. Found 0 JDBC repository interfaces.
2023-04-15 17:38:06,435 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:38:06,436 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 17:38:06,444 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 3 ms. Found 0 JPA repository interfaces.
2023-04-15 17:38:06,832 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 17:38:07,312 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@740b9a50
2023-04-15 17:38:07,315 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 17:38:07,440 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 17:38:07,525 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 17:38:07,857 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 17:38:07,871 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@7740b0ab
2023-04-15 17:38:07,872 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@7740b0ab
2023-04-15 17:38:07,872 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@7740b0ab
2023-04-15 17:38:07,873 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3eb9c575
2023-04-15 17:38:07,873 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3eb9c575
2023-04-15 17:38:07,873 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@3f322610
2023-04-15 17:38:07,874 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@3f322610
2023-04-15 17:38:07,874 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@1e477944
2023-04-15 17:38:07,874 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@1e477944
2023-04-15 17:38:07,875 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@6cf047cf
2023-04-15 17:38:07,875 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@6cf047cf
2023-04-15 17:38:07,875 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@6cf047cf
2023-04-15 17:38:07,876 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 17:38:07,877 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 17:38:07,877 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@1c92a549
2023-04-15 17:38:07,877 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 17:38:07,877 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 17:38:07,878 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 17:38:07,878 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@79b63325
2023-04-15 17:38:07,878 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@708769b7
2023-04-15 17:38:07,879 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 17:38:07,879 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@32e830a0
2023-04-15 17:38:07,879 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@135e49b2
2023-04-15 17:38:07,879 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@5bb97fe7
2023-04-15 17:38:07,879 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 17:38:07,880 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 17:38:07,880 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@10b87ff6
2023-04-15 17:38:07,880 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 17:38:07,881 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 17:38:07,881 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@63262071
2023-04-15 17:38:07,881 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 17:38:07,882 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 17:38:07,882 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@2d4f67e
2023-04-15 17:38:07,882 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 17:38:07,883 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 17:38:07,883 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@1282f784
2023-04-15 17:38:07,883 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:38:07,884 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:38:07,884 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@41167ded
2023-04-15 17:38:07,884 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 17:38:07,885 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@13e1e816
2023-04-15 17:38:07,885 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:38:07,885 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@36238b12
2023-04-15 17:38:07,886 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 17:38:07,886 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 17:38:07,886 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@33187485
2023-04-15 17:38:07,887 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@41938e1e
2023-04-15 17:38:07,887 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 17:38:07,887 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@5d2e6f62
2023-04-15 17:38:07,888 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@77ff14ce
2023-04-15 17:38:07,888 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 17:38:07,888 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 17:38:07,889 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@733fae8
2023-04-15 17:38:07,889 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 17:38:07,889 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 17:38:07,890 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@5a8d676e
2023-04-15 17:38:07,890 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@74764622
2023-04-15 17:38:07,890 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@7ba06506
2023-04-15 17:38:07,891 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 17:38:07,891 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@63dc3420
2023-04-15 17:38:07,891 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 17:38:07,892 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@525b8922
2023-04-15 17:38:07,892 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@145a821d
2023-04-15 17:38:07,892 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@6caa4dc5
2023-04-15 17:38:07,892 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@6ed51944
2023-04-15 17:38:07,892 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@60c98f25
2023-04-15 17:38:07,892 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@20c3b34b
2023-04-15 17:38:07,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1eb906f3
2023-04-15 17:38:07,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 17:38:07,895 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@58e02359
2023-04-15 17:38:07,895 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 17:38:07,896 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@74fc3fc7
2023-04-15 17:38:07,896 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 17:38:07,896 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@491893f8
2023-04-15 17:38:07,896 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 17:38:07,897 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@1f408ab6
2023-04-15 17:38:07,897 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 17:38:07,898 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@46e388ec
2023-04-15 17:38:07,898 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@53f495f0
2023-04-15 17:38:07,898 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5efe5b25
2023-04-15 17:38:07,898 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 17:38:07,899 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@45707f76
2023-04-15 17:38:07,899 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 17:38:07,899 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@1f0e2bdc
2023-04-15 17:38:07,900 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@682266d8
2023-04-15 17:38:07,900 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@44a93f8a
2023-04-15 17:38:07,901 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 17:38:07,901 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@26463a6
2023-04-15 17:38:07,902 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 17:38:07,902 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@6c5ae8fd
2023-04-15 17:38:07,902 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 17:38:07,903 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 17:38:07,903 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@17354708
2023-04-15 17:38:07,903 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 17:38:07,904 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 17:38:07,904 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@1aed6f0b
2023-04-15 17:38:07,904 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@3b3546a3
2023-04-15 17:38:07,905 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@134c38
2023-04-15 17:38:07,905 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 17:38:07,905 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@3d235635
2023-04-15 17:38:07,906 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 17:38:07,906 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 17:38:07,906 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@4cc7e3ad
2023-04-15 17:38:07,906 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@5dd6a4c8
2023-04-15 17:38:07,907 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@47be41c6
2023-04-15 17:38:07,907 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 17:38:07,907 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@608b35fa
2023-04-15 17:38:07,908 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 17:38:07,909 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 17:38:07,909 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@13a268cd
2023-04-15 17:38:07,910 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 17:38:07,910 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@7b3a6e95
2023-04-15 17:38:07,910 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 17:38:07,911 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@4ebfb045
2023-04-15 17:38:07,911 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 17:38:07,911 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@77a2688d
2023-04-15 17:38:07,911 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 17:38:07,912 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@77c692b4
2023-04-15 17:38:07,912 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 17:38:07,912 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@5fa0141f
2023-04-15 17:38:07,912 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@6caeba36
2023-04-15 17:38:07,920 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@1d7f2f0a
2023-04-15 17:38:07,921 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@1d7f2f0a
2023-04-15 17:38:07,924 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@370225c7
2023-04-15 17:38:07,924 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@370225c7
2023-04-15 17:38:07,926 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@305aaedf
2023-04-15 17:38:07,927 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@2a425cf5
2023-04-15 17:38:07,927 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@17d76ebb
2023-04-15 17:38:07,927 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@40b31a16
2023-04-15 17:38:07,927 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@25fa6889
2023-04-15 17:38:07,928 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@1de73d37
2023-04-15 17:38:07,928 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@31693a86
2023-04-15 17:38:07,928 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@69d2e517
2023-04-15 17:38:07,929 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@1f9a7684
2023-04-15 17:38:08,003 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 17:38:08,005 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 17:38:08,030 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@d8e4250) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@100807ca)
2023-04-15 17:38:08,030 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@c67395) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5fc7255c)
2023-04-15 17:38:08,031 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@20a47036) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@70c205bf)
2023-04-15 17:38:08,031 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@43ab9ae9) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2520aa05)
2023-04-15 17:38:08,031 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@26865b57) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@46894dc5)
2023-04-15 17:38:08,031 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@596afb2f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@79ba0285)
2023-04-15 17:38:08,032 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6df2a206) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@61993d18)
2023-04-15 17:38:08,033 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6f240187) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@46a388cc)
2023-04-15 17:38:08,033 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3e39f08c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@16e07bae)
2023-04-15 17:38:08,034 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 17:38:08,034 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 17:38:08,035 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 17:38:08,037 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:38:08,038 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:38:08,042 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@4d825dbe
2023-04-15 17:38:08,042 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@305aaedf`
2023-04-15 17:38:08,046 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:38:08,046 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:38:08,046 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:38:08,047 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:38:08,047 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:38:08,047 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:38:08,049 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1de08775] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@2dbf2da]
2023-04-15 17:38:08,435 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1de08775] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@409395b9]
2023-04-15 17:38:08,950 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 17:38:08,961 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@409395b9] for TypeConfiguration
2023-04-15 17:38:08,963 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:38:09,054 WARN org.springframework.web.context.support.GenericWebApplicationContext [main] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'batchController': Unsatisfied dependency expressed through field 'importUserJob': Error creating bean with name 'importUserJob' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'importUserJob' parameter 1: No qualifying bean of type 'java.lang.String' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
2023-04-15 17:38:09,054 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:38:09,055 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@409395b9] for TypeConfiguration
2023-04-15 17:38:09,056 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@14e93c46] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@409395b9]
2023-04-15 17:38:09,058 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown initiated...
2023-04-15 17:38:09,070 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown completed.
2023-04-15 17:38:09,081 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLogger [main] 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2023-04-15 17:38:09,101 ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter [main] 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 1 of method importUserJob in com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration required a bean of type 'java.lang.String' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'java.lang.String' in your configuration.

2023-04-15 17:38:09,107 ERROR org.springframework.test.context.TestContextManager [main] Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener] to prepare test instance [com.yuripe.batchType0A.BatchType0AApplicationTests@764a3867]
java.lang.IllegalStateException: Failed to load ApplicationContext for [WebMergedContextConfiguration@69e8b711 testClass = com.yuripe.batchType0A.BatchType0AApplicationTests, locations = [], classes = [com.yuripe.batchType0A.BatchType0AApplication], contextInitializerClasses = [], activeProfiles = [], propertySourceLocations = [], propertySourceProperties = ["org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5e81e5ac, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@6035b93b, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@4c398c80, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@9da1, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@4febb875, org.springframework.boot.test.context.SpringBootTestAnnotation@26acbb8b], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:142)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:127)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:241)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:382)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:377)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:376)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:289)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:288)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:278)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:277)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:105)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:104)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'batchController': Unsatisfied dependency expressed through field 'importUserJob': Error creating bean with name 'importUserJob' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'importUserJob' parameter 1: No qualifying bean of type 'java.lang.String' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:713)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:693)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:133)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:482)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1416)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:597)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:917)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:310)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1388)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:545)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:184)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:118)
	... 67 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'importUserJob' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'importUserJob' parameter 1: No qualifying bean of type 'java.lang.String' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:548)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1417)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1337)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:710)
	... 92 common frames omitted
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'java.lang.String' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1824)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1383)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1337)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:885)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	... 105 common frames omitted
2023-04-15 17:45:08,562 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Starting BatchType0AApplication using Java 17.0.2 with PID 4672 (C:\Users\yurip\git\batch0A\batchType0A\target\classes started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 17:45:08,564 INFO com.yuripe.batchType0A.BatchType0AApplication [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 17:45:08,995 INFO org.springframework.batch.core.configuration.annotation.BatchRegistrar [main] Finished Spring Batch infrastructure beans configuration in 2 ms.
2023-04-15 17:45:09,207 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:45:09,208 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 17:45:09,229 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 16 ms. Found 0 JDBC repository interfaces.
2023-04-15 17:45:09,238 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:45:09,239 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 17:45:09,245 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 17:45:09,706 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8080 (http)
2023-04-15 17:45:09,714 INFO org.apache.coyote.http11.Http11NioProtocol [main] Initializing ProtocolHandler ["http-nio-8080"]
2023-04-15 17:45:09,715 INFO org.apache.catalina.core.StandardService [main] Starting service [Tomcat]
2023-04-15 17:45:09,716 INFO org.apache.catalina.core.StandardEngine [main] Starting Servlet engine: [Apache Tomcat/10.1.7]
2023-04-15 17:45:09,797 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [main] Initializing Spring embedded WebApplicationContext
2023-04-15 17:45:09,797 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 1182 ms
2023-04-15 17:45:09,940 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 17:45:09,991 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 17:45:10,216 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 17:45:10,225 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@68d6f48e
2023-04-15 17:45:10,226 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@68d6f48e
2023-04-15 17:45:10,226 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@68d6f48e
2023-04-15 17:45:10,226 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@6c96403e
2023-04-15 17:45:10,226 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@6c96403e
2023-04-15 17:45:10,226 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@7babed9e
2023-04-15 17:45:10,227 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@7babed9e
2023-04-15 17:45:10,227 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@2353354a
2023-04-15 17:45:10,228 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@2353354a
2023-04-15 17:45:10,228 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@7c7ed72a
2023-04-15 17:45:10,228 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@7c7ed72a
2023-04-15 17:45:10,228 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@7c7ed72a
2023-04-15 17:45:10,229 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@22b7ef2b
2023-04-15 17:45:10,229 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@22b7ef2b
2023-04-15 17:45:10,229 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@22b7ef2b
2023-04-15 17:45:10,229 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@36dafa24
2023-04-15 17:45:10,229 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@36dafa24
2023-04-15 17:45:10,229 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@36dafa24
2023-04-15 17:45:10,230 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@36dafa24
2023-04-15 17:45:10,230 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@2b098563
2023-04-15 17:45:10,230 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@c758a2d
2023-04-15 17:45:10,230 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@c758a2d
2023-04-15 17:45:10,230 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@d0b814d
2023-04-15 17:45:10,230 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@6ce15112
2023-04-15 17:45:10,230 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@ba4f370
2023-04-15 17:45:10,230 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@ba4f370
2023-04-15 17:45:10,230 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@ba4f370
2023-04-15 17:45:10,231 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@2ba024cb
2023-04-15 17:45:10,231 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@2ba024cb
2023-04-15 17:45:10,231 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@2ba024cb
2023-04-15 17:45:10,231 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@7af0d91b
2023-04-15 17:45:10,231 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@7af0d91b
2023-04-15 17:45:10,231 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@7af0d91b
2023-04-15 17:45:10,231 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@1c7f6e96
2023-04-15 17:45:10,231 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@1c7f6e96
2023-04-15 17:45:10,232 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@1c7f6e96
2023-04-15 17:45:10,232 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@30ec211a
2023-04-15 17:45:10,232 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@30ec211a
2023-04-15 17:45:10,232 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@30ec211a
2023-04-15 17:45:10,232 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@1ac0cdb0
2023-04-15 17:45:10,232 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@1ac0cdb0
2023-04-15 17:45:10,232 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@6684f7f2
2023-04-15 17:45:10,232 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@6684f7f2
2023-04-15 17:45:10,233 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@1682e6a
2023-04-15 17:45:10,233 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@1682e6a
2023-04-15 17:45:10,233 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@1682e6a
2023-04-15 17:45:10,233 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@505d2bac
2023-04-15 17:45:10,233 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@4cecc15a
2023-04-15 17:45:10,233 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@4cecc15a
2023-04-15 17:45:10,233 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@d969452
2023-04-15 17:45:10,233 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@4d4df0f4
2023-04-15 17:45:10,234 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@4d4df0f4
2023-04-15 17:45:10,234 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@4d4df0f4
2023-04-15 17:45:10,234 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@74f4a2ba
2023-04-15 17:45:10,234 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@74f4a2ba
2023-04-15 17:45:10,234 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@74f4a2ba
2023-04-15 17:45:10,234 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@5e385b6f
2023-04-15 17:45:10,234 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@67b560fe
2023-04-15 17:45:10,234 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@45dde6ac
2023-04-15 17:45:10,234 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@45dde6ac
2023-04-15 17:45:10,234 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@14ed7ddf
2023-04-15 17:45:10,234 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@14ed7ddf
2023-04-15 17:45:10,235 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@892af0e
2023-04-15 17:45:10,235 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@446c8c72
2023-04-15 17:45:10,235 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@6e2eead5
2023-04-15 17:45:10,235 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@11d2714a
2023-04-15 17:45:10,235 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@ca546a1
2023-04-15 17:45:10,235 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@2c8a445b
2023-04-15 17:45:10,235 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@356b6b5d
2023-04-15 17:45:10,235 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@356b6b5d
2023-04-15 17:45:10,235 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@37b1149b
2023-04-15 17:45:10,235 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@37b1149b
2023-04-15 17:45:10,235 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@1187dc82
2023-04-15 17:45:10,235 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@1187dc82
2023-04-15 17:45:10,235 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@6fd1ea75
2023-04-15 17:45:10,235 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@6fd1ea75
2023-04-15 17:45:10,236 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@18e4551
2023-04-15 17:45:10,236 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@18e4551
2023-04-15 17:45:10,236 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3ea48c37
2023-04-15 17:45:10,236 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@11e834ad
2023-04-15 17:45:10,236 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@710ae6a7
2023-04-15 17:45:10,236 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@710ae6a7
2023-04-15 17:45:10,236 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@25d911a
2023-04-15 17:45:10,237 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@25d911a
2023-04-15 17:45:10,237 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@18026052
2023-04-15 17:45:10,237 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@489f62a3
2023-04-15 17:45:10,237 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@6e068ac9
2023-04-15 17:45:10,237 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@6e068ac9
2023-04-15 17:45:10,237 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@3d0352
2023-04-15 17:45:10,237 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@3d0352
2023-04-15 17:45:10,237 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@bb6f3f7
2023-04-15 17:45:10,237 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@bb6f3f7
2023-04-15 17:45:10,237 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@bb6f3f7
2023-04-15 17:45:10,237 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@388f1258
2023-04-15 17:45:10,238 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@388f1258
2023-04-15 17:45:10,238 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@388f1258
2023-04-15 17:45:10,238 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@62058742
2023-04-15 17:45:10,238 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@aca2fc3
2023-04-15 17:45:10,238 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@36df4c26
2023-04-15 17:45:10,239 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@36df4c26
2023-04-15 17:45:10,239 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@76828577
2023-04-15 17:45:10,239 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@76828577
2023-04-15 17:45:10,239 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@76828577
2023-04-15 17:45:10,239 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@38732372
2023-04-15 17:45:10,240 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@639cb788
2023-04-15 17:45:10,240 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@2fee69a1
2023-04-15 17:45:10,240 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@2fee69a1
2023-04-15 17:45:10,240 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@4d25f816
2023-04-15 17:45:10,240 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@4d25f816
2023-04-15 17:45:10,240 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@4d25f816
2023-04-15 17:45:10,241 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@6c6c2a73
2023-04-15 17:45:10,241 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@6c6c2a73
2023-04-15 17:45:10,241 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@6a4af081
2023-04-15 17:45:10,241 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@6a4af081
2023-04-15 17:45:10,242 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@36b53f08
2023-04-15 17:45:10,242 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@36b53f08
2023-04-15 17:45:10,242 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@54329480
2023-04-15 17:45:10,242 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@54329480
2023-04-15 17:45:10,242 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@590013c7
2023-04-15 17:45:10,242 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@590013c7
2023-04-15 17:45:10,242 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@64f32e9e
2023-04-15 17:45:10,248 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@2026fbff
2023-04-15 17:45:10,248 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@2026fbff
2023-04-15 17:45:10,249 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@2084e65a
2023-04-15 17:45:10,249 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@2084e65a
2023-04-15 17:45:10,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@782ac148
2023-04-15 17:45:10,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 17:45:10,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 17:45:10,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 17:45:10,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 17:45:10,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 17:45:10,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 17:45:10,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 17:45:10,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@49cb5030
2023-04-15 17:45:10,276 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 17:45:10,594 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7c9372ed
2023-04-15 17:45:10,597 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 17:45:10,615 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 17:45:10,617 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 17:45:10,644 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7b3c0ecb) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5bb99d1d)
2023-04-15 17:45:10,644 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3006bfb) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4fd37449)
2023-04-15 17:45:10,644 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5402612e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@43445fc6)
2023-04-15 17:45:10,644 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@431babe6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@17befef0)
2023-04-15 17:45:10,644 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5072e638) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3129299f)
2023-04-15 17:45:10,645 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2f73f0c7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4fdac2a7)
2023-04-15 17:45:10,645 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@8debe42) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@70c31b17)
2023-04-15 17:45:10,645 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@40863800) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5950054d)
2023-04-15 17:45:10,645 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@24018c8b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4cf230bf)
2023-04-15 17:45:10,646 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 17:45:10,646 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 17:45:10,647 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 17:45:10,649 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:45:10,649 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:45:10,651 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@52d63b7e
2023-04-15 17:45:10,651 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@782ac148`
2023-04-15 17:45:10,654 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:45:10,654 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:45:10,655 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:45:10,659 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:45:10,659 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:45:10,659 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:45:10,660 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@ca2be53] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@78f5cbc5]
2023-04-15 17:45:11,022 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@ca2be53] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@35af1558]
2023-04-15 17:45:11,468 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 17:45:11,479 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@35af1558] for TypeConfiguration
2023-04-15 17:45:11,481 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:45:11,537 INFO org.springframework.batch.core.repository.support.JobRepositoryFactoryBean [main] No database type set, using meta data indicating: MYSQL
2023-04-15 17:45:11,552 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] No TaskExecutor has been set, defaulting to synchronous executor.
2023-04-15 17:45:11,560 WARN org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext [main] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'batchController': Unsatisfied dependency expressed through field 'importUserJob': Error creating bean with name 'importUserJob' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'importUserJob' parameter 1: No qualifying bean of type 'java.lang.String' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
2023-04-15 17:45:11,560 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:45:11,561 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@35af1558] for TypeConfiguration
2023-04-15 17:45:11,561 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@37393dab] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@35af1558]
2023-04-15 17:45:11,565 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown initiated...
2023-04-15 17:45:11,578 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown completed.
2023-04-15 17:45:11,581 INFO org.apache.catalina.core.StandardService [main] Stopping service [Tomcat]
2023-04-15 17:45:11,594 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLogger [main] 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2023-04-15 17:45:11,612 ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter [main] 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 1 of method importUserJob in com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration required a bean of type 'java.lang.String' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'java.lang.String' in your configuration.

2023-04-15 17:46:35,107 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Starting BatchType0AApplication using Java 17.0.2 with PID 13804 (C:\Users\yurip\git\batch0A\batchType0A\target\classes started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 17:46:35,115 INFO com.yuripe.batchType0A.BatchType0AApplication [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 17:46:35,531 INFO org.springframework.batch.core.configuration.annotation.BatchRegistrar [main] Finished Spring Batch infrastructure beans configuration in 3 ms.
2023-04-15 17:46:35,743 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:46:35,744 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 17:46:35,760 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 13 ms. Found 0 JDBC repository interfaces.
2023-04-15 17:46:35,769 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:46:35,771 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 17:46:35,777 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 17:46:36,206 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8080 (http)
2023-04-15 17:46:36,214 INFO org.apache.coyote.http11.Http11NioProtocol [main] Initializing ProtocolHandler ["http-nio-8080"]
2023-04-15 17:46:36,214 INFO org.apache.catalina.core.StandardService [main] Starting service [Tomcat]
2023-04-15 17:46:36,215 INFO org.apache.catalina.core.StandardEngine [main] Starting Servlet engine: [Apache Tomcat/10.1.7]
2023-04-15 17:46:36,301 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [main] Initializing Spring embedded WebApplicationContext
2023-04-15 17:46:36,302 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 1142 ms
2023-04-15 17:46:36,467 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 17:46:36,515 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 17:46:36,791 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 17:46:36,803 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@2a1e57c6
2023-04-15 17:46:36,804 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@2a1e57c6
2023-04-15 17:46:36,804 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@2a1e57c6
2023-04-15 17:46:36,804 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@68d6f48e
2023-04-15 17:46:36,805 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@68d6f48e
2023-04-15 17:46:36,805 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@6c96403e
2023-04-15 17:46:36,806 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@6c96403e
2023-04-15 17:46:36,806 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@7babed9e
2023-04-15 17:46:36,806 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@7babed9e
2023-04-15 17:46:36,806 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@2353354a
2023-04-15 17:46:36,806 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@2353354a
2023-04-15 17:46:36,806 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@2353354a
2023-04-15 17:46:36,807 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@7c7ed72a
2023-04-15 17:46:36,807 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@7c7ed72a
2023-04-15 17:46:36,807 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@7c7ed72a
2023-04-15 17:46:36,807 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@3c17bd0b
2023-04-15 17:46:36,808 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@3c17bd0b
2023-04-15 17:46:36,808 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@3c17bd0b
2023-04-15 17:46:36,808 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@3c17bd0b
2023-04-15 17:46:36,808 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@36dafa24
2023-04-15 17:46:36,808 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@2b098563
2023-04-15 17:46:36,809 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@2b098563
2023-04-15 17:46:36,809 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@c758a2d
2023-04-15 17:46:36,809 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@d0b814d
2023-04-15 17:46:36,809 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@6ce15112
2023-04-15 17:46:36,809 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@6ce15112
2023-04-15 17:46:36,809 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@6ce15112
2023-04-15 17:46:36,809 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@ba4f370
2023-04-15 17:46:36,809 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@ba4f370
2023-04-15 17:46:36,810 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@ba4f370
2023-04-15 17:46:36,810 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2ba024cb
2023-04-15 17:46:36,810 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2ba024cb
2023-04-15 17:46:36,810 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@2ba024cb
2023-04-15 17:46:36,810 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@7af0d91b
2023-04-15 17:46:36,810 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@7af0d91b
2023-04-15 17:46:36,811 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@7af0d91b
2023-04-15 17:46:36,811 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@1c7f6e96
2023-04-15 17:46:36,811 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@1c7f6e96
2023-04-15 17:46:36,811 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@1c7f6e96
2023-04-15 17:46:36,811 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@30ec211a
2023-04-15 17:46:36,811 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@30ec211a
2023-04-15 17:46:36,811 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@1ac0cdb0
2023-04-15 17:46:36,811 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@1ac0cdb0
2023-04-15 17:46:36,812 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@6684f7f2
2023-04-15 17:46:36,812 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@6684f7f2
2023-04-15 17:46:36,812 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@6684f7f2
2023-04-15 17:46:36,812 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@1682e6a
2023-04-15 17:46:36,813 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@505d2bac
2023-04-15 17:46:36,813 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@505d2bac
2023-04-15 17:46:36,813 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@4cecc15a
2023-04-15 17:46:36,813 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@d969452
2023-04-15 17:46:36,813 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@d969452
2023-04-15 17:46:36,813 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@d969452
2023-04-15 17:46:36,813 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@4d4df0f4
2023-04-15 17:46:36,814 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@4d4df0f4
2023-04-15 17:46:36,814 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@4d4df0f4
2023-04-15 17:46:36,814 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@74f4a2ba
2023-04-15 17:46:36,814 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@5e385b6f
2023-04-15 17:46:36,814 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@67b560fe
2023-04-15 17:46:36,814 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@67b560fe
2023-04-15 17:46:36,814 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@45dde6ac
2023-04-15 17:46:36,814 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@45dde6ac
2023-04-15 17:46:36,814 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@14ed7ddf
2023-04-15 17:46:36,814 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@892af0e
2023-04-15 17:46:36,814 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@446c8c72
2023-04-15 17:46:36,815 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@6e2eead5
2023-04-15 17:46:36,815 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@11d2714a
2023-04-15 17:46:36,815 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@ca546a1
2023-04-15 17:46:36,815 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@2c8a445b
2023-04-15 17:46:36,815 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@2c8a445b
2023-04-15 17:46:36,815 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@356b6b5d
2023-04-15 17:46:36,816 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@356b6b5d
2023-04-15 17:46:36,816 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@37b1149b
2023-04-15 17:46:36,816 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@37b1149b
2023-04-15 17:46:36,816 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@1187dc82
2023-04-15 17:46:36,816 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@1187dc82
2023-04-15 17:46:36,817 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@6fd1ea75
2023-04-15 17:46:36,817 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@6fd1ea75
2023-04-15 17:46:36,817 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@18e4551
2023-04-15 17:46:36,817 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@3ea48c37
2023-04-15 17:46:36,817 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@11e834ad
2023-04-15 17:46:36,817 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@11e834ad
2023-04-15 17:46:36,817 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@710ae6a7
2023-04-15 17:46:36,817 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@710ae6a7
2023-04-15 17:46:36,818 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@25d911a
2023-04-15 17:46:36,818 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@18026052
2023-04-15 17:46:36,818 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@489f62a3
2023-04-15 17:46:36,818 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@489f62a3
2023-04-15 17:46:36,818 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@6e068ac9
2023-04-15 17:46:36,818 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@6e068ac9
2023-04-15 17:46:36,818 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@3d0352
2023-04-15 17:46:36,818 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@3d0352
2023-04-15 17:46:36,818 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@3d0352
2023-04-15 17:46:36,819 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@bb6f3f7
2023-04-15 17:46:36,819 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@bb6f3f7
2023-04-15 17:46:36,819 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@bb6f3f7
2023-04-15 17:46:36,819 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@388f1258
2023-04-15 17:46:36,819 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@62058742
2023-04-15 17:46:36,819 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@aca2fc3
2023-04-15 17:46:36,819 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@aca2fc3
2023-04-15 17:46:36,819 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@36df4c26
2023-04-15 17:46:36,820 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@36df4c26
2023-04-15 17:46:36,820 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@36df4c26
2023-04-15 17:46:36,820 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@76828577
2023-04-15 17:46:36,820 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@38732372
2023-04-15 17:46:36,820 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@639cb788
2023-04-15 17:46:36,820 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@639cb788
2023-04-15 17:46:36,821 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@2fee69a1
2023-04-15 17:46:36,821 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@2fee69a1
2023-04-15 17:46:36,821 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@2fee69a1
2023-04-15 17:46:36,821 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@4d25f816
2023-04-15 17:46:36,821 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@4d25f816
2023-04-15 17:46:36,822 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@6c6c2a73
2023-04-15 17:46:36,822 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@6c6c2a73
2023-04-15 17:46:36,822 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@6a4af081
2023-04-15 17:46:36,823 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@6a4af081
2023-04-15 17:46:36,823 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@36b53f08
2023-04-15 17:46:36,823 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@36b53f08
2023-04-15 17:46:36,823 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@54329480
2023-04-15 17:46:36,823 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@54329480
2023-04-15 17:46:36,823 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@590013c7
2023-04-15 17:46:36,829 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@668a32a4
2023-04-15 17:46:36,829 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@668a32a4
2023-04-15 17:46:36,830 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@22fb9a2c
2023-04-15 17:46:36,830 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@22fb9a2c
2023-04-15 17:46:36,831 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@819fb19
2023-04-15 17:46:36,832 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@782ac148
2023-04-15 17:46:36,832 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 17:46:36,832 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 17:46:36,832 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 17:46:36,832 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 17:46:36,832 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 17:46:36,832 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 17:46:36,832 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 17:46:36,864 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 17:46:37,174 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@137a4b54
2023-04-15 17:46:37,176 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 17:46:37,192 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 17:46:37,194 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 17:46:37,218 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7b3c0ecb) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5bb99d1d)
2023-04-15 17:46:37,218 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3006bfb) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4fd37449)
2023-04-15 17:46:37,218 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5402612e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@43445fc6)
2023-04-15 17:46:37,218 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@431babe6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@17befef0)
2023-04-15 17:46:37,218 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5072e638) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3129299f)
2023-04-15 17:46:37,218 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2f73f0c7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4fdac2a7)
2023-04-15 17:46:37,218 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@8debe42) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@70c31b17)
2023-04-15 17:46:37,218 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@40863800) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5950054d)
2023-04-15 17:46:37,218 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@24018c8b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4cf230bf)
2023-04-15 17:46:37,219 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 17:46:37,219 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 17:46:37,220 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 17:46:37,221 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:46:37,221 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:46:37,223 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@52d63b7e
2023-04-15 17:46:37,223 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@819fb19`
2023-04-15 17:46:37,227 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:46:37,227 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:46:37,227 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:46:37,227 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:46:37,227 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:46:37,228 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:46:37,230 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@ca2be53] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@78f5cbc5]
2023-04-15 17:46:37,588 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@ca2be53] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@35af1558]
2023-04-15 17:46:38,071 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 17:46:38,083 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@35af1558] for TypeConfiguration
2023-04-15 17:46:38,085 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:46:38,135 INFO org.springframework.batch.core.repository.support.JobRepositoryFactoryBean [main] No database type set, using meta data indicating: MYSQL
2023-04-15 17:46:38,161 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] No TaskExecutor has been set, defaulting to synchronous executor.
2023-04-15 17:46:38,189 WARN org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext [main] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'batchController': Unsatisfied dependency expressed through field 'importUserJob': Error creating bean with name 'importUserJob' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'importUserJob' parameter 3: Error creating bean with name 'step1' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'step1' parameter 1: No qualifying bean of type 'java.lang.String' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
2023-04-15 17:46:38,189 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:46:38,190 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@35af1558] for TypeConfiguration
2023-04-15 17:46:38,190 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@7efba9b9] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@35af1558]
2023-04-15 17:46:38,193 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown initiated...
2023-04-15 17:46:38,205 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown completed.
2023-04-15 17:46:38,208 INFO org.apache.catalina.core.StandardService [main] Stopping service [Tomcat]
2023-04-15 17:46:38,221 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLogger [main] 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2023-04-15 17:46:38,247 ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter [main] 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 1 of method step1 in com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration required a bean of type 'java.lang.String' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'java.lang.String' in your configuration.

2023-04-15 17:47:27,334 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Starting BatchType0AApplication using Java 17.0.2 with PID 19824 (C:\Users\yurip\git\batch0A\batchType0A\target\classes started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 17:47:27,338 INFO com.yuripe.batchType0A.BatchType0AApplication [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 17:47:27,742 INFO org.springframework.batch.core.configuration.annotation.BatchRegistrar [main] Finished Spring Batch infrastructure beans configuration in 3 ms.
2023-04-15 17:47:27,945 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:47:27,946 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 17:47:27,961 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 12 ms. Found 0 JDBC repository interfaces.
2023-04-15 17:47:27,970 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:47:27,971 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 17:47:27,978 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 17:47:28,393 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8080 (http)
2023-04-15 17:47:28,402 INFO org.apache.coyote.http11.Http11NioProtocol [main] Initializing ProtocolHandler ["http-nio-8080"]
2023-04-15 17:47:28,402 INFO org.apache.catalina.core.StandardService [main] Starting service [Tomcat]
2023-04-15 17:47:28,403 INFO org.apache.catalina.core.StandardEngine [main] Starting Servlet engine: [Apache Tomcat/10.1.7]
2023-04-15 17:47:28,474 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [main] Initializing Spring embedded WebApplicationContext
2023-04-15 17:47:28,474 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 1085 ms
2023-04-15 17:47:28,634 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 17:47:28,677 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 17:47:28,874 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 17:47:28,887 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@ba4f370
2023-04-15 17:47:28,888 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@ba4f370
2023-04-15 17:47:28,888 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@ba4f370
2023-04-15 17:47:28,888 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@2ba024cb
2023-04-15 17:47:28,888 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@2ba024cb
2023-04-15 17:47:28,888 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@7af0d91b
2023-04-15 17:47:28,889 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@7af0d91b
2023-04-15 17:47:28,889 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@1c7f6e96
2023-04-15 17:47:28,889 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@1c7f6e96
2023-04-15 17:47:28,889 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@30ec211a
2023-04-15 17:47:28,889 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@30ec211a
2023-04-15 17:47:28,889 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@30ec211a
2023-04-15 17:47:28,890 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@1ac0cdb0
2023-04-15 17:47:28,891 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@1ac0cdb0
2023-04-15 17:47:28,891 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@1ac0cdb0
2023-04-15 17:47:28,892 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@505d2bac
2023-04-15 17:47:28,892 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@505d2bac
2023-04-15 17:47:28,892 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@505d2bac
2023-04-15 17:47:28,892 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@505d2bac
2023-04-15 17:47:28,892 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@4cecc15a
2023-04-15 17:47:28,892 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@d969452
2023-04-15 17:47:28,892 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@d969452
2023-04-15 17:47:28,893 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@4d4df0f4
2023-04-15 17:47:28,893 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@74f4a2ba
2023-04-15 17:47:28,893 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@5e385b6f
2023-04-15 17:47:28,893 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@5e385b6f
2023-04-15 17:47:28,893 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@5e385b6f
2023-04-15 17:47:28,893 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@67b560fe
2023-04-15 17:47:28,893 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@67b560fe
2023-04-15 17:47:28,893 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@67b560fe
2023-04-15 17:47:28,893 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@45dde6ac
2023-04-15 17:47:28,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@45dde6ac
2023-04-15 17:47:28,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@45dde6ac
2023-04-15 17:47:28,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@14ed7ddf
2023-04-15 17:47:28,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@14ed7ddf
2023-04-15 17:47:28,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@14ed7ddf
2023-04-15 17:47:28,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@892af0e
2023-04-15 17:47:28,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@892af0e
2023-04-15 17:47:28,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@892af0e
2023-04-15 17:47:28,895 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@446c8c72
2023-04-15 17:47:28,895 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@446c8c72
2023-04-15 17:47:28,895 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@6e2eead5
2023-04-15 17:47:28,895 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@6e2eead5
2023-04-15 17:47:28,895 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@11d2714a
2023-04-15 17:47:28,895 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@11d2714a
2023-04-15 17:47:28,895 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@11d2714a
2023-04-15 17:47:28,895 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@ca546a1
2023-04-15 17:47:28,896 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@2c8a445b
2023-04-15 17:47:28,896 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@2c8a445b
2023-04-15 17:47:28,896 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@356b6b5d
2023-04-15 17:47:28,896 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@37b1149b
2023-04-15 17:47:28,896 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@37b1149b
2023-04-15 17:47:28,896 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@37b1149b
2023-04-15 17:47:28,897 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@1187dc82
2023-04-15 17:47:28,897 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@1187dc82
2023-04-15 17:47:28,897 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@1187dc82
2023-04-15 17:47:28,897 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@6fd1ea75
2023-04-15 17:47:28,897 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@18e4551
2023-04-15 17:47:28,897 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@3ea48c37
2023-04-15 17:47:28,897 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@3ea48c37
2023-04-15 17:47:28,897 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@11e834ad
2023-04-15 17:47:28,897 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@11e834ad
2023-04-15 17:47:28,897 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@710ae6a7
2023-04-15 17:47:28,897 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@25d911a
2023-04-15 17:47:28,898 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@18026052
2023-04-15 17:47:28,898 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@489f62a3
2023-04-15 17:47:28,898 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@6e068ac9
2023-04-15 17:47:28,898 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@3d0352
2023-04-15 17:47:28,898 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@bb6f3f7
2023-04-15 17:47:28,898 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@bb6f3f7
2023-04-15 17:47:28,898 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@388f1258
2023-04-15 17:47:28,899 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@388f1258
2023-04-15 17:47:28,899 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@62058742
2023-04-15 17:47:28,899 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@62058742
2023-04-15 17:47:28,899 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@aca2fc3
2023-04-15 17:47:28,899 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@aca2fc3
2023-04-15 17:47:28,899 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@36df4c26
2023-04-15 17:47:28,900 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@36df4c26
2023-04-15 17:47:28,900 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@76828577
2023-04-15 17:47:28,900 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@38732372
2023-04-15 17:47:28,900 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@639cb788
2023-04-15 17:47:28,900 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@639cb788
2023-04-15 17:47:28,900 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@2fee69a1
2023-04-15 17:47:28,900 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@2fee69a1
2023-04-15 17:47:28,900 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@4d25f816
2023-04-15 17:47:28,901 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6c6c2a73
2023-04-15 17:47:28,901 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@6a4af081
2023-04-15 17:47:28,901 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@6a4af081
2023-04-15 17:47:28,901 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@36b53f08
2023-04-15 17:47:28,901 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@36b53f08
2023-04-15 17:47:28,902 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@54329480
2023-04-15 17:47:28,902 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@54329480
2023-04-15 17:47:28,902 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@54329480
2023-04-15 17:47:28,902 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@590013c7
2023-04-15 17:47:28,902 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@590013c7
2023-04-15 17:47:28,902 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@590013c7
2023-04-15 17:47:28,902 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@64f32e9e
2023-04-15 17:47:28,902 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@7b211077
2023-04-15 17:47:28,903 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@3b770d07
2023-04-15 17:47:28,903 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@3b770d07
2023-04-15 17:47:28,903 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@62b0bf85
2023-04-15 17:47:28,903 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@62b0bf85
2023-04-15 17:47:28,903 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@62b0bf85
2023-04-15 17:47:28,904 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@1fcaea93
2023-04-15 17:47:28,904 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@6c9bf3b5
2023-04-15 17:47:28,904 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@6f07d414
2023-04-15 17:47:28,904 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@6f07d414
2023-04-15 17:47:28,904 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@8ac12e6
2023-04-15 17:47:28,904 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@8ac12e6
2023-04-15 17:47:28,904 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@8ac12e6
2023-04-15 17:47:28,904 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@40faff12
2023-04-15 17:47:28,905 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@40faff12
2023-04-15 17:47:28,905 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@734fbae3
2023-04-15 17:47:28,907 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@734fbae3
2023-04-15 17:47:28,907 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@223967ea
2023-04-15 17:47:28,907 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@223967ea
2023-04-15 17:47:28,907 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@4a6a6a69
2023-04-15 17:47:28,907 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@4a6a6a69
2023-04-15 17:47:28,907 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@5d7f1e59
2023-04-15 17:47:28,907 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@5d7f1e59
2023-04-15 17:47:28,907 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@53e93fb7
2023-04-15 17:47:28,915 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@53f7a906
2023-04-15 17:47:28,915 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@53f7a906
2023-04-15 17:47:28,917 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@61d2f267
2023-04-15 17:47:28,917 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@61d2f267
2023-04-15 17:47:28,918 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@23afc725
2023-04-15 17:47:28,919 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 17:47:28,920 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 17:47:28,921 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 17:47:28,921 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 17:47:28,921 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 17:47:28,921 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 17:47:28,921 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 17:47:28,921 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 17:47:28,962 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 17:47:29,265 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1f3c5308
2023-04-15 17:47:29,267 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 17:47:29,286 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 17:47:29,287 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 17:47:29,312 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@40863800) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5950054d)
2023-04-15 17:47:29,312 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@24018c8b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4cf230bf)
2023-04-15 17:47:29,312 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3dc55719) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@64665781)
2023-04-15 17:47:29,312 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4c2bea52) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@11015ca0)
2023-04-15 17:47:29,312 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6ebbc06) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@50672905)
2023-04-15 17:47:29,313 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@430d3021) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@58f290bc)
2023-04-15 17:47:29,313 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3220c28) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6ae42248)
2023-04-15 17:47:29,313 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@40c28b0d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@cf984d9)
2023-04-15 17:47:29,313 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1fa98a22) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@54941dfd)
2023-04-15 17:47:29,314 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 17:47:29,314 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 17:47:29,314 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 17:47:29,316 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:47:29,316 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:47:29,318 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@336d28a1
2023-04-15 17:47:29,318 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@23afc725`
2023-04-15 17:47:29,322 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:47:29,322 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:47:29,323 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:47:29,323 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:47:29,323 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:47:29,323 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:47:29,324 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@11adab6d] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@11bfd751]
2023-04-15 17:47:29,642 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@11adab6d] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@3a116ca6]
2023-04-15 17:47:30,141 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 17:47:30,150 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@3a116ca6] for TypeConfiguration
2023-04-15 17:47:30,152 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:47:30,199 INFO org.springframework.batch.core.repository.support.JobRepositoryFactoryBean [main] No database type set, using meta data indicating: MYSQL
2023-04-15 17:47:30,218 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] No TaskExecutor has been set, defaulting to synchronous executor.
2023-04-15 17:47:42,700 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 17:47:42,715 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 17:47:42,765 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 17:47:43,110 INFO org.apache.coyote.http11.Http11NioProtocol [main] Starting ProtocolHandler ["http-nio-8080"]
2023-04-15 17:47:43,135 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat started on port(s): 8080 (http) with context path ''
2023-04-15 17:47:43,144 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Started BatchType0AApplication in 16.15 seconds (process running for 17.241)
2023-04-15 17:47:50,401 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [http-nio-8080-exec-1] Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-04-15 17:47:50,402 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-1] Initializing Servlet 'dispatcherServlet'
2023-04-15 17:47:50,403 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-1] Completed initialization in 1 ms
2023-04-15 17:48:03,752 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [http-nio-8080-exec-3] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'resources':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}]
2023-04-15 17:48:03,846 INFO org.springframework.batch.core.job.SimpleStepHandler [http-nio-8080-exec-3] Executing step: [step1]
2023-04-15 17:48:03,864 ERROR org.springframework.batch.core.step.AbstractStep [http-nio-8080-exec-3] Encountered an error executing step step1 in job importUserJob
org.springframework.batch.item.ItemStreamException: Failed to initialize the reader
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:152)
	at org.springframework.batch.item.support.CompositeItemStream.open(CompositeItemStream.java:124)
	at org.springframework.batch.core.step.tasklet.TaskletStep.open(TaskletStep.java:293)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:224)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at com.yuripe.batchType0A.Controller.BatchController.importFileAndRun(BatchController.java:50)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:563)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.IllegalStateException: Input resource must be readable (reader is in 'strict' mode): class path resource []
	at org.springframework.batch.item.file.FlatFileItemReader.doOpen(FlatFileItemReader.java:270)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:149)
	... 65 common frames omitted
2023-04-15 17:48:03,877 INFO org.springframework.batch.core.step.AbstractStep [http-nio-8080-exec-3] Step: [step1] executed in 29ms
2023-04-15 17:48:03,894 INFO com.yuripe.batchType0A.Listener.JobFailureNotificationListener [http-nio-8080-exec-3] !!! JOB FAILED! Time to verify the results
2023-04-15 17:48:03,905 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [http-nio-8080-exec-3] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'resources':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}] and the following status: [FAILED] in 125ms
2023-04-15 17:48:43,098 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [http-nio-8080-exec-4] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'resources':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}]
2023-04-15 17:48:43,202 INFO org.springframework.batch.core.job.SimpleStepHandler [http-nio-8080-exec-4] Executing step: [step1]
2023-04-15 17:48:43,228 ERROR org.springframework.batch.core.step.AbstractStep [http-nio-8080-exec-4] Encountered an error executing step step1 in job importUserJob
org.springframework.batch.item.ItemStreamException: Failed to initialize the reader
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:152)
	at org.springframework.batch.item.support.CompositeItemStream.open(CompositeItemStream.java:124)
	at org.springframework.batch.core.step.tasklet.TaskletStep.open(TaskletStep.java:293)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:224)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at com.yuripe.batchType0A.Controller.BatchController.importFileAndRun(BatchController.java:50)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:563)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.IllegalStateException: Input resource must be readable (reader is in 'strict' mode): class path resource []
	at org.springframework.batch.item.file.FlatFileItemReader.doOpen(FlatFileItemReader.java:270)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:149)
	... 65 common frames omitted
2023-04-15 17:48:43,242 INFO org.springframework.batch.core.step.AbstractStep [http-nio-8080-exec-4] Step: [step1] executed in 38ms
2023-04-15 17:48:43,285 INFO com.yuripe.batchType0A.Listener.JobFailureNotificationListener [http-nio-8080-exec-4] !!! JOB FAILED! Time to verify the results
2023-04-15 17:48:43,308 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [http-nio-8080-exec-4] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'resources':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}] and the following status: [FAILED] in 185ms
2023-04-15 17:52:11,567 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Starting BatchType0AApplication using Java 17.0.2 with PID 17768 (C:\Users\yurip\git\batch0A\batchType0A\target\classes started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 17:52:11,569 INFO com.yuripe.batchType0A.BatchType0AApplication [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 17:52:11,969 INFO org.springframework.batch.core.configuration.annotation.BatchRegistrar [main] Finished Spring Batch infrastructure beans configuration in 4 ms.
2023-04-15 17:52:12,184 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:52:12,186 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 17:52:12,207 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 16 ms. Found 0 JDBC repository interfaces.
2023-04-15 17:52:12,216 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 17:52:12,218 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 17:52:12,223 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 1 ms. Found 0 JPA repository interfaces.
2023-04-15 17:52:12,663 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8080 (http)
2023-04-15 17:52:12,673 INFO org.apache.coyote.http11.Http11NioProtocol [main] Initializing ProtocolHandler ["http-nio-8080"]
2023-04-15 17:52:12,674 INFO org.apache.catalina.core.StandardService [main] Starting service [Tomcat]
2023-04-15 17:52:12,674 INFO org.apache.catalina.core.StandardEngine [main] Starting Servlet engine: [Apache Tomcat/10.1.7]
2023-04-15 17:52:12,768 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [main] Initializing Spring embedded WebApplicationContext
2023-04-15 17:52:12,769 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 1154 ms
2023-04-15 17:52:12,891 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 17:52:12,940 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 17:52:13,180 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 17:52:13,191 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@7ef8e623
2023-04-15 17:52:13,191 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@7ef8e623
2023-04-15 17:52:13,191 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@7ef8e623
2023-04-15 17:52:13,192 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3d8d970e
2023-04-15 17:52:13,192 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3d8d970e
2023-04-15 17:52:13,192 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@2fac80a8
2023-04-15 17:52:13,192 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@2fac80a8
2023-04-15 17:52:13,192 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@6987a133
2023-04-15 17:52:13,193 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@6987a133
2023-04-15 17:52:13,193 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@50778bde
2023-04-15 17:52:13,193 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@50778bde
2023-04-15 17:52:13,193 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@50778bde
2023-04-15 17:52:13,194 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@1934339
2023-04-15 17:52:13,194 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@1934339
2023-04-15 17:52:13,194 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@1934339
2023-04-15 17:52:13,194 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@72eed547
2023-04-15 17:52:13,194 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@72eed547
2023-04-15 17:52:13,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@72eed547
2023-04-15 17:52:13,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@72eed547
2023-04-15 17:52:13,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@69ffdaa8
2023-04-15 17:52:13,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@2a1e57c6
2023-04-15 17:52:13,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@2a1e57c6
2023-04-15 17:52:13,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@68d6f48e
2023-04-15 17:52:13,196 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@6c96403e
2023-04-15 17:52:13,196 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@7babed9e
2023-04-15 17:52:13,196 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@7babed9e
2023-04-15 17:52:13,196 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@7babed9e
2023-04-15 17:52:13,196 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@2353354a
2023-04-15 17:52:13,196 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@2353354a
2023-04-15 17:52:13,196 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@2353354a
2023-04-15 17:52:13,196 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@7c7ed72a
2023-04-15 17:52:13,196 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@7c7ed72a
2023-04-15 17:52:13,196 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@7c7ed72a
2023-04-15 17:52:13,197 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@22b7ef2b
2023-04-15 17:52:13,197 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@22b7ef2b
2023-04-15 17:52:13,197 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@22b7ef2b
2023-04-15 17:52:13,197 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@6d421fe
2023-04-15 17:52:13,197 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@6d421fe
2023-04-15 17:52:13,197 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@6d421fe
2023-04-15 17:52:13,197 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@3c17bd0b
2023-04-15 17:52:13,198 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@3c17bd0b
2023-04-15 17:52:13,198 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@36dafa24
2023-04-15 17:52:13,198 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@36dafa24
2023-04-15 17:52:13,198 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@2b098563
2023-04-15 17:52:13,198 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@2b098563
2023-04-15 17:52:13,198 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@2b098563
2023-04-15 17:52:13,198 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@c758a2d
2023-04-15 17:52:13,199 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@d0b814d
2023-04-15 17:52:13,199 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@d0b814d
2023-04-15 17:52:13,199 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@6ce15112
2023-04-15 17:52:13,199 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@ba4f370
2023-04-15 17:52:13,199 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@ba4f370
2023-04-15 17:52:13,199 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@ba4f370
2023-04-15 17:52:13,200 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@2ba024cb
2023-04-15 17:52:13,200 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@2ba024cb
2023-04-15 17:52:13,200 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@2ba024cb
2023-04-15 17:52:13,200 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@7af0d91b
2023-04-15 17:52:13,200 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@1c7f6e96
2023-04-15 17:52:13,200 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@30ec211a
2023-04-15 17:52:13,200 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@30ec211a
2023-04-15 17:52:13,200 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@1ac0cdb0
2023-04-15 17:52:13,201 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@1ac0cdb0
2023-04-15 17:52:13,201 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@6684f7f2
2023-04-15 17:52:13,201 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@1682e6a
2023-04-15 17:52:13,201 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@505d2bac
2023-04-15 17:52:13,201 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@4cecc15a
2023-04-15 17:52:13,201 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@d969452
2023-04-15 17:52:13,201 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@4d4df0f4
2023-04-15 17:52:13,202 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@74f4a2ba
2023-04-15 17:52:13,202 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@74f4a2ba
2023-04-15 17:52:13,202 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@5e385b6f
2023-04-15 17:52:13,202 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@5e385b6f
2023-04-15 17:52:13,202 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@67b560fe
2023-04-15 17:52:13,202 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@67b560fe
2023-04-15 17:52:13,202 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@45dde6ac
2023-04-15 17:52:13,202 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@45dde6ac
2023-04-15 17:52:13,202 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@14ed7ddf
2023-04-15 17:52:13,203 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@14ed7ddf
2023-04-15 17:52:13,203 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@892af0e
2023-04-15 17:52:13,203 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@446c8c72
2023-04-15 17:52:13,203 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@6e2eead5
2023-04-15 17:52:13,203 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@6e2eead5
2023-04-15 17:52:13,203 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@11d2714a
2023-04-15 17:52:13,203 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@11d2714a
2023-04-15 17:52:13,204 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@ca546a1
2023-04-15 17:52:13,204 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@2c8a445b
2023-04-15 17:52:13,204 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@356b6b5d
2023-04-15 17:52:13,204 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@356b6b5d
2023-04-15 17:52:13,204 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@37b1149b
2023-04-15 17:52:13,204 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@37b1149b
2023-04-15 17:52:13,204 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@1187dc82
2023-04-15 17:52:13,204 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@1187dc82
2023-04-15 17:52:13,204 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@1187dc82
2023-04-15 17:52:13,205 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@6fd1ea75
2023-04-15 17:52:13,205 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@6fd1ea75
2023-04-15 17:52:13,205 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@6fd1ea75
2023-04-15 17:52:13,205 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@18e4551
2023-04-15 17:52:13,205 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@3ea48c37
2023-04-15 17:52:13,205 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@11e834ad
2023-04-15 17:52:13,205 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@11e834ad
2023-04-15 17:52:13,205 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@710ae6a7
2023-04-15 17:52:13,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@710ae6a7
2023-04-15 17:52:13,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@710ae6a7
2023-04-15 17:52:13,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@25d911a
2023-04-15 17:52:13,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@18026052
2023-04-15 17:52:13,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@489f62a3
2023-04-15 17:52:13,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@489f62a3
2023-04-15 17:52:13,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@6e068ac9
2023-04-15 17:52:13,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@6e068ac9
2023-04-15 17:52:13,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@6e068ac9
2023-04-15 17:52:13,208 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@3d0352
2023-04-15 17:52:13,208 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@3d0352
2023-04-15 17:52:13,209 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@bb6f3f7
2023-04-15 17:52:13,209 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@bb6f3f7
2023-04-15 17:52:13,209 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@388f1258
2023-04-15 17:52:13,209 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@388f1258
2023-04-15 17:52:13,209 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@62058742
2023-04-15 17:52:13,209 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@62058742
2023-04-15 17:52:13,210 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@aca2fc3
2023-04-15 17:52:13,210 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@aca2fc3
2023-04-15 17:52:13,210 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@36df4c26
2023-04-15 17:52:13,218 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@507049f2
2023-04-15 17:52:13,218 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@507049f2
2023-04-15 17:52:13,219 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@38bc5ac0
2023-04-15 17:52:13,219 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@38bc5ac0
2023-04-15 17:52:13,220 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@2084e65a
2023-04-15 17:52:13,221 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1b8fa2fa
2023-04-15 17:52:13,221 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@21527b8
2023-04-15 17:52:13,221 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@7cc1f72c
2023-04-15 17:52:13,221 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@7b7068d8
2023-04-15 17:52:13,221 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@1d8e9d3e
2023-04-15 17:52:13,221 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@360d41d0
2023-04-15 17:52:13,221 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@4586a8aa
2023-04-15 17:52:13,221 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@3dc82e6a
2023-04-15 17:52:13,249 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 17:52:13,553 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@26d73519
2023-04-15 17:52:13,556 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 17:52:13,577 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 17:52:13,579 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 17:52:13,606 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@69c33ea2) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@59e0d521)
2023-04-15 17:52:13,606 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2e3900dc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5ad0c70a)
2023-04-15 17:52:13,606 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2a16d4dc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@75805562)
2023-04-15 17:52:13,606 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@13d984ee) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4fedf908)
2023-04-15 17:52:13,606 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5341641d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@241d1052)
2023-04-15 17:52:13,607 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7b3c0ecb) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5bb99d1d)
2023-04-15 17:52:13,607 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3006bfb) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4fd37449)
2023-04-15 17:52:13,607 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5402612e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@43445fc6)
2023-04-15 17:52:13,607 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@431babe6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@17befef0)
2023-04-15 17:52:13,608 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 17:52:13,608 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 17:52:13,609 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 17:52:13,610 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:52:13,610 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 17:52:13,612 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@516c20de
2023-04-15 17:52:13,612 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@2084e65a`
2023-04-15 17:52:13,615 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:52:13,615 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:52:13,615 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 17:52:13,615 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:52:13,616 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:52:13,616 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 17:52:13,617 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@51141f64] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@32c0fecc]
2023-04-15 17:52:13,941 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@51141f64] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@42cd0fc6]
2023-04-15 17:52:14,352 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 17:52:14,362 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@42cd0fc6] for TypeConfiguration
2023-04-15 17:52:14,364 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:52:14,412 INFO org.springframework.batch.core.repository.support.JobRepositoryFactoryBean [main] No database type set, using meta data indicating: MYSQL
2023-04-15 17:52:14,435 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] No TaskExecutor has been set, defaulting to synchronous executor.
2023-04-15 17:52:14,442 WARN org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext [main] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'batchController': Unsatisfied dependency expressed through field 'importUserJob': Error creating bean with name 'importUserJob' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'importUserJob' parameter 1: No qualifying bean of type 'java.lang.String' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
2023-04-15 17:52:14,443 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 17:52:14,443 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@42cd0fc6] for TypeConfiguration
2023-04-15 17:52:14,443 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@44ec4a38] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@42cd0fc6]
2023-04-15 17:52:14,446 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown initiated...
2023-04-15 17:52:14,458 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown completed.
2023-04-15 17:52:14,461 INFO org.apache.catalina.core.StandardService [main] Stopping service [Tomcat]
2023-04-15 17:52:14,473 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLogger [main] 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2023-04-15 17:52:14,495 ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter [main] 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 1 of method importUserJob in com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration required a bean of type 'java.lang.String' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'java.lang.String' in your configuration.

2023-04-15 18:11:08,235 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Starting BatchType0AApplication using Java 17.0.2 with PID 4948 (C:\Users\yurip\git\batch0A\batchType0A\target\classes started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 18:11:08,237 INFO com.yuripe.batchType0A.BatchType0AApplication [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 18:11:08,630 INFO org.springframework.batch.core.configuration.annotation.BatchRegistrar [main] Finished Spring Batch infrastructure beans configuration in 2 ms.
2023-04-15 18:11:08,996 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:11:08,998 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 18:11:09,019 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 17 ms. Found 0 JDBC repository interfaces.
2023-04-15 18:11:09,032 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:11:09,033 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 18:11:09,041 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 3 ms. Found 0 JPA repository interfaces.
2023-04-15 18:11:09,447 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8080 (http)
2023-04-15 18:11:09,460 INFO org.apache.coyote.http11.Http11NioProtocol [main] Initializing ProtocolHandler ["http-nio-8080"]
2023-04-15 18:11:09,461 INFO org.apache.catalina.core.StandardService [main] Starting service [Tomcat]
2023-04-15 18:11:09,462 INFO org.apache.catalina.core.StandardEngine [main] Starting Servlet engine: [Apache Tomcat/10.1.7]
2023-04-15 18:11:09,555 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [main] Initializing Spring embedded WebApplicationContext
2023-04-15 18:11:09,556 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 1274 ms
2023-04-15 18:11:09,683 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 18:11:09,738 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 18:11:09,959 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 18:11:09,976 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6684f7f2
2023-04-15 18:11:09,977 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6684f7f2
2023-04-15 18:11:09,978 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@6684f7f2
2023-04-15 18:11:09,978 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@1682e6a
2023-04-15 18:11:09,978 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@1682e6a
2023-04-15 18:11:09,979 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@505d2bac
2023-04-15 18:11:09,979 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@505d2bac
2023-04-15 18:11:09,979 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@4cecc15a
2023-04-15 18:11:09,979 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@4cecc15a
2023-04-15 18:11:09,979 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@d969452
2023-04-15 18:11:09,979 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@d969452
2023-04-15 18:11:09,979 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@d969452
2023-04-15 18:11:09,980 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@4d4df0f4
2023-04-15 18:11:09,980 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@4d4df0f4
2023-04-15 18:11:09,981 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@4d4df0f4
2023-04-15 18:11:09,981 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@67b560fe
2023-04-15 18:11:09,981 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@67b560fe
2023-04-15 18:11:09,981 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@67b560fe
2023-04-15 18:11:09,981 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@67b560fe
2023-04-15 18:11:09,981 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@45dde6ac
2023-04-15 18:11:09,982 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@14ed7ddf
2023-04-15 18:11:09,982 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@14ed7ddf
2023-04-15 18:11:09,982 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@892af0e
2023-04-15 18:11:09,982 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@446c8c72
2023-04-15 18:11:09,982 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@6e2eead5
2023-04-15 18:11:09,982 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@6e2eead5
2023-04-15 18:11:09,982 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@6e2eead5
2023-04-15 18:11:09,983 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@11d2714a
2023-04-15 18:11:09,983 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@11d2714a
2023-04-15 18:11:09,983 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@11d2714a
2023-04-15 18:11:09,983 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@ca546a1
2023-04-15 18:11:09,983 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@ca546a1
2023-04-15 18:11:09,983 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@ca546a1
2023-04-15 18:11:09,983 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@2c8a445b
2023-04-15 18:11:09,984 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@2c8a445b
2023-04-15 18:11:09,984 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@2c8a445b
2023-04-15 18:11:09,984 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@356b6b5d
2023-04-15 18:11:09,984 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@356b6b5d
2023-04-15 18:11:09,984 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@356b6b5d
2023-04-15 18:11:09,984 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@37b1149b
2023-04-15 18:11:09,984 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@37b1149b
2023-04-15 18:11:09,985 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@1187dc82
2023-04-15 18:11:09,985 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@1187dc82
2023-04-15 18:11:09,985 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@6fd1ea75
2023-04-15 18:11:09,985 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@6fd1ea75
2023-04-15 18:11:09,985 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@6fd1ea75
2023-04-15 18:11:09,985 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@18e4551
2023-04-15 18:11:09,986 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@3ea48c37
2023-04-15 18:11:09,986 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@3ea48c37
2023-04-15 18:11:09,986 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@11e834ad
2023-04-15 18:11:09,986 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@710ae6a7
2023-04-15 18:11:09,987 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@710ae6a7
2023-04-15 18:11:09,987 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@710ae6a7
2023-04-15 18:11:09,987 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@25d911a
2023-04-15 18:11:09,987 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@25d911a
2023-04-15 18:11:09,987 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@25d911a
2023-04-15 18:11:09,987 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@18026052
2023-04-15 18:11:09,987 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@489f62a3
2023-04-15 18:11:09,987 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@6e068ac9
2023-04-15 18:11:09,987 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@6e068ac9
2023-04-15 18:11:09,987 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@3d0352
2023-04-15 18:11:09,988 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@3d0352
2023-04-15 18:11:09,988 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@bb6f3f7
2023-04-15 18:11:09,989 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@388f1258
2023-04-15 18:11:09,989 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@62058742
2023-04-15 18:11:09,989 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@aca2fc3
2023-04-15 18:11:09,989 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@36df4c26
2023-04-15 18:11:09,989 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@76828577
2023-04-15 18:11:09,990 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@38732372
2023-04-15 18:11:09,990 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@38732372
2023-04-15 18:11:09,990 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@639cb788
2023-04-15 18:11:09,990 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@639cb788
2023-04-15 18:11:09,990 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@2fee69a1
2023-04-15 18:11:09,990 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@2fee69a1
2023-04-15 18:11:09,990 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@4d25f816
2023-04-15 18:11:09,991 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@4d25f816
2023-04-15 18:11:09,991 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@6c6c2a73
2023-04-15 18:11:09,991 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@6c6c2a73
2023-04-15 18:11:09,991 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@6a4af081
2023-04-15 18:11:09,991 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@36b53f08
2023-04-15 18:11:09,991 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@54329480
2023-04-15 18:11:09,991 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@54329480
2023-04-15 18:11:09,991 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@590013c7
2023-04-15 18:11:09,992 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@590013c7
2023-04-15 18:11:09,992 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@64f32e9e
2023-04-15 18:11:09,992 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7b211077
2023-04-15 18:11:09,992 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@3b770d07
2023-04-15 18:11:09,992 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@3b770d07
2023-04-15 18:11:09,992 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@62b0bf85
2023-04-15 18:11:09,992 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@62b0bf85
2023-04-15 18:11:09,992 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@1fcaea93
2023-04-15 18:11:09,992 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@1fcaea93
2023-04-15 18:11:09,992 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@1fcaea93
2023-04-15 18:11:09,992 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@6c9bf3b5
2023-04-15 18:11:09,992 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@6c9bf3b5
2023-04-15 18:11:09,992 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@6c9bf3b5
2023-04-15 18:11:09,992 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@6f07d414
2023-04-15 18:11:09,993 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@8ac12e6
2023-04-15 18:11:09,993 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@40faff12
2023-04-15 18:11:09,993 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@40faff12
2023-04-15 18:11:09,993 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@734fbae3
2023-04-15 18:11:09,994 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@734fbae3
2023-04-15 18:11:09,994 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@734fbae3
2023-04-15 18:11:09,994 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@223967ea
2023-04-15 18:11:09,994 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@4a6a6a69
2023-04-15 18:11:09,994 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@5d7f1e59
2023-04-15 18:11:09,995 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@5d7f1e59
2023-04-15 18:11:09,995 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@53e93fb7
2023-04-15 18:11:09,995 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@53e93fb7
2023-04-15 18:11:09,995 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@53e93fb7
2023-04-15 18:11:09,996 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@3a861417
2023-04-15 18:11:09,997 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@3a861417
2023-04-15 18:11:09,998 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@2326180c
2023-04-15 18:11:09,999 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@2326180c
2023-04-15 18:11:09,999 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@68e47e7
2023-04-15 18:11:09,999 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@68e47e7
2023-04-15 18:11:09,999 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@1c00d406
2023-04-15 18:11:09,999 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@1c00d406
2023-04-15 18:11:09,999 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@16ac4d3d
2023-04-15 18:11:09,999 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@16ac4d3d
2023-04-15 18:11:09,999 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@559d19c
2023-04-15 18:11:10,006 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@1b8fa2fa
2023-04-15 18:11:10,006 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@1b8fa2fa
2023-04-15 18:11:10,007 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@49cb5030
2023-04-15 18:11:10,007 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@49cb5030
2023-04-15 18:11:10,008 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@44384b4a
2023-04-15 18:11:10,009 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:11:10,009 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:11:10,009 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:11:10,009 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:11:10,009 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@3eac2e8a
2023-04-15 18:11:10,009 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:11:10,009 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:11:10,010 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:11:10,045 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 18:11:10,383 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5fc1e4fb
2023-04-15 18:11:10,385 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 18:11:10,402 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 18:11:10,404 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 18:11:10,429 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@64665781) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4c2bea52)
2023-04-15 18:11:10,429 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@11015ca0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6ebbc06)
2023-04-15 18:11:10,429 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@50672905) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@430d3021)
2023-04-15 18:11:10,429 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@58f290bc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3220c28)
2023-04-15 18:11:10,429 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6ae42248) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@40c28b0d)
2023-04-15 18:11:10,429 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@cf984d9) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1fa98a22)
2023-04-15 18:11:10,429 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@54941dfd) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5a7e81)
2023-04-15 18:11:10,429 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4045fd1f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@13ee97af)
2023-04-15 18:11:10,430 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@67e11bda) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@341ccfd1)
2023-04-15 18:11:10,431 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 18:11:10,431 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 18:11:10,431 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 18:11:10,433 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:11:10,433 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:11:10,435 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@40738846
2023-04-15 18:11:10,435 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@44384b4a`
2023-04-15 18:11:10,438 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:11:10,438 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:11:10,438 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:11:10,439 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:11:10,439 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:11:10,439 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:11:10,440 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@32328dc4] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@17df689e]
2023-04-15 18:11:10,768 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@32328dc4] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@64540344]
2023-04-15 18:11:11,207 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 18:11:11,217 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@64540344] for TypeConfiguration
2023-04-15 18:11:11,219 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:11:11,282 INFO org.springframework.batch.core.repository.support.JobRepositoryFactoryBean [main] No database type set, using meta data indicating: MYSQL
2023-04-15 18:11:11,302 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] No TaskExecutor has been set, defaulting to synchronous executor.
2023-04-15 18:11:11,350 WARN org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext [main] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'batchController': Unsatisfied dependency expressed through field 'importUserJob': Error creating bean with name 'importUserJob' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'importUserJob' parameter 3: Error creating bean with name 'step1' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'step1' parameter 1: Expression parsing failed
2023-04-15 18:11:11,351 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:11:11,351 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@64540344] for TypeConfiguration
2023-04-15 18:11:11,352 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@634d3439] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@64540344]
2023-04-15 18:11:11,354 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown initiated...
2023-04-15 18:11:11,365 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown completed.
2023-04-15 18:11:11,368 INFO org.apache.catalina.core.StandardService [main] Stopping service [Tomcat]
2023-04-15 18:11:11,381 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLogger [main] 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2023-04-15 18:11:11,397 ERROR org.springframework.boot.SpringApplication [main] Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'batchController': Unsatisfied dependency expressed through field 'importUserJob': Error creating bean with name 'importUserJob' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'importUserJob' parameter 3: Error creating bean with name 'step1' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'step1' parameter 1: Expression parsing failed
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:713)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:693)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:133)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:482)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1416)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:597)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:917)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:310)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1304)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1293)
	at com.yuripe.batchType0A.BatchType0AApplication.main(BatchType0AApplication.java:16)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'importUserJob' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'importUserJob' parameter 3: Error creating bean with name 'step1' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'step1' parameter 1: Expression parsing failed
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:548)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1417)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1337)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:710)
	... 20 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'step1' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'step1' parameter 1: Expression parsing failed
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:548)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1417)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1337)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:885)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	... 33 common frames omitted
Caused by: org.springframework.beans.factory.BeanExpressionException: Expression parsing failed
	at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:170)
	at org.springframework.beans.factory.support.AbstractBeanFactory.evaluateBeanDefinitionString(AbstractBeanFactory.java:1593)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1361)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1337)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:885)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	... 47 common frames omitted
Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1008E: Property or field 'jobParameters' cannot be found on object of type 'org.springframework.beans.factory.config.BeanExpressionContext' - maybe not public or not valid?
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:217)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:104)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:92)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:55)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:91)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:273)
	at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:167)
	... 52 common frames omitted
2023-04-15 18:11:35,557 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Starting BatchType0AApplication using Java 17.0.2 with PID 6464 (C:\Users\yurip\git\batch0A\batchType0A\target\classes started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 18:11:35,559 INFO com.yuripe.batchType0A.BatchType0AApplication [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 18:11:36,012 INFO org.springframework.batch.core.configuration.annotation.BatchRegistrar [main] Finished Spring Batch infrastructure beans configuration in 2 ms.
2023-04-15 18:11:36,314 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:11:36,315 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 18:11:36,331 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 12 ms. Found 0 JDBC repository interfaces.
2023-04-15 18:11:36,341 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:11:36,342 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 18:11:36,347 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 18:11:36,706 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8080 (http)
2023-04-15 18:11:36,715 INFO org.apache.coyote.http11.Http11NioProtocol [main] Initializing ProtocolHandler ["http-nio-8080"]
2023-04-15 18:11:36,716 INFO org.apache.catalina.core.StandardService [main] Starting service [Tomcat]
2023-04-15 18:11:36,716 INFO org.apache.catalina.core.StandardEngine [main] Starting Servlet engine: [Apache Tomcat/10.1.7]
2023-04-15 18:11:36,795 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [main] Initializing Spring embedded WebApplicationContext
2023-04-15 18:11:36,795 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 1192 ms
2023-04-15 18:11:36,944 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 18:11:36,991 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 18:11:37,246 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 18:11:37,258 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@21527b8
2023-04-15 18:11:37,258 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@21527b8
2023-04-15 18:11:37,258 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@21527b8
2023-04-15 18:11:37,258 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@7cc1f72c
2023-04-15 18:11:37,258 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@7cc1f72c
2023-04-15 18:11:37,258 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@7b7068d8
2023-04-15 18:11:37,259 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@7b7068d8
2023-04-15 18:11:37,259 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@1d8e9d3e
2023-04-15 18:11:37,259 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@1d8e9d3e
2023-04-15 18:11:37,259 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@360d41d0
2023-04-15 18:11:37,260 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@360d41d0
2023-04-15 18:11:37,260 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@360d41d0
2023-04-15 18:11:37,260 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@4586a8aa
2023-04-15 18:11:37,260 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@4586a8aa
2023-04-15 18:11:37,261 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@4586a8aa
2023-04-15 18:11:37,261 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@819fb19
2023-04-15 18:11:37,261 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@819fb19
2023-04-15 18:11:37,261 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@819fb19
2023-04-15 18:11:37,262 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@819fb19
2023-04-15 18:11:37,262 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@782ac148
2023-04-15 18:11:37,262 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:11:37,262 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:11:37,262 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:11:37,262 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:11:37,262 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:11:37,262 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:11:37,262 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:11:37,262 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:11:37,263 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:11:37,263 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:11:37,263 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:11:37,263 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:11:37,263 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:11:37,263 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:11:37,263 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:11:37,263 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:11:37,263 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@49cb5030
2023-04-15 18:11:37,263 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@49cb5030
2023-04-15 18:11:37,264 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@49cb5030
2023-04-15 18:11:37,264 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@23c7cb18
2023-04-15 18:11:37,264 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@23c7cb18
2023-04-15 18:11:37,264 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:11:37,264 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:11:37,264 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:11:37,264 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:11:37,264 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:11:37,264 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@3e2d44f3
2023-04-15 18:11:37,265 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@23afc725
2023-04-15 18:11:37,265 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@23afc725
2023-04-15 18:11:37,265 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 18:11:37,265 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:11:37,265 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:11:37,266 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:11:37,266 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:11:37,266 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:11:37,266 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:11:37,266 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:11:37,267 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:11:37,267 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:11:37,267 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:11:37,267 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:11:37,267 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:11:37,268 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:11:37,268 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:11:37,268 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:11:37,268 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@3eac2e8a
2023-04-15 18:11:37,268 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:11:37,268 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:11:37,269 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:11:37,269 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:11:37,269 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@4fd80300
2023-04-15 18:11:37,269 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@4fd80300
2023-04-15 18:11:37,270 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@1805383
2023-04-15 18:11:37,270 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@1805383
2023-04-15 18:11:37,270 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:11:37,270 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:11:37,270 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:11:37,270 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:11:37,270 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@63f2e0b
2023-04-15 18:11:37,270 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5a06904
2023-04-15 18:11:37,271 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@fabef2e
2023-04-15 18:11:37,271 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@fabef2e
2023-04-15 18:11:37,271 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@1b4a3a1
2023-04-15 18:11:37,271 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@1b4a3a1
2023-04-15 18:11:37,271 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7e848aea
2023-04-15 18:11:37,271 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@786a3477
2023-04-15 18:11:37,271 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@286866cb
2023-04-15 18:11:37,271 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@286866cb
2023-04-15 18:11:37,272 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@ce561cc
2023-04-15 18:11:37,272 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@ce561cc
2023-04-15 18:11:37,272 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:11:37,272 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:11:37,272 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:11:37,272 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:11:37,273 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:11:37,273 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:11:37,273 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@14b95942
2023-04-15 18:11:37,273 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@3375b118
2023-04-15 18:11:37,273 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@667797f
2023-04-15 18:11:37,274 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@667797f
2023-04-15 18:11:37,274 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@184751f3
2023-04-15 18:11:37,274 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@184751f3
2023-04-15 18:11:37,274 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@184751f3
2023-04-15 18:11:37,274 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@46ea78f0
2023-04-15 18:11:37,274 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@5889fc44
2023-04-15 18:11:37,275 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@6598caab
2023-04-15 18:11:37,275 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@6598caab
2023-04-15 18:11:37,275 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@47f2c722
2023-04-15 18:11:37,276 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@47f2c722
2023-04-15 18:11:37,276 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@47f2c722
2023-04-15 18:11:37,276 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:11:37,276 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:11:37,277 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:11:37,277 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:11:37,277 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@6658f08a
2023-04-15 18:11:37,277 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@6658f08a
2023-04-15 18:11:37,277 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@37c2f0b4
2023-04-15 18:11:37,277 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@37c2f0b4
2023-04-15 18:11:37,278 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@35dcd032
2023-04-15 18:11:37,278 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@35dcd032
2023-04-15 18:11:37,278 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@4522d793
2023-04-15 18:11:37,284 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@2aa6bbad
2023-04-15 18:11:37,285 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@2aa6bbad
2023-04-15 18:11:37,286 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@a9a8ec3
2023-04-15 18:11:37,287 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@a9a8ec3
2023-04-15 18:11:37,288 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@2f86f9cf
2023-04-15 18:11:37,288 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@adafe19
2023-04-15 18:11:37,288 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@7e2bd5e6
2023-04-15 18:11:37,288 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@76a1146d
2023-04-15 18:11:37,288 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@6ef1c3f7
2023-04-15 18:11:37,288 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@3386c206
2023-04-15 18:11:37,288 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@1322b575
2023-04-15 18:11:37,289 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@6dded900
2023-04-15 18:11:37,289 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@d504137
2023-04-15 18:11:37,324 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 18:11:37,621 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@592cb470
2023-04-15 18:11:37,624 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 18:11:37,645 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 18:11:37,646 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 18:11:37,674 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@42a05533) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@17053b5)
2023-04-15 18:11:37,675 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3cad24ae) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@58021c3c)
2023-04-15 18:11:37,675 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@18cbc3c2) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1b25d695)
2023-04-15 18:11:37,675 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4ef8090b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6d31f14)
2023-04-15 18:11:37,675 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@404009df) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@75e4fe3c)
2023-04-15 18:11:37,675 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7bda01da) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@65ef9a0a)
2023-04-15 18:11:37,675 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@25216999) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@77e6761f)
2023-04-15 18:11:37,675 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5c997de8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@45bf93bb)
2023-04-15 18:11:37,675 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6b7c4734) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2f6e92ca)
2023-04-15 18:11:37,676 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 18:11:37,677 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 18:11:37,678 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 18:11:37,679 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:11:37,680 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:11:37,682 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@261a66b8
2023-04-15 18:11:37,682 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@2f86f9cf`
2023-04-15 18:11:37,685 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:11:37,686 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:11:37,686 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:11:37,686 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:11:37,686 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:11:37,686 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:11:37,687 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@6475e778] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@75bf9e67]
2023-04-15 18:11:38,064 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@6475e778] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@1c2b65cc]
2023-04-15 18:11:38,508 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 18:11:38,516 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@1c2b65cc] for TypeConfiguration
2023-04-15 18:11:38,518 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:11:38,573 INFO org.springframework.batch.core.repository.support.JobRepositoryFactoryBean [main] No database type set, using meta data indicating: MYSQL
2023-04-15 18:11:38,588 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] No TaskExecutor has been set, defaulting to synchronous executor.
2023-04-15 18:11:38,639 WARN org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext [main] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'batchController': Unsatisfied dependency expressed through field 'importUserJob': Error creating bean with name 'importUserJob' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'importUserJob' parameter 3: Error creating bean with name 'step1' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'step1' parameter 1: Expression parsing failed
2023-04-15 18:11:38,639 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:11:38,639 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@1c2b65cc] for TypeConfiguration
2023-04-15 18:11:38,640 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@25dc2c0] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@1c2b65cc]
2023-04-15 18:11:38,642 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown initiated...
2023-04-15 18:11:38,652 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown completed.
2023-04-15 18:11:38,655 INFO org.apache.catalina.core.StandardService [main] Stopping service [Tomcat]
2023-04-15 18:11:38,665 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLogger [main] 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2023-04-15 18:11:38,680 ERROR org.springframework.boot.SpringApplication [main] Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'batchController': Unsatisfied dependency expressed through field 'importUserJob': Error creating bean with name 'importUserJob' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'importUserJob' parameter 3: Error creating bean with name 'step1' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'step1' parameter 1: Expression parsing failed
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:713)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:693)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:133)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:482)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1416)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:597)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:917)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:584)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:310)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1304)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1293)
	at com.yuripe.batchType0A.BatchType0AApplication.main(BatchType0AApplication.java:16)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'importUserJob' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'importUserJob' parameter 3: Error creating bean with name 'step1' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'step1' parameter 1: Expression parsing failed
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:548)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1417)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1337)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:710)
	... 20 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'step1' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'step1' parameter 1: Expression parsing failed
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:548)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1417)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1337)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:885)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	... 33 common frames omitted
Caused by: org.springframework.beans.factory.BeanExpressionException: Expression parsing failed
	at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:170)
	at org.springframework.beans.factory.support.AbstractBeanFactory.evaluateBeanDefinitionString(AbstractBeanFactory.java:1593)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1361)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1337)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:885)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	... 47 common frames omitted
Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1008E: Property or field 'jobParameters' cannot be found on object of type 'org.springframework.beans.factory.config.BeanExpressionContext' - maybe not public or not valid?
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:217)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:104)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:92)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:55)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:91)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:273)
	at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:167)
	... 52 common frames omitted
2023-04-15 18:14:34,422 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Starting BatchType0AApplication using Java 17.0.2 with PID 19968 (C:\Users\yurip\git\batch0A\batchType0A\target\classes started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 18:14:34,425 INFO com.yuripe.batchType0A.BatchType0AApplication [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 18:14:34,886 INFO org.springframework.batch.core.configuration.annotation.BatchRegistrar [main] Finished Spring Batch infrastructure beans configuration in 5 ms.
2023-04-15 18:14:35,224 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:14:35,226 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 18:14:35,242 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 12 ms. Found 0 JDBC repository interfaces.
2023-04-15 18:14:35,252 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:14:35,254 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 18:14:35,259 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 18:14:35,651 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8080 (http)
2023-04-15 18:14:35,659 INFO org.apache.coyote.http11.Http11NioProtocol [main] Initializing ProtocolHandler ["http-nio-8080"]
2023-04-15 18:14:35,660 INFO org.apache.catalina.core.StandardService [main] Starting service [Tomcat]
2023-04-15 18:14:35,660 INFO org.apache.catalina.core.StandardEngine [main] Starting Servlet engine: [Apache Tomcat/10.1.7]
2023-04-15 18:14:35,743 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [main] Initializing Spring embedded WebApplicationContext
2023-04-15 18:14:35,743 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 1275 ms
2023-04-15 18:14:35,879 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 18:14:35,940 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 18:14:36,175 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 18:14:36,187 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@2fee69a1
2023-04-15 18:14:36,188 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@2fee69a1
2023-04-15 18:14:36,188 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@2fee69a1
2023-04-15 18:14:36,188 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@4d25f816
2023-04-15 18:14:36,188 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@4d25f816
2023-04-15 18:14:36,188 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@6c6c2a73
2023-04-15 18:14:36,188 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@6c6c2a73
2023-04-15 18:14:36,188 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@6a4af081
2023-04-15 18:14:36,188 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@6a4af081
2023-04-15 18:14:36,188 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@36b53f08
2023-04-15 18:14:36,188 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@36b53f08
2023-04-15 18:14:36,188 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@36b53f08
2023-04-15 18:14:36,189 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@54329480
2023-04-15 18:14:36,189 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@54329480
2023-04-15 18:14:36,189 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@54329480
2023-04-15 18:14:36,189 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@7b211077
2023-04-15 18:14:36,190 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@7b211077
2023-04-15 18:14:36,190 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@7b211077
2023-04-15 18:14:36,190 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@7b211077
2023-04-15 18:14:36,190 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@3b770d07
2023-04-15 18:14:36,190 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@62b0bf85
2023-04-15 18:14:36,190 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@62b0bf85
2023-04-15 18:14:36,190 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@1fcaea93
2023-04-15 18:14:36,190 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@6c9bf3b5
2023-04-15 18:14:36,190 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@6f07d414
2023-04-15 18:14:36,190 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@6f07d414
2023-04-15 18:14:36,191 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@6f07d414
2023-04-15 18:14:36,191 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@8ac12e6
2023-04-15 18:14:36,191 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@8ac12e6
2023-04-15 18:14:36,191 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@8ac12e6
2023-04-15 18:14:36,191 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@40faff12
2023-04-15 18:14:36,191 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@40faff12
2023-04-15 18:14:36,191 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@40faff12
2023-04-15 18:14:36,192 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@734fbae3
2023-04-15 18:14:36,192 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@734fbae3
2023-04-15 18:14:36,192 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@734fbae3
2023-04-15 18:14:36,192 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@223967ea
2023-04-15 18:14:36,192 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@223967ea
2023-04-15 18:14:36,192 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@223967ea
2023-04-15 18:14:36,193 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@4a6a6a69
2023-04-15 18:14:36,193 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@4a6a6a69
2023-04-15 18:14:36,193 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@5d7f1e59
2023-04-15 18:14:36,193 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@5d7f1e59
2023-04-15 18:14:36,193 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@53e93fb7
2023-04-15 18:14:36,193 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@53e93fb7
2023-04-15 18:14:36,194 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@53e93fb7
2023-04-15 18:14:36,194 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@3a861417
2023-04-15 18:14:36,194 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@2326180c
2023-04-15 18:14:36,194 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@2326180c
2023-04-15 18:14:36,194 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@68e47e7
2023-04-15 18:14:36,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@1c00d406
2023-04-15 18:14:36,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@1c00d406
2023-04-15 18:14:36,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@1c00d406
2023-04-15 18:14:36,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@16ac4d3d
2023-04-15 18:14:36,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@16ac4d3d
2023-04-15 18:14:36,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@16ac4d3d
2023-04-15 18:14:36,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@559d19c
2023-04-15 18:14:36,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@719c1faf
2023-04-15 18:14:36,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@6ba6557e
2023-04-15 18:14:36,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@6ba6557e
2023-04-15 18:14:36,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@1f172892
2023-04-15 18:14:36,196 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@1f172892
2023-04-15 18:14:36,196 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@5409dfdd
2023-04-15 18:14:36,196 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@45f9d394
2023-04-15 18:14:36,196 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@1c2d63f0
2023-04-15 18:14:36,196 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@3a588b5f
2023-04-15 18:14:36,196 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@20b54cfe
2023-04-15 18:14:36,196 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@2bdb5e0f
2023-04-15 18:14:36,197 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@5c9e8a67
2023-04-15 18:14:36,197 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@5c9e8a67
2023-04-15 18:14:36,197 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@2262f0d8
2023-04-15 18:14:36,197 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@2262f0d8
2023-04-15 18:14:36,197 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@283a8ad6
2023-04-15 18:14:36,198 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@283a8ad6
2023-04-15 18:14:36,198 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@59e082f8
2023-04-15 18:14:36,198 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@59e082f8
2023-04-15 18:14:36,198 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@7185e611
2023-04-15 18:14:36,198 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@7185e611
2023-04-15 18:14:36,198 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@44d43cc9
2023-04-15 18:14:36,199 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@384472bf
2023-04-15 18:14:36,199 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@656ec00d
2023-04-15 18:14:36,199 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@656ec00d
2023-04-15 18:14:36,199 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@3b8507df
2023-04-15 18:14:36,199 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@3b8507df
2023-04-15 18:14:36,199 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5ed25612
2023-04-15 18:14:36,199 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@451816fd
2023-04-15 18:14:36,199 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@56e5c8fb
2023-04-15 18:14:36,199 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@56e5c8fb
2023-04-15 18:14:36,199 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@45cd8607
2023-04-15 18:14:36,200 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@45cd8607
2023-04-15 18:14:36,200 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@9e33a6a
2023-04-15 18:14:36,200 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@9e33a6a
2023-04-15 18:14:36,200 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@9e33a6a
2023-04-15 18:14:36,200 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@c497a55
2023-04-15 18:14:36,200 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@c497a55
2023-04-15 18:14:36,200 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@c497a55
2023-04-15 18:14:36,200 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7493d937
2023-04-15 18:14:36,200 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@5dc7841c
2023-04-15 18:14:36,200 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@4d67d5a4
2023-04-15 18:14:36,201 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@4d67d5a4
2023-04-15 18:14:36,201 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@a3b858f
2023-04-15 18:14:36,201 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@a3b858f
2023-04-15 18:14:36,201 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@a3b858f
2023-04-15 18:14:36,202 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@600bbf9e
2023-04-15 18:14:36,202 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@18d30e7
2023-04-15 18:14:36,203 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@72b40f87
2023-04-15 18:14:36,203 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@72b40f87
2023-04-15 18:14:36,203 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@2475fba3
2023-04-15 18:14:36,203 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@2475fba3
2023-04-15 18:14:36,203 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@2475fba3
2023-04-15 18:14:36,205 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@19bf47fc
2023-04-15 18:14:36,205 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@19bf47fc
2023-04-15 18:14:36,205 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@71dd4624
2023-04-15 18:14:36,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@71dd4624
2023-04-15 18:14:36,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@2347b7af
2023-04-15 18:14:36,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@2347b7af
2023-04-15 18:14:36,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@2864f887
2023-04-15 18:14:36,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@2864f887
2023-04-15 18:14:36,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@4b07cad0
2023-04-15 18:14:36,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@4b07cad0
2023-04-15 18:14:36,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@507049f2
2023-04-15 18:14:36,212 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@4fd80300
2023-04-15 18:14:36,212 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@4fd80300
2023-04-15 18:14:36,214 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@46ea78f0
2023-04-15 18:14:36,214 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@46ea78f0
2023-04-15 18:14:36,215 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@4438b862
2023-04-15 18:14:36,215 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@17b6ad97
2023-04-15 18:14:36,215 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@44fb6ebd
2023-04-15 18:14:36,215 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@5da57a64
2023-04-15 18:14:36,215 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@5cdf221a
2023-04-15 18:14:36,215 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@7e27f603
2023-04-15 18:14:36,215 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@6136e1fc
2023-04-15 18:14:36,215 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@1736c1e4
2023-04-15 18:14:36,215 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@32dcfeea
2023-04-15 18:14:36,242 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 18:14:36,542 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1f60824e
2023-04-15 18:14:36,545 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 18:14:36,570 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 18:14:36,575 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 18:14:36,613 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7a62d697) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@edbc2bf)
2023-04-15 18:14:36,613 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3e01796a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@62ab5e63)
2023-04-15 18:14:36,613 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@e91facf) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5e8f0f98)
2023-04-15 18:14:36,614 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6bf0f70a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5310e451)
2023-04-15 18:14:36,614 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@52d63b7e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@74830d73)
2023-04-15 18:14:36,614 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1827fc4e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4c41a177)
2023-04-15 18:14:36,614 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2faf6e4a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@43ab0659)
2023-04-15 18:14:36,614 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@644947ee) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@25421809)
2023-04-15 18:14:36,614 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@714bffd5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6ac9b66b)
2023-04-15 18:14:36,615 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 18:14:36,616 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 18:14:36,616 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 18:14:36,621 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:14:36,621 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:14:36,623 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@32328dc4
2023-04-15 18:14:36,623 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@4438b862`
2023-04-15 18:14:36,627 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:14:36,628 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:14:36,628 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:14:36,628 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:14:36,628 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:14:36,628 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:14:36,630 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@65ef9a0a] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@25216999]
2023-04-15 18:14:37,017 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@65ef9a0a] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@128a188a]
2023-04-15 18:14:37,486 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 18:14:37,496 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@128a188a] for TypeConfiguration
2023-04-15 18:14:37,498 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:14:37,547 INFO org.springframework.batch.core.repository.support.JobRepositoryFactoryBean [main] No database type set, using meta data indicating: MYSQL
2023-04-15 18:14:37,570 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] No TaskExecutor has been set, defaulting to synchronous executor.
2023-04-15 18:14:37,600 WARN org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext [main] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'batchController': Unsatisfied dependency expressed through field 'importUserJob': Error creating bean with name 'importUserJob' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'importUserJob' parameter 3: Error creating bean with name 'step1' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Unsatisfied dependency expressed through method 'step1' parameter 1: No qualifying bean of type 'com.yuripe.batchType0A.Listener.StepListener' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
2023-04-15 18:14:37,600 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:14:37,601 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@128a188a] for TypeConfiguration
2023-04-15 18:14:37,601 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@54780c40] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@128a188a]
2023-04-15 18:14:37,604 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown initiated...
2023-04-15 18:14:37,616 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown completed.
2023-04-15 18:14:37,617 INFO org.apache.catalina.core.StandardService [main] Stopping service [Tomcat]
2023-04-15 18:14:37,631 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLogger [main] 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2023-04-15 18:14:37,650 ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter [main] 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 1 of method step1 in com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration required a bean of type 'com.yuripe.batchType0A.Listener.StepListener' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'com.yuripe.batchType0A.Listener.StepListener' in your configuration.

2023-04-15 18:15:31,506 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Starting BatchType0AApplication using Java 17.0.2 with PID 12448 (C:\Users\yurip\git\batch0A\batchType0A\target\classes started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 18:15:31,508 INFO com.yuripe.batchType0A.BatchType0AApplication [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 18:15:31,917 INFO org.springframework.batch.core.configuration.annotation.BatchRegistrar [main] Finished Spring Batch infrastructure beans configuration in 3 ms.
2023-04-15 18:15:32,257 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:15:32,259 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 18:15:32,278 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 14 ms. Found 0 JDBC repository interfaces.
2023-04-15 18:15:32,287 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:15:32,288 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 18:15:32,293 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 1 ms. Found 0 JPA repository interfaces.
2023-04-15 18:15:32,688 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8080 (http)
2023-04-15 18:15:32,697 INFO org.apache.coyote.http11.Http11NioProtocol [main] Initializing ProtocolHandler ["http-nio-8080"]
2023-04-15 18:15:32,697 INFO org.apache.catalina.core.StandardService [main] Starting service [Tomcat]
2023-04-15 18:15:32,698 INFO org.apache.catalina.core.StandardEngine [main] Starting Servlet engine: [Apache Tomcat/10.1.7]
2023-04-15 18:15:32,781 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [main] Initializing Spring embedded WebApplicationContext
2023-04-15 18:15:32,781 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 1232 ms
2023-04-15 18:15:32,910 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 18:15:32,968 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 18:15:33,189 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 18:15:33,204 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:15:33,204 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:15:33,204 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:15:33,204 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:15:33,205 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:15:33,205 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:15:33,205 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:15:33,205 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:15:33,205 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:15:33,205 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:15:33,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:15:33,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:15:33,206 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:15:33,207 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:15:33,207 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:15:33,207 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@23c7cb18
2023-04-15 18:15:33,207 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@23c7cb18
2023-04-15 18:15:33,207 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@23c7cb18
2023-04-15 18:15:33,207 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@23c7cb18
2023-04-15 18:15:33,208 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:15:33,208 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:15:33,208 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:15:33,208 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@3e2d44f3
2023-04-15 18:15:33,208 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@23afc725
2023-04-15 18:15:33,208 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 18:15:33,208 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 18:15:33,208 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 18:15:33,209 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:15:33,209 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:15:33,209 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:15:33,209 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:15:33,209 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:15:33,209 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:15:33,209 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:15:33,209 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:15:33,209 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:15:33,210 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:15:33,210 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:15:33,210 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:15:33,210 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:15:33,210 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:15:33,210 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:15:33,211 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:15:33,211 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:15:33,211 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:15:33,211 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:15:33,211 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:15:33,211 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:15:33,212 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:15:33,212 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@3eac2e8a
2023-04-15 18:15:33,212 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:15:33,212 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:15:33,212 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:15:33,212 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:15:33,213 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:15:33,213 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:15:33,213 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:15:33,213 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@4fd80300
2023-04-15 18:15:33,213 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@1805383
2023-04-15 18:15:33,213 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@1805383
2023-04-15 18:15:33,213 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:15:33,213 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:15:33,213 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:15:33,214 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@63f2e0b
2023-04-15 18:15:33,214 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@5a06904
2023-04-15 18:15:33,214 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@fabef2e
2023-04-15 18:15:33,214 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@1b4a3a1
2023-04-15 18:15:33,214 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@7e848aea
2023-04-15 18:15:33,214 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@786a3477
2023-04-15 18:15:33,214 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@786a3477
2023-04-15 18:15:33,214 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@286866cb
2023-04-15 18:15:33,215 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@286866cb
2023-04-15 18:15:33,215 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@ce561cc
2023-04-15 18:15:33,215 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@ce561cc
2023-04-15 18:15:33,215 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:15:33,215 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:15:33,215 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:15:33,215 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:15:33,215 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@14b95942
2023-04-15 18:15:33,216 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@3375b118
2023-04-15 18:15:33,216 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@667797f
2023-04-15 18:15:33,217 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@667797f
2023-04-15 18:15:33,217 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@184751f3
2023-04-15 18:15:33,217 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@184751f3
2023-04-15 18:15:33,217 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@46ea78f0
2023-04-15 18:15:33,217 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5889fc44
2023-04-15 18:15:33,217 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@6598caab
2023-04-15 18:15:33,218 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@6598caab
2023-04-15 18:15:33,218 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@47f2c722
2023-04-15 18:15:33,218 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@47f2c722
2023-04-15 18:15:33,218 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:15:33,218 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:15:33,219 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:15:33,219 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:15:33,219 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:15:33,219 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:15:33,219 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@6658f08a
2023-04-15 18:15:33,220 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@37c2f0b4
2023-04-15 18:15:33,220 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@35dcd032
2023-04-15 18:15:33,220 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@35dcd032
2023-04-15 18:15:33,221 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@4522d793
2023-04-15 18:15:33,221 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@4522d793
2023-04-15 18:15:33,221 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@4522d793
2023-04-15 18:15:33,221 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@64dfb31d
2023-04-15 18:15:33,222 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@4438b862
2023-04-15 18:15:33,222 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@17b6ad97
2023-04-15 18:15:33,223 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@17b6ad97
2023-04-15 18:15:33,223 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@44fb6ebd
2023-04-15 18:15:33,223 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@44fb6ebd
2023-04-15 18:15:33,223 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@44fb6ebd
2023-04-15 18:15:33,223 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@5da57a64
2023-04-15 18:15:33,224 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@5da57a64
2023-04-15 18:15:33,224 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@5cdf221a
2023-04-15 18:15:33,224 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@5cdf221a
2023-04-15 18:15:33,225 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@7e27f603
2023-04-15 18:15:33,225 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@7e27f603
2023-04-15 18:15:33,225 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@6136e1fc
2023-04-15 18:15:33,225 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@6136e1fc
2023-04-15 18:15:33,225 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@1736c1e4
2023-04-15 18:15:33,225 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@1736c1e4
2023-04-15 18:15:33,225 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@32dcfeea
2023-04-15 18:15:33,233 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@605c7a9e
2023-04-15 18:15:33,233 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@605c7a9e
2023-04-15 18:15:33,235 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@3ee6dc82
2023-04-15 18:15:33,235 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@3ee6dc82
2023-04-15 18:15:33,236 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@e4ca109
2023-04-15 18:15:33,236 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@15c16f19
2023-04-15 18:15:33,236 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@1a17dd6f
2023-04-15 18:15:33,236 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@be6d228
2023-04-15 18:15:33,236 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@60c96eb4
2023-04-15 18:15:33,237 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@7eee6c13
2023-04-15 18:15:33,237 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@5ab63a04
2023-04-15 18:15:33,237 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@677cc4e8
2023-04-15 18:15:33,237 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@4c6bba7d
2023-04-15 18:15:33,264 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 18:15:33,636 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@299a43d9
2023-04-15 18:15:33,639 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 18:15:33,668 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 18:15:33,670 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 18:15:33,712 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@65ef9a0a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@25216999)
2023-04-15 18:15:33,712 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@77e6761f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5c997de8)
2023-04-15 18:15:33,712 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@45bf93bb) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6b7c4734)
2023-04-15 18:15:33,712 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2f6e92ca) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@380fdcf2)
2023-04-15 18:15:33,712 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@114b203) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@8d810f2)
2023-04-15 18:15:33,712 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@537b3be1) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@15d58530)
2023-04-15 18:15:33,713 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@31f5b923) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@79e2606f)
2023-04-15 18:15:33,713 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@734cf881) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4a890fdd)
2023-04-15 18:15:33,713 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@56299b0e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3ca278bc)
2023-04-15 18:15:33,714 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 18:15:33,714 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 18:15:33,714 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 18:15:33,716 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:15:33,716 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:15:33,718 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@1b28cff
2023-04-15 18:15:33,718 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@e4ca109`
2023-04-15 18:15:33,721 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:15:33,721 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:15:33,722 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:15:33,722 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:15:33,722 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:15:33,722 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:15:33,723 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@76e00bdb] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@7ee2423]
2023-04-15 18:15:34,096 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@76e00bdb] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@2bf4fa1]
2023-04-15 18:15:34,536 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 18:15:34,546 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@2bf4fa1] for TypeConfiguration
2023-04-15 18:15:34,548 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:15:34,610 INFO org.springframework.batch.core.repository.support.JobRepositoryFactoryBean [main] No database type set, using meta data indicating: MYSQL
2023-04-15 18:15:34,625 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] No TaskExecutor has been set, defaulting to synchronous executor.
2023-04-15 18:15:43,760 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:15:46,582 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:15:53,309 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 18:15:56,734 INFO org.apache.coyote.http11.Http11NioProtocol [main] Starting ProtocolHandler ["http-nio-8080"]
2023-04-15 18:15:56,808 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat started on port(s): 8080 (http) with context path ''
2023-04-15 18:15:56,919 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Started BatchType0AApplication in 25.776 seconds (process running for 26.949)
2023-04-15 18:16:03,648 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [http-nio-8080-exec-2] Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-04-15 18:16:03,649 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-2] Initializing Servlet 'dispatcherServlet'
2023-04-15 18:16:03,675 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-2] Completed initialization in 24 ms
2023-04-15 18:16:23,022 ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] [http-nio-8080-exec-2] Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.DataIntegrityViolationException: PreparedStatementCallback; SQL [INSERT into BATCH_JOB_EXECUTION_PARAMS(JOB_EXECUTION_ID, PARAMETER_NAME, PARAMETER_TYPE, PARAMETER_VALUE, IDENTIFYING) values (?, ?, ?, ?, ?)]; Column 'PARAMETER_NAME' cannot be null] with root cause
java.sql.SQLIntegrityConstraintViolationException: Column 'PARAMETER_NAME' cannot be null
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:795)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchInternal(ClientPreparedStatement.java:418)
	at com.mysql.cj.jdbc.StatementImpl.executeBatch(StatementImpl.java:795)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$5(JdbcTemplate.java:1141)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:651)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:691)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1125)
	at org.springframework.batch.core.repository.dao.JdbcJobExecutionDao.insertJobParameters(JdbcJobExecutionDao.java:385)
	at org.springframework.batch.core.repository.dao.JdbcJobExecutionDao.saveJobExecution(JdbcJobExecutionDao.java:206)
	at org.springframework.batch.core.repository.support.SimpleJobRepository.createJobExecution(SimpleJobRepository.java:178)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:391)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.batch.core.repository.support.AbstractJobRepositoryFactoryBean$1.invoke(AbstractJobRepositoryFactoryBean.java:207)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:218)
	at jdk.proxy2/jdk.proxy2.$Proxy102.createJobExecution(Unknown Source)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:145)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at com.yuripe.batchType0A.Controller.BatchController.importFileAndRun(BatchController.java:50)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:563)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-04-15 18:16:36,616 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Starting BatchType0AApplication using Java 17.0.2 with PID 1504 (C:\Users\yurip\git\batch0A\batchType0A\target\classes started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 18:16:36,620 INFO com.yuripe.batchType0A.BatchType0AApplication [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 18:16:37,135 INFO org.springframework.batch.core.configuration.annotation.BatchRegistrar [main] Finished Spring Batch infrastructure beans configuration in 4 ms.
2023-04-15 18:16:37,444 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:16:37,445 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 18:16:37,463 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 13 ms. Found 0 JDBC repository interfaces.
2023-04-15 18:16:37,471 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:16:37,472 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 18:16:37,477 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 1 ms. Found 0 JPA repository interfaces.
2023-04-15 18:16:37,842 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8080 (http)
2023-04-15 18:16:37,851 INFO org.apache.coyote.http11.Http11NioProtocol [main] Initializing ProtocolHandler ["http-nio-8080"]
2023-04-15 18:16:37,851 INFO org.apache.catalina.core.StandardService [main] Starting service [Tomcat]
2023-04-15 18:16:37,852 INFO org.apache.catalina.core.StandardEngine [main] Starting Servlet engine: [Apache Tomcat/10.1.7]
2023-04-15 18:16:37,948 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [main] Initializing Spring embedded WebApplicationContext
2023-04-15 18:16:37,949 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 1273 ms
2023-04-15 18:16:38,092 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 18:16:38,141 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 18:16:38,359 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 18:16:38,371 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@7b7068d8
2023-04-15 18:16:38,372 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@7b7068d8
2023-04-15 18:16:38,372 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@7b7068d8
2023-04-15 18:16:38,372 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@1d8e9d3e
2023-04-15 18:16:38,372 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@1d8e9d3e
2023-04-15 18:16:38,372 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@360d41d0
2023-04-15 18:16:38,372 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@360d41d0
2023-04-15 18:16:38,373 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@4586a8aa
2023-04-15 18:16:38,373 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@4586a8aa
2023-04-15 18:16:38,373 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@3dc82e6a
2023-04-15 18:16:38,373 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@3dc82e6a
2023-04-15 18:16:38,373 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@3dc82e6a
2023-04-15 18:16:38,374 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@54463380
2023-04-15 18:16:38,374 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@54463380
2023-04-15 18:16:38,374 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@54463380
2023-04-15 18:16:38,374 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:16:38,374 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:16:38,374 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:16:38,374 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:16:38,375 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:16:38,375 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:16:38,375 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:16:38,375 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:16:38,375 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:16:38,376 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:16:38,376 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:16:38,376 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:16:38,376 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:16:38,376 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:16:38,376 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:16:38,376 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@49cb5030
2023-04-15 18:16:38,376 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@49cb5030
2023-04-15 18:16:38,377 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@49cb5030
2023-04-15 18:16:38,377 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@23c7cb18
2023-04-15 18:16:38,377 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@23c7cb18
2023-04-15 18:16:38,377 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@23c7cb18
2023-04-15 18:16:38,378 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:16:38,378 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:16:38,378 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:16:38,378 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:16:38,378 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:16:38,378 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@3e2d44f3
2023-04-15 18:16:38,378 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@3e2d44f3
2023-04-15 18:16:38,379 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@23afc725
2023-04-15 18:16:38,379 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@23afc725
2023-04-15 18:16:38,379 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@23afc725
2023-04-15 18:16:38,379 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 18:16:38,379 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:16:38,380 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:16:38,380 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:16:38,380 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:16:38,380 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:16:38,380 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:16:38,380 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:16:38,380 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:16:38,380 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:16:38,380 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:16:38,381 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:16:38,381 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:16:38,381 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:16:38,381 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:16:38,381 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:16:38,381 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:16:38,381 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@3eac2e8a
2023-04-15 18:16:38,382 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:16:38,382 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:16:38,382 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:16:38,382 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@4fd80300
2023-04-15 18:16:38,383 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@1805383
2023-04-15 18:16:38,383 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@1805383
2023-04-15 18:16:38,383 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:16:38,383 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:16:38,384 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:16:38,384 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:16:38,384 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@63f2e0b
2023-04-15 18:16:38,384 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@63f2e0b
2023-04-15 18:16:38,384 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@5a06904
2023-04-15 18:16:38,385 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@5a06904
2023-04-15 18:16:38,385 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@fabef2e
2023-04-15 18:16:38,385 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@1b4a3a1
2023-04-15 18:16:38,385 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@7e848aea
2023-04-15 18:16:38,385 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@7e848aea
2023-04-15 18:16:38,385 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@786a3477
2023-04-15 18:16:38,386 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@786a3477
2023-04-15 18:16:38,386 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@286866cb
2023-04-15 18:16:38,386 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@ce561cc
2023-04-15 18:16:38,386 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:16:38,386 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:16:38,386 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:16:38,386 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:16:38,386 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@14b95942
2023-04-15 18:16:38,386 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@14b95942
2023-04-15 18:16:38,386 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@14b95942
2023-04-15 18:16:38,386 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@3375b118
2023-04-15 18:16:38,387 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@3375b118
2023-04-15 18:16:38,387 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@3375b118
2023-04-15 18:16:38,387 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@667797f
2023-04-15 18:16:38,387 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@184751f3
2023-04-15 18:16:38,387 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@46ea78f0
2023-04-15 18:16:38,387 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@46ea78f0
2023-04-15 18:16:38,387 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@5889fc44
2023-04-15 18:16:38,387 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@5889fc44
2023-04-15 18:16:38,388 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@5889fc44
2023-04-15 18:16:38,388 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@6598caab
2023-04-15 18:16:38,388 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@47f2c722
2023-04-15 18:16:38,388 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:16:38,388 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:16:38,389 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:16:38,389 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:16:38,389 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:16:38,389 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@6658f08a
2023-04-15 18:16:38,389 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@6658f08a
2023-04-15 18:16:38,390 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@37c2f0b4
2023-04-15 18:16:38,391 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@37c2f0b4
2023-04-15 18:16:38,391 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@35dcd032
2023-04-15 18:16:38,391 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@35dcd032
2023-04-15 18:16:38,391 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@4522d793
2023-04-15 18:16:38,391 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@4522d793
2023-04-15 18:16:38,391 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@64dfb31d
2023-04-15 18:16:38,392 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@64dfb31d
2023-04-15 18:16:38,392 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@4438b862
2023-04-15 18:16:38,399 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@6f867b0c
2023-04-15 18:16:38,399 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@6f867b0c
2023-04-15 18:16:38,401 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@40016ce1
2023-04-15 18:16:38,401 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@40016ce1
2023-04-15 18:16:38,402 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@7e2bd5e6
2023-04-15 18:16:38,402 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@76a1146d
2023-04-15 18:16:38,402 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@6ef1c3f7
2023-04-15 18:16:38,402 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@3386c206
2023-04-15 18:16:38,402 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@1322b575
2023-04-15 18:16:38,402 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@6dded900
2023-04-15 18:16:38,403 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@d504137
2023-04-15 18:16:38,403 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@8432469
2023-04-15 18:16:38,403 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@e4ca109
2023-04-15 18:16:38,433 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 18:16:38,739 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6921cfa
2023-04-15 18:16:38,741 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 18:16:38,759 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 18:16:38,760 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 18:16:38,782 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@58021c3c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@18cbc3c2)
2023-04-15 18:16:38,782 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1b25d695) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4ef8090b)
2023-04-15 18:16:38,782 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6d31f14) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@404009df)
2023-04-15 18:16:38,782 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@75e4fe3c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7bda01da)
2023-04-15 18:16:38,782 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@65ef9a0a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@25216999)
2023-04-15 18:16:38,782 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@77e6761f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5c997de8)
2023-04-15 18:16:38,782 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@45bf93bb) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6b7c4734)
2023-04-15 18:16:38,782 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2f6e92ca) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@380fdcf2)
2023-04-15 18:16:38,782 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@114b203) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@8d810f2)
2023-04-15 18:16:38,783 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 18:16:38,783 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 18:16:38,784 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 18:16:38,785 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:16:38,785 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:16:38,787 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@dde6f87
2023-04-15 18:16:38,787 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@7e2bd5e6`
2023-04-15 18:16:38,791 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:16:38,791 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:16:38,791 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:16:38,791 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:16:38,792 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:16:38,792 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:16:38,793 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@772f3a3f] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@3caa4d85]
2023-04-15 18:16:39,138 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@772f3a3f] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@7d49a1a0]
2023-04-15 18:16:39,682 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 18:16:39,691 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@7d49a1a0] for TypeConfiguration
2023-04-15 18:16:39,694 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:16:39,752 INFO org.springframework.batch.core.repository.support.JobRepositoryFactoryBean [main] No database type set, using meta data indicating: MYSQL
2023-04-15 18:16:39,767 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] No TaskExecutor has been set, defaulting to synchronous executor.
2023-04-15 18:16:42,713 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:16:42,727 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:16:42,778 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 18:16:43,168 INFO org.apache.coyote.http11.Http11NioProtocol [main] Starting ProtocolHandler ["http-nio-8080"]
2023-04-15 18:16:43,195 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat started on port(s): 8080 (http) with context path ''
2023-04-15 18:16:43,205 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Started BatchType0AApplication in 6.947 seconds (process running for 8.06)
2023-04-15 18:16:47,110 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [http-nio-8080-exec-1] Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-04-15 18:16:47,113 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-1] Initializing Servlet 'dispatcherServlet'
2023-04-15 18:16:47,138 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-1] Completed initialization in 24 ms
2023-04-15 18:16:49,521 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [http-nio-8080-exec-1] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'resources':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}]
2023-04-15 18:16:57,035 INFO org.springframework.batch.core.job.SimpleStepHandler [http-nio-8080-exec-1] Executing step: [step1]
2023-04-15 18:23:19,247 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Starting BatchType0AApplication using Java 17.0.2 with PID 6464 (C:\Users\yurip\git\batch0A\batchType0A\target\classes started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 18:23:19,249 INFO com.yuripe.batchType0A.BatchType0AApplication [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 18:23:19,721 INFO org.springframework.batch.core.configuration.annotation.BatchRegistrar [main] Finished Spring Batch infrastructure beans configuration in 5 ms.
2023-04-15 18:23:20,091 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:23:20,092 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 18:23:20,115 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 19 ms. Found 0 JDBC repository interfaces.
2023-04-15 18:23:20,127 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:23:20,129 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 18:23:20,133 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 1 ms. Found 0 JPA repository interfaces.
2023-04-15 18:23:20,525 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8080 (http)
2023-04-15 18:23:20,535 INFO org.apache.coyote.http11.Http11NioProtocol [main] Initializing ProtocolHandler ["http-nio-8080"]
2023-04-15 18:23:20,535 INFO org.apache.catalina.core.StandardService [main] Starting service [Tomcat]
2023-04-15 18:23:20,535 INFO org.apache.catalina.core.StandardEngine [main] Starting Servlet engine: [Apache Tomcat/10.1.7]
2023-04-15 18:23:20,625 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [main] Initializing Spring embedded WebApplicationContext
2023-04-15 18:23:20,625 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 1323 ms
2023-04-15 18:23:20,762 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 18:23:20,810 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 18:23:21,030 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 18:23:21,041 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:23:21,041 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:23:21,042 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:23:21,042 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:23:21,042 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:23:21,042 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:23:21,042 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:23:21,042 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:23:21,042 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:23:21,043 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:23:21,043 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:23:21,043 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:23:21,044 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:23:21,044 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:23:21,044 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:23:21,045 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@23c7cb18
2023-04-15 18:23:21,045 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@23c7cb18
2023-04-15 18:23:21,045 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@23c7cb18
2023-04-15 18:23:21,045 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@23c7cb18
2023-04-15 18:23:21,045 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:23:21,045 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:23:21,046 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:23:21,046 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@3e2d44f3
2023-04-15 18:23:21,046 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@23afc725
2023-04-15 18:23:21,046 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 18:23:21,046 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 18:23:21,046 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 18:23:21,046 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:23:21,046 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:23:21,046 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:23:21,047 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:23:21,047 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:23:21,047 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:23:21,047 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:23:21,047 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:23:21,047 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:23:21,047 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:23:21,048 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:23:21,048 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:23:21,048 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:23:21,048 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:23:21,048 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:23:21,048 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:23:21,048 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:23:21,048 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:23:21,049 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:23:21,049 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:23:21,049 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:23:21,049 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:23:21,049 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@3eac2e8a
2023-04-15 18:23:21,049 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:23:21,049 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:23:21,050 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:23:21,050 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:23:21,050 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:23:21,050 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:23:21,050 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:23:21,050 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@4fd80300
2023-04-15 18:23:21,050 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@1805383
2023-04-15 18:23:21,050 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@1805383
2023-04-15 18:23:21,051 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:23:21,051 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:23:21,051 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:23:21,051 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@63f2e0b
2023-04-15 18:23:21,051 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@5a06904
2023-04-15 18:23:21,051 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@fabef2e
2023-04-15 18:23:21,051 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@1b4a3a1
2023-04-15 18:23:21,051 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@7e848aea
2023-04-15 18:23:21,052 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@786a3477
2023-04-15 18:23:21,052 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@786a3477
2023-04-15 18:23:21,052 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@286866cb
2023-04-15 18:23:21,052 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@286866cb
2023-04-15 18:23:21,053 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@ce561cc
2023-04-15 18:23:21,053 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@ce561cc
2023-04-15 18:23:21,053 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:23:21,053 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:23:21,053 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:23:21,053 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:23:21,053 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@14b95942
2023-04-15 18:23:21,054 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@3375b118
2023-04-15 18:23:21,054 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@667797f
2023-04-15 18:23:21,054 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@667797f
2023-04-15 18:23:21,055 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@184751f3
2023-04-15 18:23:21,055 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@184751f3
2023-04-15 18:23:21,055 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@46ea78f0
2023-04-15 18:23:21,055 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5889fc44
2023-04-15 18:23:21,055 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@6598caab
2023-04-15 18:23:21,056 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@6598caab
2023-04-15 18:23:21,056 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@47f2c722
2023-04-15 18:23:21,056 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@47f2c722
2023-04-15 18:23:21,056 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:23:21,057 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:23:21,057 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:23:21,057 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:23:21,057 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:23:21,057 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:23:21,057 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@6658f08a
2023-04-15 18:23:21,057 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@37c2f0b4
2023-04-15 18:23:21,057 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@35dcd032
2023-04-15 18:23:21,057 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@35dcd032
2023-04-15 18:23:21,058 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@4522d793
2023-04-15 18:23:21,058 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@4522d793
2023-04-15 18:23:21,058 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@4522d793
2023-04-15 18:23:21,058 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@64dfb31d
2023-04-15 18:23:21,058 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@4438b862
2023-04-15 18:23:21,059 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@17b6ad97
2023-04-15 18:23:21,059 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@17b6ad97
2023-04-15 18:23:21,059 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@44fb6ebd
2023-04-15 18:23:21,059 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@44fb6ebd
2023-04-15 18:23:21,059 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@44fb6ebd
2023-04-15 18:23:21,059 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@5da57a64
2023-04-15 18:23:21,059 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@5da57a64
2023-04-15 18:23:21,059 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@5cdf221a
2023-04-15 18:23:21,059 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@5cdf221a
2023-04-15 18:23:21,059 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@7e27f603
2023-04-15 18:23:21,059 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@7e27f603
2023-04-15 18:23:21,060 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@6136e1fc
2023-04-15 18:23:21,060 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@6136e1fc
2023-04-15 18:23:21,060 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@1736c1e4
2023-04-15 18:23:21,060 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@1736c1e4
2023-04-15 18:23:21,060 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@32dcfeea
2023-04-15 18:23:21,067 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@605c7a9e
2023-04-15 18:23:21,067 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@605c7a9e
2023-04-15 18:23:21,070 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@3ee6dc82
2023-04-15 18:23:21,070 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@3ee6dc82
2023-04-15 18:23:21,071 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@e4ca109
2023-04-15 18:23:21,071 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@15c16f19
2023-04-15 18:23:21,071 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@1a17dd6f
2023-04-15 18:23:21,072 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@be6d228
2023-04-15 18:23:21,072 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@60c96eb4
2023-04-15 18:23:21,072 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@7eee6c13
2023-04-15 18:23:21,072 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@5ab63a04
2023-04-15 18:23:21,072 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@677cc4e8
2023-04-15 18:23:21,072 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@4c6bba7d
2023-04-15 18:23:21,102 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 18:23:21,444 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@299a43d9
2023-04-15 18:23:21,447 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 18:23:21,469 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 18:23:21,471 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 18:23:21,494 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@65ef9a0a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@25216999)
2023-04-15 18:23:21,494 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@77e6761f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5c997de8)
2023-04-15 18:23:21,495 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@45bf93bb) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6b7c4734)
2023-04-15 18:23:21,495 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2f6e92ca) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@380fdcf2)
2023-04-15 18:23:21,495 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@114b203) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@8d810f2)
2023-04-15 18:23:21,495 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@537b3be1) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@15d58530)
2023-04-15 18:23:21,495 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@31f5b923) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@79e2606f)
2023-04-15 18:23:21,495 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@734cf881) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4a890fdd)
2023-04-15 18:23:21,495 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@56299b0e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3ca278bc)
2023-04-15 18:23:21,496 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 18:23:21,496 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 18:23:21,496 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 18:23:21,498 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:23:21,498 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:23:21,500 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@1b28cff
2023-04-15 18:23:21,500 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@e4ca109`
2023-04-15 18:23:21,503 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:23:21,503 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:23:21,503 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:23:21,503 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:23:21,503 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:23:21,503 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:23:21,504 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@76e00bdb] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@7ee2423]
2023-04-15 18:23:21,836 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@76e00bdb] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@2bf4fa1]
2023-04-15 18:23:22,290 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 18:23:22,298 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@2bf4fa1] for TypeConfiguration
2023-04-15 18:23:22,300 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:23:22,357 INFO org.springframework.batch.core.repository.support.JobRepositoryFactoryBean [main] No database type set, using meta data indicating: MYSQL
2023-04-15 18:23:22,375 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] No TaskExecutor has been set, defaulting to synchronous executor.
2023-04-15 18:23:22,419 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:23:22,430 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:23:22,467 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 18:23:22,833 INFO org.apache.coyote.http11.Http11NioProtocol [main] Starting ProtocolHandler ["http-nio-8080"]
2023-04-15 18:23:22,854 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat started on port(s): 8080 (http) with context path ''
2023-04-15 18:23:22,862 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Started BatchType0AApplication in 4.034 seconds (process running for 5.074)
2023-04-15 18:23:28,110 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [http-nio-8080-exec-3] Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-04-15 18:23:28,110 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-3] Initializing Servlet 'dispatcherServlet'
2023-04-15 18:23:28,111 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-3] Completed initialization in 1 ms
2023-04-15 18:23:28,260 ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] [http-nio-8080-exec-3] Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.batch.core.repository.JobExecutionAlreadyRunningException: A job execution for this job is already running: JobExecution: id=32, version=1, startTime=2023-04-15T18:16:49.568353, endTime=null, lastUpdated=2023-04-15T18:16:49.569357, status=STARTED, exitStatus=exitCode=UNKNOWN;exitDescription=, job=[JobInstance: id=29, version=0, Job=[importUserJob]], jobParameters=[{'resources':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}]] with root cause
org.springframework.batch.core.repository.JobExecutionAlreadyRunningException: A job execution for this job is already running: JobExecution: id=32, version=1, startTime=2023-04-15T18:16:49.568353, endTime=null, lastUpdated=2023-04-15T18:16:49.569357, status=STARTED, exitStatus=exitCode=UNKNOWN;exitDescription=, job=[JobInstance: id=29, version=0, Job=[importUserJob]], jobParameters=[{'resources':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}]
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:123)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at com.yuripe.batchType0A.Controller.BatchController.importFileAndRun(BatchController.java:49)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:563)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-04-15 18:23:52,029 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Starting BatchType0AApplication using Java 17.0.2 with PID 15784 (C:\Users\yurip\git\batch0A\batchType0A\target\classes started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 18:23:52,031 INFO com.yuripe.batchType0A.BatchType0AApplication [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 18:23:52,656 INFO org.springframework.batch.core.configuration.annotation.BatchRegistrar [main] Finished Spring Batch infrastructure beans configuration in 3 ms.
2023-04-15 18:23:53,113 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:23:53,114 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 18:23:53,141 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 21 ms. Found 0 JDBC repository interfaces.
2023-04-15 18:23:53,154 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:23:53,155 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 18:23:53,163 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 4 ms. Found 0 JPA repository interfaces.
2023-04-15 18:23:53,683 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8080 (http)
2023-04-15 18:23:53,705 INFO org.apache.coyote.http11.Http11NioProtocol [main] Initializing ProtocolHandler ["http-nio-8080"]
2023-04-15 18:23:53,708 INFO org.apache.catalina.core.StandardService [main] Starting service [Tomcat]
2023-04-15 18:23:53,708 INFO org.apache.catalina.core.StandardEngine [main] Starting Servlet engine: [Apache Tomcat/10.1.7]
2023-04-15 18:23:53,848 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [main] Initializing Spring embedded WebApplicationContext
2023-04-15 18:23:53,848 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 1771 ms
2023-04-15 18:23:54,118 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 18:23:54,199 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 18:23:54,523 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 18:23:54,537 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@451816fd
2023-04-15 18:23:54,538 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@451816fd
2023-04-15 18:23:54,538 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@451816fd
2023-04-15 18:23:54,538 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@56e5c8fb
2023-04-15 18:23:54,538 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@56e5c8fb
2023-04-15 18:23:54,538 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@45cd8607
2023-04-15 18:23:54,539 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@45cd8607
2023-04-15 18:23:54,539 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@9e33a6a
2023-04-15 18:23:54,539 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@9e33a6a
2023-04-15 18:23:54,539 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@c497a55
2023-04-15 18:23:54,539 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@c497a55
2023-04-15 18:23:54,539 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@c497a55
2023-04-15 18:23:54,540 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@7493d937
2023-04-15 18:23:54,540 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@7493d937
2023-04-15 18:23:54,540 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@7493d937
2023-04-15 18:23:54,540 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@a3b858f
2023-04-15 18:23:54,540 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@a3b858f
2023-04-15 18:23:54,541 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@a3b858f
2023-04-15 18:23:54,541 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@a3b858f
2023-04-15 18:23:54,541 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@600bbf9e
2023-04-15 18:23:54,541 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@18d30e7
2023-04-15 18:23:54,541 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@18d30e7
2023-04-15 18:23:54,542 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@72b40f87
2023-04-15 18:23:54,542 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@2475fba3
2023-04-15 18:23:54,542 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@19bf47fc
2023-04-15 18:23:54,542 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@19bf47fc
2023-04-15 18:23:54,542 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@19bf47fc
2023-04-15 18:23:54,542 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@71dd4624
2023-04-15 18:23:54,542 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@71dd4624
2023-04-15 18:23:54,543 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@71dd4624
2023-04-15 18:23:54,543 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2347b7af
2023-04-15 18:23:54,543 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2347b7af
2023-04-15 18:23:54,543 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@2347b7af
2023-04-15 18:23:54,543 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@2864f887
2023-04-15 18:23:54,543 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@2864f887
2023-04-15 18:23:54,543 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@2864f887
2023-04-15 18:23:54,543 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@4b07cad0
2023-04-15 18:23:54,543 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@4b07cad0
2023-04-15 18:23:54,544 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@4b07cad0
2023-04-15 18:23:54,544 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@507049f2
2023-04-15 18:23:54,544 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@507049f2
2023-04-15 18:23:54,544 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@4e94669c
2023-04-15 18:23:54,544 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@4e94669c
2023-04-15 18:23:54,544 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@41bb1f09
2023-04-15 18:23:54,544 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@41bb1f09
2023-04-15 18:23:54,544 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@41bb1f09
2023-04-15 18:23:54,544 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@349f0ca4
2023-04-15 18:23:54,545 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@66f2ec1c
2023-04-15 18:23:54,545 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@66f2ec1c
2023-04-15 18:23:54,545 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@b3fc6d8
2023-04-15 18:23:54,545 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@12e5d3e1
2023-04-15 18:23:54,545 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@12e5d3e1
2023-04-15 18:23:54,545 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@12e5d3e1
2023-04-15 18:23:54,545 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@5ed31735
2023-04-15 18:23:54,545 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@5ed31735
2023-04-15 18:23:54,545 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@5ed31735
2023-04-15 18:23:54,547 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@2fb082ff
2023-04-15 18:23:54,547 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@5a4c98d7
2023-04-15 18:23:54,547 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@668a32a4
2023-04-15 18:23:54,547 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@668a32a4
2023-04-15 18:23:54,547 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@2026fbff
2023-04-15 18:23:54,547 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@2026fbff
2023-04-15 18:23:54,548 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@baa227e
2023-04-15 18:23:54,548 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@351e89fc
2023-04-15 18:23:54,548 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@2b682e9
2023-04-15 18:23:54,548 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@15586843
2023-04-15 18:23:54,548 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@4fbb1144
2023-04-15 18:23:54,548 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@e2b3026
2023-04-15 18:23:54,549 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@38bc5ac0
2023-04-15 18:23:54,549 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@38bc5ac0
2023-04-15 18:23:54,549 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@6ef037e4
2023-04-15 18:23:54,549 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@6ef037e4
2023-04-15 18:23:54,549 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@79d63a4f
2023-04-15 18:23:54,549 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@79d63a4f
2023-04-15 18:23:54,549 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@2e2b9f53
2023-04-15 18:23:54,549 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@2e2b9f53
2023-04-15 18:23:54,549 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@749baa0c
2023-04-15 18:23:54,549 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@749baa0c
2023-04-15 18:23:54,551 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1b3bec6c
2023-04-15 18:23:54,551 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@53f7a906
2023-04-15 18:23:54,551 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@2154652c
2023-04-15 18:23:54,551 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@2154652c
2023-04-15 18:23:54,551 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@8b670c0
2023-04-15 18:23:54,551 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@8b670c0
2023-04-15 18:23:54,551 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@4c2ab536
2023-04-15 18:23:54,552 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@22fb9a2c
2023-04-15 18:23:54,552 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@2084e65a
2023-04-15 18:23:54,552 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@2084e65a
2023-04-15 18:23:54,552 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@1b8fa2fa
2023-04-15 18:23:54,552 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@1b8fa2fa
2023-04-15 18:23:54,552 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@21527b8
2023-04-15 18:23:54,553 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@21527b8
2023-04-15 18:23:54,553 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@21527b8
2023-04-15 18:23:54,553 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@7cc1f72c
2023-04-15 18:23:54,553 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@7cc1f72c
2023-04-15 18:23:54,553 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@7cc1f72c
2023-04-15 18:23:54,553 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7b7068d8
2023-04-15 18:23:54,554 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@1d8e9d3e
2023-04-15 18:23:54,554 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@360d41d0
2023-04-15 18:23:54,554 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@360d41d0
2023-04-15 18:23:54,554 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@4586a8aa
2023-04-15 18:23:54,554 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@4586a8aa
2023-04-15 18:23:54,555 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@4586a8aa
2023-04-15 18:23:54,555 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@3dc82e6a
2023-04-15 18:23:54,555 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@54463380
2023-04-15 18:23:54,555 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@819fb19
2023-04-15 18:23:54,555 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@819fb19
2023-04-15 18:23:54,555 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@782ac148
2023-04-15 18:23:54,556 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@782ac148
2023-04-15 18:23:54,556 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@782ac148
2023-04-15 18:23:54,556 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:23:54,557 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:23:54,557 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:23:54,557 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:23:54,557 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:23:54,557 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:23:54,558 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:23:54,558 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:23:54,558 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:23:54,558 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:23:54,558 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:23:54,567 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@9d99851
2023-04-15 18:23:54,567 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@9d99851
2023-04-15 18:23:54,569 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@794c5f5e
2023-04-15 18:23:54,569 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@794c5f5e
2023-04-15 18:23:54,570 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@46ab4efc
2023-04-15 18:23:54,571 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@2ff498b0
2023-04-15 18:23:54,571 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@b5312df
2023-04-15 18:23:54,571 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@4300e240
2023-04-15 18:23:54,571 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@5f409872
2023-04-15 18:23:54,571 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@547aaa32
2023-04-15 18:23:54,571 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@472c9f88
2023-04-15 18:23:54,571 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@37a67cf
2023-04-15 18:23:54,571 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@5822ecda
2023-04-15 18:23:54,603 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 18:23:55,007 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@70d687b8
2023-04-15 18:23:55,010 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 18:23:55,025 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 18:23:55,026 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 18:23:55,044 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@37c87fcc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@ca2be53)
2023-04-15 18:23:55,044 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@78f5cbc5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@70697478)
2023-04-15 18:23:55,044 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@42b43a6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1d622556)
2023-04-15 18:23:55,044 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4b9f7edc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@70ee1963)
2023-04-15 18:23:55,045 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2e0652ab) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@22c29aa8)
2023-04-15 18:23:55,045 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@129b69b2) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@12be4f83)
2023-04-15 18:23:55,045 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@eb1d475) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@389008d1)
2023-04-15 18:23:55,045 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@718f3088) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@11adab6d)
2023-04-15 18:23:55,045 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@11bfd751) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@29519337)
2023-04-15 18:23:55,047 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 18:23:55,047 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 18:23:55,047 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 18:23:55,048 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:23:55,048 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:23:55,049 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@380fdcf2
2023-04-15 18:23:55,049 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@46ab4efc`
2023-04-15 18:23:55,051 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:23:55,052 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:23:55,052 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:23:55,052 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:23:55,052 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:23:55,052 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:23:55,053 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@6d35ff7b] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@4ef31221]
2023-04-15 18:23:55,419 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@6d35ff7b] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@2ba9f743]
2023-04-15 18:23:55,877 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 18:23:55,889 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@2ba9f743] for TypeConfiguration
2023-04-15 18:23:55,890 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:23:55,945 INFO org.springframework.batch.core.repository.support.JobRepositoryFactoryBean [main] No database type set, using meta data indicating: MYSQL
2023-04-15 18:23:55,961 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] No TaskExecutor has been set, defaulting to synchronous executor.
2023-04-15 18:23:56,012 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:23:56,020 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:23:56,058 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 18:23:56,578 INFO org.apache.coyote.http11.Http11NioProtocol [main] Starting ProtocolHandler ["http-nio-8080"]
2023-04-15 18:23:56,600 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat started on port(s): 8080 (http) with context path ''
2023-04-15 18:23:56,610 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Started BatchType0AApplication in 4.951 seconds (process running for 5.927)
2023-04-15 18:24:24,913 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [http-nio-8080-exec-3] Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-04-15 18:24:24,914 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-3] Initializing Servlet 'dispatcherServlet'
2023-04-15 18:24:24,914 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-3] Completed initialization in 0 ms
2023-04-15 18:24:25,149 ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] [http-nio-8080-exec-3] Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.batch.core.repository.JobExecutionAlreadyRunningException: A job execution for this job is already running: JobExecution: id=32, version=1, startTime=2023-04-15T18:16:49.568353, endTime=null, lastUpdated=2023-04-15T18:16:49.569357, status=STARTED, exitStatus=exitCode=UNKNOWN;exitDescription=, job=[JobInstance: id=29, version=0, Job=[importUserJob]], jobParameters=[{'resources':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}]] with root cause
org.springframework.batch.core.repository.JobExecutionAlreadyRunningException: A job execution for this job is already running: JobExecution: id=32, version=1, startTime=2023-04-15T18:16:49.568353, endTime=null, lastUpdated=2023-04-15T18:16:49.569357, status=STARTED, exitStatus=exitCode=UNKNOWN;exitDescription=, job=[JobInstance: id=29, version=0, Job=[importUserJob]], jobParameters=[{'resources':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}]
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:123)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at com.yuripe.batchType0A.Controller.BatchController.importFileAndRun(BatchController.java:49)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:563)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-04-15 18:25:29,752 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [http-nio-8080-exec-5] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'resources':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}]
2023-04-15 18:25:29,799 INFO org.springframework.batch.core.job.SimpleStepHandler [http-nio-8080-exec-5] Executing step: [step1]
2023-04-15 18:25:29,862 ERROR org.springframework.batch.core.step.AbstractStep [http-nio-8080-exec-5] Encountered an error executing step step1 in job importUserJob
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.reader' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Failed to instantiate [org.springframework.batch.item.file.FlatFileItemReader]: Factory method 'reader' threw exception with message: Path must not be null
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:657)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:645)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:365)
	at org.springframework.batch.core.scope.StepScope.get(StepScope.java:111)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:362)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:686)
	at org.springframework.batch.item.file.FlatFileItemReader$$SpringCGLIB$$0.open(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.open(CompositeItemStream.java:124)
	at org.springframework.batch.core.step.tasklet.TaskletStep.open(TaskletStep.java:293)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:224)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at com.yuripe.batchType0A.Controller.BatchController.importFileAndRun(BatchController.java:49)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:563)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.item.file.FlatFileItemReader]: Factory method 'reader' threw exception with message: Path must not be null
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:171)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	... 77 common frames omitted
Caused by: java.lang.IllegalArgumentException: Path must not be null
	at org.springframework.util.Assert.notNull(Assert.java:204)
	at org.springframework.core.io.ClassPathResource.<init>(ClassPathResource.java:86)
	at org.springframework.core.io.ClassPathResource.<init>(ClassPathResource.java:72)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration.reader(BatchConfiguration.java:73)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.CGLIB$reader$3(<generated>)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:258)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.reader(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:139)
	... 78 common frames omitted
2023-04-15 18:25:29,862 INFO org.springframework.batch.core.step.AbstractStep [http-nio-8080-exec-5] Step: [step1] executed in 62ms
2023-04-15 18:25:29,878 ERROR org.springframework.batch.core.step.AbstractStep [http-nio-8080-exec-5] Exception while closing step execution resources in step step1 in job importUserJob
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.reader' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Failed to instantiate [org.springframework.batch.item.file.FlatFileItemReader]: Factory method 'reader' threw exception with message: Path must not be null
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:657)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:645)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:365)
	at org.springframework.batch.core.scope.StepScope.get(StepScope.java:111)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:362)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:686)
	at org.springframework.batch.item.file.FlatFileItemReader$$SpringCGLIB$$0.close(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.close(CompositeItemStream.java:111)
	at org.springframework.batch.core.step.tasklet.TaskletStep.close(TaskletStep.java:288)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:310)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at com.yuripe.batchType0A.Controller.BatchController.importFileAndRun(BatchController.java:49)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:563)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.item.file.FlatFileItemReader]: Factory method 'reader' threw exception with message: Path must not be null
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:171)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	... 77 common frames omitted
Caused by: java.lang.IllegalArgumentException: Path must not be null
	at org.springframework.util.Assert.notNull(Assert.java:204)
	at org.springframework.core.io.ClassPathResource.<init>(ClassPathResource.java:86)
	at org.springframework.core.io.ClassPathResource.<init>(ClassPathResource.java:72)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration.reader(BatchConfiguration.java:73)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.CGLIB$reader$3(<generated>)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:258)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.reader(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:139)
	... 78 common frames omitted
2023-04-15 18:25:29,878 INFO com.yuripe.batchType0A.Listener.JobFailureNotificationListener [http-nio-8080-exec-5] !!! JOB FAILED! Time to verify the results
2023-04-15 18:25:29,878 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [http-nio-8080-exec-5] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'resources':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}] and the following status: [FAILED] in 109ms
2023-04-15 18:25:59,473 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Starting BatchType0AApplication using Java 17.0.2 with PID 8056 (C:\Users\yurip\git\batch0A\batchType0A\target\classes started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 18:25:59,476 INFO com.yuripe.batchType0A.BatchType0AApplication [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 18:25:59,889 INFO org.springframework.batch.core.configuration.annotation.BatchRegistrar [main] Finished Spring Batch infrastructure beans configuration in 2 ms.
2023-04-15 18:26:00,172 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:26:00,173 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 18:26:00,188 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 11 ms. Found 0 JDBC repository interfaces.
2023-04-15 18:26:00,195 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:26:00,197 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 18:26:00,203 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 18:26:00,587 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8080 (http)
2023-04-15 18:26:00,598 INFO org.apache.coyote.http11.Http11NioProtocol [main] Initializing ProtocolHandler ["http-nio-8080"]
2023-04-15 18:26:00,599 INFO org.apache.catalina.core.StandardService [main] Starting service [Tomcat]
2023-04-15 18:26:00,599 INFO org.apache.catalina.core.StandardEngine [main] Starting Servlet engine: [Apache Tomcat/10.1.7]
2023-04-15 18:26:00,682 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [main] Initializing Spring embedded WebApplicationContext
2023-04-15 18:26:00,682 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 1152 ms
2023-04-15 18:26:00,849 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 18:26:00,905 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 18:26:01,154 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 18:26:01,166 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:26:01,166 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:26:01,167 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:26:01,167 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:26:01,167 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:26:01,167 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:26:01,167 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:26:01,167 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:26:01,167 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:26:01,167 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:26:01,168 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:26:01,168 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:26:01,168 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@49cb5030
2023-04-15 18:26:01,168 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@49cb5030
2023-04-15 18:26:01,170 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@49cb5030
2023-04-15 18:26:01,170 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:26:01,170 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:26:01,170 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:26:01,170 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:26:01,170 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@3e2d44f3
2023-04-15 18:26:01,170 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@23afc725
2023-04-15 18:26:01,170 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@23afc725
2023-04-15 18:26:01,170 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 18:26:01,171 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:26:01,171 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:26:01,171 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:26:01,171 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:26:01,171 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:26:01,171 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:26:01,171 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:26:01,171 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:26:01,172 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:26:01,172 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:26:01,172 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:26:01,172 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:26:01,172 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:26:01,172 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:26:01,173 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:26:01,173 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:26:01,173 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:26:01,173 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:26:01,173 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:26:01,174 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:26:01,174 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:26:01,174 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:26:01,174 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:26:01,174 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@3eac2e8a
2023-04-15 18:26:01,175 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:26:01,175 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:26:01,175 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:26:01,175 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:26:01,175 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:26:01,175 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:26:01,175 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@4fd80300
2023-04-15 18:26:01,175 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@4fd80300
2023-04-15 18:26:01,175 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@4fd80300
2023-04-15 18:26:01,175 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@1805383
2023-04-15 18:26:01,176 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:26:01,176 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:26:01,176 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:26:01,176 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@63f2e0b
2023-04-15 18:26:01,176 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@63f2e0b
2023-04-15 18:26:01,176 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@5a06904
2023-04-15 18:26:01,176 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@fabef2e
2023-04-15 18:26:01,176 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@1b4a3a1
2023-04-15 18:26:01,176 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@7e848aea
2023-04-15 18:26:01,177 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@786a3477
2023-04-15 18:26:01,177 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@286866cb
2023-04-15 18:26:01,177 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@ce561cc
2023-04-15 18:26:01,177 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@ce561cc
2023-04-15 18:26:01,177 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:26:01,177 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:26:01,179 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:26:01,179 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:26:01,179 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@14b95942
2023-04-15 18:26:01,180 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@14b95942
2023-04-15 18:26:01,180 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@3375b118
2023-04-15 18:26:01,180 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@3375b118
2023-04-15 18:26:01,180 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@667797f
2023-04-15 18:26:01,180 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@184751f3
2023-04-15 18:26:01,180 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@46ea78f0
2023-04-15 18:26:01,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@46ea78f0
2023-04-15 18:26:01,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@5889fc44
2023-04-15 18:26:01,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@5889fc44
2023-04-15 18:26:01,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@6598caab
2023-04-15 18:26:01,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@47f2c722
2023-04-15 18:26:01,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:26:01,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:26:01,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:26:01,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:26:01,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@6658f08a
2023-04-15 18:26:01,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@6658f08a
2023-04-15 18:26:01,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@6658f08a
2023-04-15 18:26:01,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@37c2f0b4
2023-04-15 18:26:01,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@37c2f0b4
2023-04-15 18:26:01,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@37c2f0b4
2023-04-15 18:26:01,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@35dcd032
2023-04-15 18:26:01,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@4522d793
2023-04-15 18:26:01,181 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@64dfb31d
2023-04-15 18:26:01,182 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@64dfb31d
2023-04-15 18:26:01,182 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@4438b862
2023-04-15 18:26:01,182 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@4438b862
2023-04-15 18:26:01,182 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@4438b862
2023-04-15 18:26:01,182 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@17b6ad97
2023-04-15 18:26:01,183 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@44fb6ebd
2023-04-15 18:26:01,183 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@5da57a64
2023-04-15 18:26:01,183 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@5da57a64
2023-04-15 18:26:01,183 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@5cdf221a
2023-04-15 18:26:01,185 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@5cdf221a
2023-04-15 18:26:01,185 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@5cdf221a
2023-04-15 18:26:01,186 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@7e27f603
2023-04-15 18:26:01,186 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@7e27f603
2023-04-15 18:26:01,186 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@6136e1fc
2023-04-15 18:26:01,187 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@6136e1fc
2023-04-15 18:26:01,187 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@1736c1e4
2023-04-15 18:26:01,187 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@1736c1e4
2023-04-15 18:26:01,187 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@32dcfeea
2023-04-15 18:26:01,188 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@32dcfeea
2023-04-15 18:26:01,188 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@738a815c
2023-04-15 18:26:01,188 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@738a815c
2023-04-15 18:26:01,188 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@2565a7d0
2023-04-15 18:26:01,194 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@d16209e
2023-04-15 18:26:01,194 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@d16209e
2023-04-15 18:26:01,196 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@adafe19
2023-04-15 18:26:01,196 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@adafe19
2023-04-15 18:26:01,197 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@1a17dd6f
2023-04-15 18:26:01,197 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@be6d228
2023-04-15 18:26:01,197 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@60c96eb4
2023-04-15 18:26:01,197 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@7eee6c13
2023-04-15 18:26:01,197 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@5ab63a04
2023-04-15 18:26:01,197 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@677cc4e8
2023-04-15 18:26:01,197 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@4c6bba7d
2023-04-15 18:26:01,197 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@41e8d917
2023-04-15 18:26:01,197 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@2ae5bd34
2023-04-15 18:26:01,233 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 18:26:01,595 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5fa5c8cf
2023-04-15 18:26:01,597 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 18:26:01,623 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 18:26:01,626 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 18:26:01,652 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@77e6761f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5c997de8)
2023-04-15 18:26:01,652 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@45bf93bb) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6b7c4734)
2023-04-15 18:26:01,653 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2f6e92ca) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@380fdcf2)
2023-04-15 18:26:01,653 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@114b203) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@8d810f2)
2023-04-15 18:26:01,653 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@537b3be1) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@15d58530)
2023-04-15 18:26:01,653 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@31f5b923) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@79e2606f)
2023-04-15 18:26:01,653 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@734cf881) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4a890fdd)
2023-04-15 18:26:01,653 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@56299b0e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3ca278bc)
2023-04-15 18:26:01,653 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@283e1759) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2acb1264)
2023-04-15 18:26:01,655 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 18:26:01,655 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 18:26:01,656 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 18:26:01,657 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:26:01,657 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:26:01,659 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@bfd97fb
2023-04-15 18:26:01,659 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@1a17dd6f`
2023-04-15 18:26:01,662 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:26:01,663 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:26:01,663 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:26:01,663 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:26:01,663 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:26:01,663 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:26:01,664 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@343d1d25] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@762da62b]
2023-04-15 18:26:01,988 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@343d1d25] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@3a12f3e7]
2023-04-15 18:26:02,455 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 18:26:02,466 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@3a12f3e7] for TypeConfiguration
2023-04-15 18:26:02,468 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:26:02,527 INFO org.springframework.batch.core.repository.support.JobRepositoryFactoryBean [main] No database type set, using meta data indicating: MYSQL
2023-04-15 18:26:02,543 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] No TaskExecutor has been set, defaulting to synchronous executor.
2023-04-15 18:26:02,586 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:26:02,596 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:26:02,635 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 18:26:03,003 INFO org.apache.coyote.http11.Http11NioProtocol [main] Starting ProtocolHandler ["http-nio-8080"]
2023-04-15 18:26:03,023 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat started on port(s): 8080 (http) with context path ''
2023-04-15 18:26:03,031 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Started BatchType0AApplication in 3.879 seconds (process running for 4.987)
2023-04-15 18:26:06,439 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [http-nio-8080-exec-2] Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-04-15 18:26:06,439 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-2] Initializing Servlet 'dispatcherServlet'
2023-04-15 18:26:06,440 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-2] Completed initialization in 1 ms
2023-04-15 18:26:06,609 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [http-nio-8080-exec-2] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'resources':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}]
2023-04-15 18:26:06,659 INFO org.springframework.batch.core.job.SimpleStepHandler [http-nio-8080-exec-2] Executing step: [step1]
2023-04-15 18:26:43,157 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Starting BatchType0AApplication using Java 17.0.2 with PID 17344 (C:\Users\yurip\git\batch0A\batchType0A\target\classes started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 18:26:43,161 INFO com.yuripe.batchType0A.BatchType0AApplication [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 18:26:43,655 INFO org.springframework.batch.core.configuration.annotation.BatchRegistrar [main] Finished Spring Batch infrastructure beans configuration in 3 ms.
2023-04-15 18:26:43,984 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:26:43,985 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 18:26:44,004 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 14 ms. Found 0 JDBC repository interfaces.
2023-04-15 18:26:44,014 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:26:44,016 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 18:26:44,021 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 18:26:44,415 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8080 (http)
2023-04-15 18:26:44,435 INFO org.apache.coyote.http11.Http11NioProtocol [main] Initializing ProtocolHandler ["http-nio-8080"]
2023-04-15 18:26:44,436 INFO org.apache.catalina.core.StandardService [main] Starting service [Tomcat]
2023-04-15 18:26:44,436 INFO org.apache.catalina.core.StandardEngine [main] Starting Servlet engine: [Apache Tomcat/10.1.7]
2023-04-15 18:26:44,515 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [main] Initializing Spring embedded WebApplicationContext
2023-04-15 18:26:44,515 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 1302 ms
2023-04-15 18:26:44,700 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 18:26:44,761 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 18:26:45,010 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 18:26:45,029 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1c2d63f0
2023-04-15 18:26:45,029 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1c2d63f0
2023-04-15 18:26:45,029 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@1c2d63f0
2023-04-15 18:26:45,029 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3a588b5f
2023-04-15 18:26:45,029 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3a588b5f
2023-04-15 18:26:45,029 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@20b54cfe
2023-04-15 18:26:45,029 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@20b54cfe
2023-04-15 18:26:45,031 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@2bdb5e0f
2023-04-15 18:26:45,031 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@2bdb5e0f
2023-04-15 18:26:45,031 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@5c9e8a67
2023-04-15 18:26:45,031 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@5c9e8a67
2023-04-15 18:26:45,031 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@5c9e8a67
2023-04-15 18:26:45,032 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@2262f0d8
2023-04-15 18:26:45,032 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@2262f0d8
2023-04-15 18:26:45,032 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@2262f0d8
2023-04-15 18:26:45,032 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@7185e611
2023-04-15 18:26:45,032 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@7185e611
2023-04-15 18:26:45,032 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@7185e611
2023-04-15 18:26:45,033 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@7185e611
2023-04-15 18:26:45,033 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@44d43cc9
2023-04-15 18:26:45,033 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@384472bf
2023-04-15 18:26:45,034 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@384472bf
2023-04-15 18:26:45,034 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@656ec00d
2023-04-15 18:26:45,035 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@3b8507df
2023-04-15 18:26:45,035 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@5ed25612
2023-04-15 18:26:45,035 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@5ed25612
2023-04-15 18:26:45,036 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@5ed25612
2023-04-15 18:26:45,036 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@451816fd
2023-04-15 18:26:45,036 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@451816fd
2023-04-15 18:26:45,036 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@451816fd
2023-04-15 18:26:45,036 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@56e5c8fb
2023-04-15 18:26:45,036 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@56e5c8fb
2023-04-15 18:26:45,036 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@56e5c8fb
2023-04-15 18:26:45,036 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@45cd8607
2023-04-15 18:26:45,037 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@45cd8607
2023-04-15 18:26:45,037 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@45cd8607
2023-04-15 18:26:45,037 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@9e33a6a
2023-04-15 18:26:45,037 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@9e33a6a
2023-04-15 18:26:45,037 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@9e33a6a
2023-04-15 18:26:45,038 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@c497a55
2023-04-15 18:26:45,038 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@c497a55
2023-04-15 18:26:45,038 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7493d937
2023-04-15 18:26:45,038 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7493d937
2023-04-15 18:26:45,038 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@5dc7841c
2023-04-15 18:26:45,038 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@5dc7841c
2023-04-15 18:26:45,038 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@5dc7841c
2023-04-15 18:26:45,038 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@4d67d5a4
2023-04-15 18:26:45,040 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@a3b858f
2023-04-15 18:26:45,040 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@a3b858f
2023-04-15 18:26:45,040 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@600bbf9e
2023-04-15 18:26:45,041 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@18d30e7
2023-04-15 18:26:45,041 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@18d30e7
2023-04-15 18:26:45,041 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@18d30e7
2023-04-15 18:26:45,041 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@72b40f87
2023-04-15 18:26:45,041 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@72b40f87
2023-04-15 18:26:45,041 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@72b40f87
2023-04-15 18:26:45,041 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@2475fba3
2023-04-15 18:26:45,041 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@19bf47fc
2023-04-15 18:26:45,041 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@71dd4624
2023-04-15 18:26:45,041 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@71dd4624
2023-04-15 18:26:45,042 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@2347b7af
2023-04-15 18:26:45,042 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@2347b7af
2023-04-15 18:26:45,042 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@2864f887
2023-04-15 18:26:45,042 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@4b07cad0
2023-04-15 18:26:45,042 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@507049f2
2023-04-15 18:26:45,042 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@4e94669c
2023-04-15 18:26:45,042 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@41bb1f09
2023-04-15 18:26:45,042 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@349f0ca4
2023-04-15 18:26:45,043 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@66f2ec1c
2023-04-15 18:26:45,043 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@66f2ec1c
2023-04-15 18:26:45,043 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@b3fc6d8
2023-04-15 18:26:45,043 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@b3fc6d8
2023-04-15 18:26:45,043 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@12e5d3e1
2023-04-15 18:26:45,043 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@12e5d3e1
2023-04-15 18:26:45,043 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@5ed31735
2023-04-15 18:26:45,043 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@5ed31735
2023-04-15 18:26:45,043 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@2fb082ff
2023-04-15 18:26:45,043 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@2fb082ff
2023-04-15 18:26:45,044 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5a4c98d7
2023-04-15 18:26:45,044 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@668a32a4
2023-04-15 18:26:45,044 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@2026fbff
2023-04-15 18:26:45,044 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@2026fbff
2023-04-15 18:26:45,044 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@baa227e
2023-04-15 18:26:45,044 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@baa227e
2023-04-15 18:26:45,044 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@351e89fc
2023-04-15 18:26:45,044 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@2b682e9
2023-04-15 18:26:45,044 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@15586843
2023-04-15 18:26:45,044 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@15586843
2023-04-15 18:26:45,044 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@4fbb1144
2023-04-15 18:26:45,044 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@4fbb1144
2023-04-15 18:26:45,044 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@e2b3026
2023-04-15 18:26:45,044 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@e2b3026
2023-04-15 18:26:45,046 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@e2b3026
2023-04-15 18:26:45,046 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@38bc5ac0
2023-04-15 18:26:45,046 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@38bc5ac0
2023-04-15 18:26:45,046 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@38bc5ac0
2023-04-15 18:26:45,046 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@6ef037e4
2023-04-15 18:26:45,046 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@79d63a4f
2023-04-15 18:26:45,046 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@2e2b9f53
2023-04-15 18:26:45,047 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@2e2b9f53
2023-04-15 18:26:45,047 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@749baa0c
2023-04-15 18:26:45,047 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@749baa0c
2023-04-15 18:26:45,047 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@749baa0c
2023-04-15 18:26:45,047 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@1b3bec6c
2023-04-15 18:26:45,047 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@53f7a906
2023-04-15 18:26:45,047 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@2154652c
2023-04-15 18:26:45,047 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@2154652c
2023-04-15 18:26:45,048 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@8b670c0
2023-04-15 18:26:45,048 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@8b670c0
2023-04-15 18:26:45,048 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@8b670c0
2023-04-15 18:26:45,048 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@4c2ab536
2023-04-15 18:26:45,048 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@4c2ab536
2023-04-15 18:26:45,048 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@22fb9a2c
2023-04-15 18:26:45,049 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@22fb9a2c
2023-04-15 18:26:45,049 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@2084e65a
2023-04-15 18:26:45,049 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@2084e65a
2023-04-15 18:26:45,049 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@1b8fa2fa
2023-04-15 18:26:45,049 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@1b8fa2fa
2023-04-15 18:26:45,050 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@21527b8
2023-04-15 18:26:45,050 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@21527b8
2023-04-15 18:26:45,050 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@7cc1f72c
2023-04-15 18:26:45,059 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@5da57a64
2023-04-15 18:26:45,059 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@5da57a64
2023-04-15 18:26:45,060 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@3686389
2023-04-15 18:26:45,060 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@3686389
2023-04-15 18:26:45,061 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@7608a838
2023-04-15 18:26:45,061 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@75839695
2023-04-15 18:26:45,061 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@21a6a494
2023-04-15 18:26:45,061 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@794c5f5e
2023-04-15 18:26:45,061 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@4ab66127
2023-04-15 18:26:45,061 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@236861da
2023-04-15 18:26:45,062 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@37fef327
2023-04-15 18:26:45,062 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@2cd3fc29
2023-04-15 18:26:45,062 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@55951fcd
2023-04-15 18:26:45,088 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 18:26:45,424 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6630dd28
2023-04-15 18:26:45,426 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 18:26:45,447 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 18:26:45,449 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 18:26:45,477 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@38e46765) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@192f5f39)
2023-04-15 18:26:45,477 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4cd5fc46) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2965dd88)
2023-04-15 18:26:45,477 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3221588e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@51141f64)
2023-04-15 18:26:45,478 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@32c0fecc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@35ceec81)
2023-04-15 18:26:45,478 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@d13379e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7c8df667)
2023-04-15 18:26:45,478 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@498e41a4) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@be616f0)
2023-04-15 18:26:45,478 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1f5d7fd5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@cf08c97)
2023-04-15 18:26:45,478 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@37c87fcc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@ca2be53)
2023-04-15 18:26:45,478 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@78f5cbc5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@70697478)
2023-04-15 18:26:45,479 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 18:26:45,479 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 18:26:45,480 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 18:26:45,482 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:26:45,482 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:26:45,484 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@18cbc3c2
2023-04-15 18:26:45,484 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@7608a838`
2023-04-15 18:26:45,488 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:26:45,488 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:26:45,488 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:26:45,488 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:26:45,488 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:26:45,488 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:26:45,490 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@5788722f] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@7a730479]
2023-04-15 18:26:45,824 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@5788722f] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@7f41d979]
2023-04-15 18:26:46,359 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 18:26:46,367 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@7f41d979] for TypeConfiguration
2023-04-15 18:26:46,369 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:26:46,433 INFO org.springframework.batch.core.repository.support.JobRepositoryFactoryBean [main] No database type set, using meta data indicating: MYSQL
2023-04-15 18:26:46,459 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] No TaskExecutor has been set, defaulting to synchronous executor.
2023-04-15 18:26:46,535 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:26:46,552 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:26:46,597 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 18:26:47,035 INFO org.apache.coyote.http11.Http11NioProtocol [main] Starting ProtocolHandler ["http-nio-8080"]
2023-04-15 18:26:47,070 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat started on port(s): 8080 (http) with context path ''
2023-04-15 18:26:47,081 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Started BatchType0AApplication in 4.278 seconds (process running for 5.385)
2023-04-15 18:26:47,346 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [http-nio-8080-exec-2] Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-04-15 18:26:47,346 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-2] Initializing Servlet 'dispatcherServlet'
2023-04-15 18:26:47,347 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-2] Completed initialization in 1 ms
2023-04-15 18:26:47,506 ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] [http-nio-8080-exec-2] Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.batch.core.repository.JobExecutionAlreadyRunningException: A job execution for this job is already running: JobExecution: id=34, version=1, startTime=2023-04-15T18:26:06.621222, endTime=null, lastUpdated=2023-04-15T18:26:06.623268, status=STARTED, exitStatus=exitCode=UNKNOWN;exitDescription=, job=[JobInstance: id=29, version=0, Job=[importUserJob]], jobParameters=[{'resources':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}]] with root cause
org.springframework.batch.core.repository.JobExecutionAlreadyRunningException: A job execution for this job is already running: JobExecution: id=34, version=1, startTime=2023-04-15T18:26:06.621222, endTime=null, lastUpdated=2023-04-15T18:26:06.623268, status=STARTED, exitStatus=exitCode=UNKNOWN;exitDescription=, job=[JobInstance: id=29, version=0, Job=[importUserJob]], jobParameters=[{'resources':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}]
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:123)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at com.yuripe.batchType0A.Controller.BatchController.importFileAndRun(BatchController.java:49)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:563)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-04-15 18:27:26,193 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Starting BatchType0AApplication using Java 17.0.2 with PID 16224 (C:\Users\yurip\git\batch0A\batchType0A\target\classes started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 18:27:26,195 INFO com.yuripe.batchType0A.BatchType0AApplication [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 18:27:26,608 INFO org.springframework.batch.core.configuration.annotation.BatchRegistrar [main] Finished Spring Batch infrastructure beans configuration in 2 ms.
2023-04-15 18:27:26,916 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:27:26,917 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 18:27:26,931 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 11 ms. Found 0 JDBC repository interfaces.
2023-04-15 18:27:26,942 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:27:26,944 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 18:27:26,950 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 18:27:27,340 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8080 (http)
2023-04-15 18:27:27,359 INFO org.apache.coyote.http11.Http11NioProtocol [main] Initializing ProtocolHandler ["http-nio-8080"]
2023-04-15 18:27:27,360 INFO org.apache.catalina.core.StandardService [main] Starting service [Tomcat]
2023-04-15 18:27:27,361 INFO org.apache.catalina.core.StandardEngine [main] Starting Servlet engine: [Apache Tomcat/10.1.7]
2023-04-15 18:27:27,434 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [main] Initializing Spring embedded WebApplicationContext
2023-04-15 18:27:27,434 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 1195 ms
2023-04-15 18:27:27,576 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 18:27:27,624 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 18:27:27,875 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 18:27:27,891 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:27:27,891 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:27:27,891 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:27:27,891 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:27:27,891 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:27:27,891 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:27:27,892 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:27:27,892 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:27:27,892 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:27:27,892 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:27:27,892 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:27:27,892 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:27:27,893 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@49cb5030
2023-04-15 18:27:27,893 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@49cb5030
2023-04-15 18:27:27,893 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@49cb5030
2023-04-15 18:27:27,893 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:27:27,893 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:27:27,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:27:27,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:27:27,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@3e2d44f3
2023-04-15 18:27:27,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@23afc725
2023-04-15 18:27:27,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@23afc725
2023-04-15 18:27:27,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 18:27:27,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:27:27,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:27:27,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:27:27,894 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:27:27,895 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:27:27,895 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:27:27,895 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:27:27,895 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:27:27,895 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:27:27,895 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:27:27,895 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:27:27,895 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:27:27,895 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:27:27,895 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:27:27,895 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:27:27,896 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:27:27,896 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:27:27,896 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:27:27,896 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:27:27,896 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:27:27,896 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:27:27,896 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:27:27,896 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:27:27,896 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@3eac2e8a
2023-04-15 18:27:27,897 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:27:27,898 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:27:27,898 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:27:27,898 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:27:27,898 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:27:27,899 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:27:27,899 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@4fd80300
2023-04-15 18:27:27,899 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@4fd80300
2023-04-15 18:27:27,899 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@4fd80300
2023-04-15 18:27:27,899 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@1805383
2023-04-15 18:27:27,899 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:27:27,900 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:27:27,900 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:27:27,900 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@63f2e0b
2023-04-15 18:27:27,900 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@63f2e0b
2023-04-15 18:27:27,900 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@5a06904
2023-04-15 18:27:27,901 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@fabef2e
2023-04-15 18:27:27,901 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@1b4a3a1
2023-04-15 18:27:27,901 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@7e848aea
2023-04-15 18:27:27,901 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@786a3477
2023-04-15 18:27:27,901 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@286866cb
2023-04-15 18:27:27,901 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@ce561cc
2023-04-15 18:27:27,902 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@ce561cc
2023-04-15 18:27:27,904 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:27:27,905 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:27:27,905 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:27:27,905 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:27:27,905 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@14b95942
2023-04-15 18:27:27,905 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@14b95942
2023-04-15 18:27:27,906 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@3375b118
2023-04-15 18:27:27,906 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@3375b118
2023-04-15 18:27:27,906 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@667797f
2023-04-15 18:27:27,907 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@184751f3
2023-04-15 18:27:27,907 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@46ea78f0
2023-04-15 18:27:27,907 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@46ea78f0
2023-04-15 18:27:27,907 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@5889fc44
2023-04-15 18:27:27,907 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@5889fc44
2023-04-15 18:27:27,907 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@6598caab
2023-04-15 18:27:27,907 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@47f2c722
2023-04-15 18:27:27,907 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:27:27,907 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:27:27,907 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:27:27,908 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:27:27,908 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@6658f08a
2023-04-15 18:27:27,908 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@6658f08a
2023-04-15 18:27:27,908 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@6658f08a
2023-04-15 18:27:27,908 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@37c2f0b4
2023-04-15 18:27:27,908 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@37c2f0b4
2023-04-15 18:27:27,908 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@37c2f0b4
2023-04-15 18:27:27,908 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@35dcd032
2023-04-15 18:27:27,908 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@4522d793
2023-04-15 18:27:27,908 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@64dfb31d
2023-04-15 18:27:27,909 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@64dfb31d
2023-04-15 18:27:27,909 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@4438b862
2023-04-15 18:27:27,909 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@4438b862
2023-04-15 18:27:27,909 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@4438b862
2023-04-15 18:27:27,909 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@17b6ad97
2023-04-15 18:27:27,909 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@44fb6ebd
2023-04-15 18:27:27,910 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@5da57a64
2023-04-15 18:27:27,910 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@5da57a64
2023-04-15 18:27:27,910 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@5cdf221a
2023-04-15 18:27:27,910 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@5cdf221a
2023-04-15 18:27:27,911 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@5cdf221a
2023-04-15 18:27:27,911 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@7e27f603
2023-04-15 18:27:27,911 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@7e27f603
2023-04-15 18:27:27,911 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@6136e1fc
2023-04-15 18:27:27,911 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@6136e1fc
2023-04-15 18:27:27,912 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@1736c1e4
2023-04-15 18:27:27,912 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@1736c1e4
2023-04-15 18:27:27,912 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@32dcfeea
2023-04-15 18:27:27,912 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@32dcfeea
2023-04-15 18:27:27,912 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@738a815c
2023-04-15 18:27:27,912 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@738a815c
2023-04-15 18:27:27,912 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@2565a7d0
2023-04-15 18:27:27,920 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@d16209e
2023-04-15 18:27:27,920 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@d16209e
2023-04-15 18:27:27,922 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@adafe19
2023-04-15 18:27:27,922 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@adafe19
2023-04-15 18:27:27,923 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@1a17dd6f
2023-04-15 18:27:27,923 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@be6d228
2023-04-15 18:27:27,923 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@60c96eb4
2023-04-15 18:27:27,923 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@7eee6c13
2023-04-15 18:27:27,923 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@5ab63a04
2023-04-15 18:27:27,923 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@677cc4e8
2023-04-15 18:27:27,924 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@4c6bba7d
2023-04-15 18:27:27,924 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@41e8d917
2023-04-15 18:27:27,924 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@2ae5bd34
2023-04-15 18:27:27,954 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 18:27:28,251 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5fa5c8cf
2023-04-15 18:27:28,254 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 18:27:28,274 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 18:27:28,276 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 18:27:28,300 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@77e6761f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5c997de8)
2023-04-15 18:27:28,300 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@45bf93bb) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6b7c4734)
2023-04-15 18:27:28,300 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2f6e92ca) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@380fdcf2)
2023-04-15 18:27:28,300 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@114b203) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@8d810f2)
2023-04-15 18:27:28,300 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@537b3be1) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@15d58530)
2023-04-15 18:27:28,300 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@31f5b923) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@79e2606f)
2023-04-15 18:27:28,300 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@734cf881) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4a890fdd)
2023-04-15 18:27:28,301 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@56299b0e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3ca278bc)
2023-04-15 18:27:28,301 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@283e1759) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2acb1264)
2023-04-15 18:27:28,302 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 18:27:28,302 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 18:27:28,303 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 18:27:28,304 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:27:28,304 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:27:28,306 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@bfd97fb
2023-04-15 18:27:28,306 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@1a17dd6f`
2023-04-15 18:27:28,309 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:27:28,309 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:27:28,309 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:27:28,309 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:27:28,309 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:27:28,309 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:27:28,311 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@343d1d25] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@762da62b]
2023-04-15 18:27:28,643 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@343d1d25] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@3a12f3e7]
2023-04-15 18:27:29,061 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 18:27:29,071 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@3a12f3e7] for TypeConfiguration
2023-04-15 18:27:29,073 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:27:29,128 INFO org.springframework.batch.core.repository.support.JobRepositoryFactoryBean [main] No database type set, using meta data indicating: MYSQL
2023-04-15 18:27:29,147 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] No TaskExecutor has been set, defaulting to synchronous executor.
2023-04-15 18:27:29,204 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:27:29,214 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:27:29,249 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 18:27:29,637 INFO org.apache.coyote.http11.Http11NioProtocol [main] Starting ProtocolHandler ["http-nio-8080"]
2023-04-15 18:27:29,662 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat started on port(s): 8080 (http) with context path ''
2023-04-15 18:27:29,671 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Started BatchType0AApplication in 3.867 seconds (process running for 4.86)
2023-04-15 18:27:32,785 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [http-nio-8080-exec-1] Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-04-15 18:27:32,786 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-1] Initializing Servlet 'dispatcherServlet'
2023-04-15 18:27:32,786 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-1] Completed initialization in 0 ms
2023-04-15 18:27:32,970 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [http-nio-8080-exec-1] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'resources':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}]
2023-04-15 18:27:33,028 INFO org.springframework.batch.core.job.SimpleStepHandler [http-nio-8080-exec-1] Executing step: [step1]
2023-04-15 18:28:28,433 ERROR org.springframework.batch.core.step.AbstractStep [http-nio-8080-exec-1] Encountered an error executing step step1 in job importUserJob
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.reader' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Failed to instantiate [org.springframework.batch.item.file.FlatFileItemReader]: Factory method 'reader' threw exception with message: Path must not be null
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:657)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:645)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:365)
	at org.springframework.batch.core.scope.StepScope.get(StepScope.java:111)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:362)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:686)
	at org.springframework.batch.item.file.FlatFileItemReader$$SpringCGLIB$$0.open(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.open(CompositeItemStream.java:124)
	at org.springframework.batch.core.step.tasklet.TaskletStep.open(TaskletStep.java:293)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:224)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at com.yuripe.batchType0A.Controller.BatchController.importFileAndRun(BatchController.java:49)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:563)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.item.file.FlatFileItemReader]: Factory method 'reader' threw exception with message: Path must not be null
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:171)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	... 77 common frames omitted
Caused by: java.lang.IllegalArgumentException: Path must not be null
	at org.springframework.util.Assert.notNull(Assert.java:204)
	at org.springframework.core.io.ClassPathResource.<init>(ClassPathResource.java:86)
	at org.springframework.core.io.ClassPathResource.<init>(ClassPathResource.java:72)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration.reader(BatchConfiguration.java:73)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.CGLIB$reader$0(<generated>)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:258)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.reader(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:139)
	... 78 common frames omitted
2023-04-15 18:28:28,443 INFO org.springframework.batch.core.step.AbstractStep [http-nio-8080-exec-1] Step: [step1] executed in 55s414ms
2023-04-15 18:28:29,506 ERROR org.springframework.batch.core.step.AbstractStep [http-nio-8080-exec-1] Exception while closing step execution resources in step step1 in job importUserJob
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.reader' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Failed to instantiate [org.springframework.batch.item.file.FlatFileItemReader]: Factory method 'reader' threw exception with message: Path must not be null
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:657)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:645)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:365)
	at org.springframework.batch.core.scope.StepScope.get(StepScope.java:111)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:362)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:686)
	at org.springframework.batch.item.file.FlatFileItemReader$$SpringCGLIB$$0.close(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.close(CompositeItemStream.java:111)
	at org.springframework.batch.core.step.tasklet.TaskletStep.close(TaskletStep.java:288)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:310)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at com.yuripe.batchType0A.Controller.BatchController.importFileAndRun(BatchController.java:49)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:563)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.item.file.FlatFileItemReader]: Factory method 'reader' threw exception with message: Path must not be null
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:171)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	... 77 common frames omitted
Caused by: java.lang.IllegalArgumentException: Path must not be null
	at org.springframework.util.Assert.notNull(Assert.java:204)
	at org.springframework.core.io.ClassPathResource.<init>(ClassPathResource.java:86)
	at org.springframework.core.io.ClassPathResource.<init>(ClassPathResource.java:72)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration.reader(BatchConfiguration.java:73)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.CGLIB$reader$0(<generated>)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:258)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.reader(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:139)
	... 78 common frames omitted
2023-04-15 18:28:29,513 INFO com.yuripe.batchType0A.Listener.JobFailureNotificationListener [http-nio-8080-exec-1] !!! JOB FAILED! Time to verify the results
2023-04-15 18:28:29,526 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [http-nio-8080-exec-1] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'resources':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}] and the following status: [FAILED] in 56s530ms
2023-04-15 18:28:41,984 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Starting BatchType0AApplication using Java 17.0.2 with PID 6840 (C:\Users\yurip\git\batch0A\batchType0A\target\classes started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 18:28:41,987 INFO com.yuripe.batchType0A.BatchType0AApplication [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 18:28:42,433 INFO org.springframework.batch.core.configuration.annotation.BatchRegistrar [main] Finished Spring Batch infrastructure beans configuration in 3 ms.
2023-04-15 18:28:42,747 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:28:42,748 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 18:28:42,763 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 12 ms. Found 0 JDBC repository interfaces.
2023-04-15 18:28:42,770 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:28:42,771 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 18:28:42,776 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 18:28:43,149 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8080 (http)
2023-04-15 18:28:43,157 INFO org.apache.coyote.http11.Http11NioProtocol [main] Initializing ProtocolHandler ["http-nio-8080"]
2023-04-15 18:28:43,157 INFO org.apache.catalina.core.StandardService [main] Starting service [Tomcat]
2023-04-15 18:28:43,157 INFO org.apache.catalina.core.StandardEngine [main] Starting Servlet engine: [Apache Tomcat/10.1.7]
2023-04-15 18:28:43,247 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [main] Initializing Spring embedded WebApplicationContext
2023-04-15 18:28:43,247 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 1210 ms
2023-04-15 18:28:43,382 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 18:28:43,433 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 18:28:43,696 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 18:28:43,707 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@4c2ab536
2023-04-15 18:28:43,707 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@4c2ab536
2023-04-15 18:28:43,707 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@4c2ab536
2023-04-15 18:28:43,707 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@22fb9a2c
2023-04-15 18:28:43,707 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@22fb9a2c
2023-04-15 18:28:43,707 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@2084e65a
2023-04-15 18:28:43,708 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@2084e65a
2023-04-15 18:28:43,708 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@1b8fa2fa
2023-04-15 18:28:43,708 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@1b8fa2fa
2023-04-15 18:28:43,708 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@21527b8
2023-04-15 18:28:43,708 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@21527b8
2023-04-15 18:28:43,708 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@21527b8
2023-04-15 18:28:43,709 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@7cc1f72c
2023-04-15 18:28:43,709 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@7cc1f72c
2023-04-15 18:28:43,709 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@7cc1f72c
2023-04-15 18:28:43,709 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@360d41d0
2023-04-15 18:28:43,709 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@360d41d0
2023-04-15 18:28:43,709 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@360d41d0
2023-04-15 18:28:43,710 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@360d41d0
2023-04-15 18:28:43,711 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@4586a8aa
2023-04-15 18:28:43,711 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@3dc82e6a
2023-04-15 18:28:43,711 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@3dc82e6a
2023-04-15 18:28:43,711 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@54463380
2023-04-15 18:28:43,711 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@819fb19
2023-04-15 18:28:43,712 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@782ac148
2023-04-15 18:28:43,712 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@782ac148
2023-04-15 18:28:43,712 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@782ac148
2023-04-15 18:28:43,713 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:28:43,713 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:28:43,714 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:28:43,714 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:28:43,714 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:28:43,714 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:28:43,714 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:28:43,715 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:28:43,715 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:28:43,715 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:28:43,715 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:28:43,715 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:28:43,715 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:28:43,716 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:28:43,716 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:28:43,716 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:28:43,716 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:28:43,716 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:28:43,716 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:28:43,717 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@49cb5030
2023-04-15 18:28:43,717 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@23c7cb18
2023-04-15 18:28:43,717 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@23c7cb18
2023-04-15 18:28:43,717 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:28:43,717 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:28:43,718 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:28:43,718 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:28:43,718 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@3e2d44f3
2023-04-15 18:28:43,718 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@3e2d44f3
2023-04-15 18:28:43,718 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@3e2d44f3
2023-04-15 18:28:43,718 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@23afc725
2023-04-15 18:28:43,718 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 18:28:43,718 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:28:43,719 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:28:43,719 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:28:43,719 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:28:43,719 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:28:43,719 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:28:43,719 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:28:43,720 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:28:43,720 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:28:43,720 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:28:43,720 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:28:43,720 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:28:43,720 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@3eac2e8a
2023-04-15 18:28:43,720 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@3eac2e8a
2023-04-15 18:28:43,720 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:28:43,721 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:28:43,721 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:28:43,721 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:28:43,721 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:28:43,721 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:28:43,721 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@4fd80300
2023-04-15 18:28:43,721 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@1805383
2023-04-15 18:28:43,722 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:28:43,722 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:28:43,722 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:28:43,722 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:28:43,723 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@63f2e0b
2023-04-15 18:28:43,723 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5a06904
2023-04-15 18:28:43,723 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@fabef2e
2023-04-15 18:28:43,723 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@fabef2e
2023-04-15 18:28:43,724 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@1b4a3a1
2023-04-15 18:28:43,724 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@1b4a3a1
2023-04-15 18:28:43,724 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@7e848aea
2023-04-15 18:28:43,724 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@7e848aea
2023-04-15 18:28:43,724 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@7e848aea
2023-04-15 18:28:43,724 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@786a3477
2023-04-15 18:28:43,724 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@786a3477
2023-04-15 18:28:43,724 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@786a3477
2023-04-15 18:28:43,724 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@286866cb
2023-04-15 18:28:43,725 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@ce561cc
2023-04-15 18:28:43,725 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:28:43,725 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:28:43,725 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:28:43,725 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:28:43,725 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:28:43,726 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@14b95942
2023-04-15 18:28:43,726 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@3375b118
2023-04-15 18:28:43,726 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@667797f
2023-04-15 18:28:43,726 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@667797f
2023-04-15 18:28:43,726 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@184751f3
2023-04-15 18:28:43,727 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@184751f3
2023-04-15 18:28:43,727 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@184751f3
2023-04-15 18:28:43,727 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@46ea78f0
2023-04-15 18:28:43,727 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@46ea78f0
2023-04-15 18:28:43,728 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@5889fc44
2023-04-15 18:28:43,728 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@5889fc44
2023-04-15 18:28:43,728 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@6598caab
2023-04-15 18:28:43,728 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@6598caab
2023-04-15 18:28:43,728 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@47f2c722
2023-04-15 18:28:43,728 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@47f2c722
2023-04-15 18:28:43,728 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:28:43,729 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:28:43,729 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:28:43,735 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@4afd65fd
2023-04-15 18:28:43,735 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@4afd65fd
2023-04-15 18:28:43,736 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@76596288
2023-04-15 18:28:43,737 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@76596288
2023-04-15 18:28:43,739 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@4b6b5352
2023-04-15 18:28:43,739 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1d6713dd
2023-04-15 18:28:43,739 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@3b39e79b
2023-04-15 18:28:43,739 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@3ee6dc82
2023-04-15 18:28:43,739 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@2f86f9cf
2023-04-15 18:28:43,739 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@adafe19
2023-04-15 18:28:43,739 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@7e2bd5e6
2023-04-15 18:28:43,739 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@76a1146d
2023-04-15 18:28:43,740 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@6ef1c3f7
2023-04-15 18:28:43,772 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 18:28:44,065 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@793d09e
2023-04-15 18:28:44,067 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 18:28:44,085 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 18:28:44,086 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 18:28:44,109 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@839755f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@71d99732)
2023-04-15 18:28:44,109 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2328ec73) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@42a05533)
2023-04-15 18:28:44,109 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@17053b5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3cad24ae)
2023-04-15 18:28:44,109 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@58021c3c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@18cbc3c2)
2023-04-15 18:28:44,110 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1b25d695) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4ef8090b)
2023-04-15 18:28:44,110 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6d31f14) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@404009df)
2023-04-15 18:28:44,110 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@75e4fe3c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7bda01da)
2023-04-15 18:28:44,110 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@65ef9a0a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@25216999)
2023-04-15 18:28:44,110 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@77e6761f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5c997de8)
2023-04-15 18:28:44,111 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 18:28:44,111 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 18:28:44,111 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 18:28:44,113 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:28:44,113 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:28:44,114 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@459d2ee6
2023-04-15 18:28:44,114 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@4b6b5352`
2023-04-15 18:28:44,118 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:28:44,118 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:28:44,118 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:28:44,118 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:28:44,118 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:28:44,118 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:28:44,119 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@436a563f] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@538e74fc]
2023-04-15 18:28:44,446 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@436a563f] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@5ebf776c]
2023-04-15 18:28:44,922 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 18:28:44,932 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@5ebf776c] for TypeConfiguration
2023-04-15 18:28:44,933 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:28:44,986 INFO org.springframework.batch.core.repository.support.JobRepositoryFactoryBean [main] No database type set, using meta data indicating: MYSQL
2023-04-15 18:28:45,004 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] No TaskExecutor has been set, defaulting to synchronous executor.
2023-04-15 18:28:45,063 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:28:45,074 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:28:45,112 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 18:28:45,499 INFO org.apache.coyote.http11.Http11NioProtocol [main] Starting ProtocolHandler ["http-nio-8080"]
2023-04-15 18:28:45,519 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat started on port(s): 8080 (http) with context path ''
2023-04-15 18:28:45,527 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Started BatchType0AApplication in 3.887 seconds (process running for 4.902)
2023-04-15 18:28:48,358 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [http-nio-8080-exec-1] Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-04-15 18:28:48,358 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-1] Initializing Servlet 'dispatcherServlet'
2023-04-15 18:28:48,359 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-1] Completed initialization in 0 ms
2023-04-15 18:28:48,521 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [http-nio-8080-exec-1] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'resources':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}]
2023-04-15 18:28:48,583 INFO org.springframework.batch.core.job.SimpleStepHandler [http-nio-8080-exec-1] Executing step: [step1]
2023-04-15 18:29:21,980 ERROR org.springframework.batch.core.step.AbstractStep [http-nio-8080-exec-1] Encountered an error executing step step1 in job importUserJob
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.reader' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Failed to instantiate [org.springframework.batch.item.file.FlatFileItemReader]: Factory method 'reader' threw exception with message: Path must not be null
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:657)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:645)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:365)
	at org.springframework.batch.core.scope.StepScope.get(StepScope.java:111)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:362)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:686)
	at org.springframework.batch.item.file.FlatFileItemReader$$SpringCGLIB$$0.open(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.open(CompositeItemStream.java:124)
	at org.springframework.batch.core.step.tasklet.TaskletStep.open(TaskletStep.java:293)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:224)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at com.yuripe.batchType0A.Controller.BatchController.importFileAndRun(BatchController.java:49)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:563)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.item.file.FlatFileItemReader]: Factory method 'reader' threw exception with message: Path must not be null
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:171)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	... 77 common frames omitted
Caused by: java.lang.IllegalArgumentException: Path must not be null
	at org.springframework.util.Assert.notNull(Assert.java:204)
	at org.springframework.core.io.ClassPathResource.<init>(ClassPathResource.java:86)
	at org.springframework.core.io.ClassPathResource.<init>(ClassPathResource.java:72)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration.reader(BatchConfiguration.java:73)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.CGLIB$reader$0(<generated>)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:258)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.reader(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:139)
	... 78 common frames omitted
2023-04-15 18:29:21,991 INFO org.springframework.batch.core.step.AbstractStep [http-nio-8080-exec-1] Step: [step1] executed in 33s408ms
2023-04-15 18:29:22,003 ERROR org.springframework.batch.core.step.AbstractStep [http-nio-8080-exec-1] Exception while closing step execution resources in step step1 in job importUserJob
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.reader' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Failed to instantiate [org.springframework.batch.item.file.FlatFileItemReader]: Factory method 'reader' threw exception with message: Path must not be null
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:657)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:645)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:365)
	at org.springframework.batch.core.scope.StepScope.get(StepScope.java:111)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:362)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:686)
	at org.springframework.batch.item.file.FlatFileItemReader$$SpringCGLIB$$0.close(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.close(CompositeItemStream.java:111)
	at org.springframework.batch.core.step.tasklet.TaskletStep.close(TaskletStep.java:288)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:310)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at com.yuripe.batchType0A.Controller.BatchController.importFileAndRun(BatchController.java:49)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:563)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.item.file.FlatFileItemReader]: Factory method 'reader' threw exception with message: Path must not be null
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:171)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	... 77 common frames omitted
Caused by: java.lang.IllegalArgumentException: Path must not be null
	at org.springframework.util.Assert.notNull(Assert.java:204)
	at org.springframework.core.io.ClassPathResource.<init>(ClassPathResource.java:86)
	at org.springframework.core.io.ClassPathResource.<init>(ClassPathResource.java:72)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration.reader(BatchConfiguration.java:73)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.CGLIB$reader$0(<generated>)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:258)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.reader(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:139)
	... 78 common frames omitted
2023-04-15 18:29:22,009 INFO com.yuripe.batchType0A.Listener.JobFailureNotificationListener [http-nio-8080-exec-1] !!! JOB FAILED! Time to verify the results
2023-04-15 18:29:22,018 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [http-nio-8080-exec-1] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'resources':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}] and the following status: [FAILED] in 33s476ms
2023-04-15 18:29:55,035 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Starting BatchType0AApplication using Java 17.0.2 with PID 19080 (C:\Users\yurip\git\batch0A\batchType0A\target\classes started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 18:29:55,037 INFO com.yuripe.batchType0A.BatchType0AApplication [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 18:29:55,482 INFO org.springframework.batch.core.configuration.annotation.BatchRegistrar [main] Finished Spring Batch infrastructure beans configuration in 3 ms.
2023-04-15 18:29:55,790 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:29:55,791 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 18:29:55,811 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 14 ms. Found 0 JDBC repository interfaces.
2023-04-15 18:29:55,818 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:29:55,820 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 18:29:55,825 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 18:29:56,245 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8080 (http)
2023-04-15 18:29:56,256 INFO org.apache.coyote.http11.Http11NioProtocol [main] Initializing ProtocolHandler ["http-nio-8080"]
2023-04-15 18:29:56,257 INFO org.apache.catalina.core.StandardService [main] Starting service [Tomcat]
2023-04-15 18:29:56,258 INFO org.apache.catalina.core.StandardEngine [main] Starting Servlet engine: [Apache Tomcat/10.1.7]
2023-04-15 18:29:56,356 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [main] Initializing Spring embedded WebApplicationContext
2023-04-15 18:29:56,356 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 1265 ms
2023-04-15 18:29:56,479 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 18:29:56,540 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 18:29:56,747 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 18:29:56,759 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:29:56,759 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:29:56,759 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:29:56,760 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:29:56,760 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:29:56,760 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:29:56,760 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:29:56,760 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:29:56,760 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:29:56,761 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:29:56,761 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:29:56,761 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:29:56,762 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:29:56,762 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:29:56,762 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:29:56,762 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@23c7cb18
2023-04-15 18:29:56,762 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@23c7cb18
2023-04-15 18:29:56,762 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@23c7cb18
2023-04-15 18:29:56,762 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@23c7cb18
2023-04-15 18:29:56,762 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:29:56,762 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:29:56,763 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:29:56,763 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@3e2d44f3
2023-04-15 18:29:56,763 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@23afc725
2023-04-15 18:29:56,763 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 18:29:56,763 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 18:29:56,763 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 18:29:56,763 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:29:56,763 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:29:56,763 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:29:56,763 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:29:56,764 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:29:56,764 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:29:56,764 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:29:56,764 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:29:56,764 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:29:56,764 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:29:56,765 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:29:56,765 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:29:56,765 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:29:56,765 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:29:56,765 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:29:56,765 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:29:56,765 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:29:56,765 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:29:56,765 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:29:56,766 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:29:56,766 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:29:56,767 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:29:56,767 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@3eac2e8a
2023-04-15 18:29:56,767 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:29:56,767 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:29:56,767 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:29:56,767 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:29:56,768 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:29:56,768 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:29:56,768 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:29:56,768 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@4fd80300
2023-04-15 18:29:56,768 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@1805383
2023-04-15 18:29:56,768 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@1805383
2023-04-15 18:29:56,768 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:29:56,768 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:29:56,768 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:29:56,768 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@63f2e0b
2023-04-15 18:29:56,768 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@5a06904
2023-04-15 18:29:56,769 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@fabef2e
2023-04-15 18:29:56,769 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@1b4a3a1
2023-04-15 18:29:56,769 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@7e848aea
2023-04-15 18:29:56,769 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@786a3477
2023-04-15 18:29:56,769 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@786a3477
2023-04-15 18:29:56,769 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@286866cb
2023-04-15 18:29:56,769 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@286866cb
2023-04-15 18:29:56,770 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@ce561cc
2023-04-15 18:29:56,770 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@ce561cc
2023-04-15 18:29:56,770 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:29:56,770 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:29:56,770 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:29:56,770 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:29:56,770 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@14b95942
2023-04-15 18:29:56,771 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@3375b118
2023-04-15 18:29:56,771 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@667797f
2023-04-15 18:29:56,771 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@667797f
2023-04-15 18:29:56,771 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@184751f3
2023-04-15 18:29:56,771 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@184751f3
2023-04-15 18:29:56,771 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@46ea78f0
2023-04-15 18:29:56,771 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5889fc44
2023-04-15 18:29:56,771 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@6598caab
2023-04-15 18:29:56,771 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@6598caab
2023-04-15 18:29:56,771 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@47f2c722
2023-04-15 18:29:56,771 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@47f2c722
2023-04-15 18:29:56,771 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:29:56,771 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:29:56,771 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:29:56,772 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:29:56,772 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:29:56,772 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:29:56,772 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@6658f08a
2023-04-15 18:29:56,772 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@37c2f0b4
2023-04-15 18:29:56,773 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@35dcd032
2023-04-15 18:29:56,773 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@35dcd032
2023-04-15 18:29:56,773 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@4522d793
2023-04-15 18:29:56,773 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@4522d793
2023-04-15 18:29:56,774 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@4522d793
2023-04-15 18:29:56,774 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@64dfb31d
2023-04-15 18:29:56,774 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@4438b862
2023-04-15 18:29:56,774 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@17b6ad97
2023-04-15 18:29:56,774 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@17b6ad97
2023-04-15 18:29:56,774 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@44fb6ebd
2023-04-15 18:29:56,775 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@44fb6ebd
2023-04-15 18:29:56,775 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@44fb6ebd
2023-04-15 18:29:56,775 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@5da57a64
2023-04-15 18:29:56,776 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@5da57a64
2023-04-15 18:29:56,776 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@5cdf221a
2023-04-15 18:29:56,776 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@5cdf221a
2023-04-15 18:29:56,777 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@7e27f603
2023-04-15 18:29:56,777 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@7e27f603
2023-04-15 18:29:56,777 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@6136e1fc
2023-04-15 18:29:56,777 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@6136e1fc
2023-04-15 18:29:56,777 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@1736c1e4
2023-04-15 18:29:56,777 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@1736c1e4
2023-04-15 18:29:56,777 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@32dcfeea
2023-04-15 18:29:56,785 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@605c7a9e
2023-04-15 18:29:56,786 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@605c7a9e
2023-04-15 18:29:56,787 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@3ee6dc82
2023-04-15 18:29:56,788 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@3ee6dc82
2023-04-15 18:29:56,789 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@e4ca109
2023-04-15 18:29:56,790 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@15c16f19
2023-04-15 18:29:56,790 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@1a17dd6f
2023-04-15 18:29:56,790 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@be6d228
2023-04-15 18:29:56,790 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@60c96eb4
2023-04-15 18:29:56,790 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@7eee6c13
2023-04-15 18:29:56,790 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@5ab63a04
2023-04-15 18:29:56,790 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@677cc4e8
2023-04-15 18:29:56,790 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@4c6bba7d
2023-04-15 18:29:56,834 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 18:29:57,140 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@299a43d9
2023-04-15 18:29:57,143 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 18:29:57,159 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 18:29:57,161 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 18:29:57,185 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@65ef9a0a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@25216999)
2023-04-15 18:29:57,185 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@77e6761f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5c997de8)
2023-04-15 18:29:57,185 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@45bf93bb) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6b7c4734)
2023-04-15 18:29:57,186 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2f6e92ca) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@380fdcf2)
2023-04-15 18:29:57,186 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@114b203) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@8d810f2)
2023-04-15 18:29:57,186 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@537b3be1) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@15d58530)
2023-04-15 18:29:57,186 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@31f5b923) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@79e2606f)
2023-04-15 18:29:57,186 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@734cf881) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4a890fdd)
2023-04-15 18:29:57,186 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@56299b0e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3ca278bc)
2023-04-15 18:29:57,187 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 18:29:57,187 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 18:29:57,187 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 18:29:57,189 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:29:57,189 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:29:57,191 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@1b28cff
2023-04-15 18:29:57,191 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@e4ca109`
2023-04-15 18:29:57,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:29:57,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:29:57,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:29:57,195 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:29:57,196 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:29:57,196 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:29:57,197 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@76e00bdb] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@7ee2423]
2023-04-15 18:29:57,565 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@76e00bdb] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@2bf4fa1]
2023-04-15 18:29:58,067 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 18:29:58,076 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@2bf4fa1] for TypeConfiguration
2023-04-15 18:29:58,078 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:29:58,130 INFO org.springframework.batch.core.repository.support.JobRepositoryFactoryBean [main] No database type set, using meta data indicating: MYSQL
2023-04-15 18:29:58,146 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] No TaskExecutor has been set, defaulting to synchronous executor.
2023-04-15 18:29:58,217 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:29:58,234 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:29:58,312 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 18:29:58,728 INFO org.apache.coyote.http11.Http11NioProtocol [main] Starting ProtocolHandler ["http-nio-8080"]
2023-04-15 18:29:58,752 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat started on port(s): 8080 (http) with context path ''
2023-04-15 18:29:58,762 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Started BatchType0AApplication in 4.066 seconds (process running for 5.089)
2023-04-15 18:30:20,368 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [http-nio-8080-exec-2] Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-04-15 18:30:20,369 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-2] Initializing Servlet 'dispatcherServlet'
2023-04-15 18:30:20,370 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-2] Completed initialization in 1 ms
2023-04-15 18:30:20,627 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [http-nio-8080-exec-2] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'filePattern':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}]
2023-04-15 18:30:20,689 INFO org.springframework.batch.core.job.SimpleStepHandler [http-nio-8080-exec-2] Executing step: [step1]
2023-04-15 18:31:20,378 ERROR org.springframework.batch.core.step.AbstractStep [http-nio-8080-exec-2] Encountered an error executing step step1 in job importUserJob
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.reader' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Failed to instantiate [org.springframework.batch.item.file.FlatFileItemReader]: Factory method 'reader' threw exception with message: Path must not be null
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:657)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:645)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:365)
	at org.springframework.batch.core.scope.StepScope.get(StepScope.java:111)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:362)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:686)
	at org.springframework.batch.item.file.FlatFileItemReader$$SpringCGLIB$$0.open(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.open(CompositeItemStream.java:124)
	at org.springframework.batch.core.step.tasklet.TaskletStep.open(TaskletStep.java:293)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:224)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at com.yuripe.batchType0A.Controller.BatchController.importFileAndRun(BatchController.java:49)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:563)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.item.file.FlatFileItemReader]: Factory method 'reader' threw exception with message: Path must not be null
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:171)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	... 77 common frames omitted
Caused by: java.lang.IllegalArgumentException: Path must not be null
	at org.springframework.util.Assert.notNull(Assert.java:204)
	at org.springframework.core.io.ClassPathResource.<init>(ClassPathResource.java:86)
	at org.springframework.core.io.ClassPathResource.<init>(ClassPathResource.java:72)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration.reader(BatchConfiguration.java:73)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.CGLIB$reader$0(<generated>)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:258)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.reader(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:139)
	... 78 common frames omitted
2023-04-15 18:31:20,393 INFO org.springframework.batch.core.step.AbstractStep [http-nio-8080-exec-2] Step: [step1] executed in 59s701ms
2023-04-15 18:31:20,402 ERROR org.springframework.batch.core.step.AbstractStep [http-nio-8080-exec-2] Exception while closing step execution resources in step step1 in job importUserJob
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.reader' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Failed to instantiate [org.springframework.batch.item.file.FlatFileItemReader]: Factory method 'reader' threw exception with message: Path must not be null
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:657)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:645)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:365)
	at org.springframework.batch.core.scope.StepScope.get(StepScope.java:111)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:362)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:686)
	at org.springframework.batch.item.file.FlatFileItemReader$$SpringCGLIB$$0.close(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.close(CompositeItemStream.java:111)
	at org.springframework.batch.core.step.tasklet.TaskletStep.close(TaskletStep.java:288)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:310)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at com.yuripe.batchType0A.Controller.BatchController.importFileAndRun(BatchController.java:49)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:563)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.item.file.FlatFileItemReader]: Factory method 'reader' threw exception with message: Path must not be null
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:171)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	... 77 common frames omitted
Caused by: java.lang.IllegalArgumentException: Path must not be null
	at org.springframework.util.Assert.notNull(Assert.java:204)
	at org.springframework.core.io.ClassPathResource.<init>(ClassPathResource.java:86)
	at org.springframework.core.io.ClassPathResource.<init>(ClassPathResource.java:72)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration.reader(BatchConfiguration.java:73)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.CGLIB$reader$0(<generated>)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:258)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.reader(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:139)
	... 78 common frames omitted
2023-04-15 18:31:20,411 INFO com.yuripe.batchType0A.Listener.JobFailureNotificationListener [http-nio-8080-exec-2] !!! JOB FAILED! Time to verify the results
2023-04-15 18:31:20,423 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [http-nio-8080-exec-2] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'filePattern':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}] and the following status: [FAILED] in 59s771ms
2023-04-15 18:32:18,191 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [http-nio-8080-exec-3] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'filePattern':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}]
2023-04-15 18:32:18,233 INFO org.springframework.batch.core.job.SimpleStepHandler [http-nio-8080-exec-3] Executing step: [step1]
2023-04-15 18:32:32,379 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Starting BatchType0AApplication using Java 17.0.2 with PID 10444 (C:\Users\yurip\git\batch0A\batchType0A\target\classes started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 18:32:32,383 INFO com.yuripe.batchType0A.BatchType0AApplication [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 18:32:32,791 INFO org.springframework.batch.core.configuration.annotation.BatchRegistrar [main] Finished Spring Batch infrastructure beans configuration in 2 ms.
2023-04-15 18:32:33,069 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:32:33,070 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 18:32:33,084 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 10 ms. Found 0 JDBC repository interfaces.
2023-04-15 18:32:33,092 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:32:33,092 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 18:32:33,097 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 1 ms. Found 0 JPA repository interfaces.
2023-04-15 18:32:33,449 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8080 (http)
2023-04-15 18:32:33,456 INFO org.apache.coyote.http11.Http11NioProtocol [main] Initializing ProtocolHandler ["http-nio-8080"]
2023-04-15 18:32:33,457 INFO org.apache.catalina.core.StandardService [main] Starting service [Tomcat]
2023-04-15 18:32:33,457 INFO org.apache.catalina.core.StandardEngine [main] Starting Servlet engine: [Apache Tomcat/10.1.7]
2023-04-15 18:32:33,550 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [main] Initializing Spring embedded WebApplicationContext
2023-04-15 18:32:33,551 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 1121 ms
2023-04-15 18:32:33,690 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 18:32:33,739 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 18:32:33,990 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 18:32:34,006 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:32:34,006 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:32:34,006 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:32:34,006 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:32:34,006 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:32:34,006 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:32:34,007 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:32:34,007 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:32:34,007 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:32:34,007 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:32:34,007 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:32:34,007 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:32:34,008 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:32:34,008 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:32:34,008 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:32:34,009 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:32:34,009 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:32:34,009 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:32:34,009 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:32:34,009 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:32:34,009 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@3e2d44f3
2023-04-15 18:32:34,010 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@3e2d44f3
2023-04-15 18:32:34,010 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@23afc725
2023-04-15 18:32:34,010 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 18:32:34,010 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:32:34,010 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:32:34,010 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:32:34,010 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:32:34,010 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:32:34,010 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:32:34,010 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:32:34,011 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:32:34,011 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:32:34,011 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:32:34,011 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:32:34,011 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:32:34,011 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:32:34,011 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:32:34,012 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:32:34,012 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:32:34,012 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:32:34,012 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:32:34,012 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:32:34,012 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:32:34,012 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:32:34,013 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:32:34,013 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:32:34,013 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@3eac2e8a
2023-04-15 18:32:34,014 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@3eac2e8a
2023-04-15 18:32:34,014 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:32:34,015 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:32:34,015 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:32:34,015 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:32:34,015 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:32:34,015 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:32:34,015 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:32:34,015 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@4fd80300
2023-04-15 18:32:34,016 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@1805383
2023-04-15 18:32:34,016 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:32:34,016 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:32:34,016 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:32:34,016 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:32:34,016 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@63f2e0b
2023-04-15 18:32:34,017 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@5a06904
2023-04-15 18:32:34,017 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@fabef2e
2023-04-15 18:32:34,017 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@1b4a3a1
2023-04-15 18:32:34,017 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@7e848aea
2023-04-15 18:32:34,017 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@786a3477
2023-04-15 18:32:34,018 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@286866cb
2023-04-15 18:32:34,018 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@286866cb
2023-04-15 18:32:34,018 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@ce561cc
2023-04-15 18:32:34,018 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@ce561cc
2023-04-15 18:32:34,018 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:32:34,019 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:32:34,019 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:32:34,019 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:32:34,019 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@14b95942
2023-04-15 18:32:34,019 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@14b95942
2023-04-15 18:32:34,020 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3375b118
2023-04-15 18:32:34,020 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@667797f
2023-04-15 18:32:34,020 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@184751f3
2023-04-15 18:32:34,020 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@184751f3
2023-04-15 18:32:34,021 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@46ea78f0
2023-04-15 18:32:34,021 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@46ea78f0
2023-04-15 18:32:34,021 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5889fc44
2023-04-15 18:32:34,021 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6598caab
2023-04-15 18:32:34,021 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@47f2c722
2023-04-15 18:32:34,021 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@47f2c722
2023-04-15 18:32:34,021 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:32:34,021 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:32:34,021 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:32:34,021 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:32:34,021 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:32:34,021 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@6658f08a
2023-04-15 18:32:34,021 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@6658f08a
2023-04-15 18:32:34,021 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@6658f08a
2023-04-15 18:32:34,022 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@37c2f0b4
2023-04-15 18:32:34,022 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@35dcd032
2023-04-15 18:32:34,022 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@4522d793
2023-04-15 18:32:34,022 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@4522d793
2023-04-15 18:32:34,022 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@64dfb31d
2023-04-15 18:32:34,022 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@64dfb31d
2023-04-15 18:32:34,022 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@64dfb31d
2023-04-15 18:32:34,022 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@4438b862
2023-04-15 18:32:34,023 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@17b6ad97
2023-04-15 18:32:34,023 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@44fb6ebd
2023-04-15 18:32:34,023 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@44fb6ebd
2023-04-15 18:32:34,023 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@5da57a64
2023-04-15 18:32:34,023 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@5da57a64
2023-04-15 18:32:34,024 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@5da57a64
2023-04-15 18:32:34,024 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@5cdf221a
2023-04-15 18:32:34,024 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@5cdf221a
2023-04-15 18:32:34,024 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@7e27f603
2023-04-15 18:32:34,025 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@7e27f603
2023-04-15 18:32:34,025 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@6136e1fc
2023-04-15 18:32:34,025 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@6136e1fc
2023-04-15 18:32:34,025 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@1736c1e4
2023-04-15 18:32:34,026 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@1736c1e4
2023-04-15 18:32:34,026 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@32dcfeea
2023-04-15 18:32:34,026 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@32dcfeea
2023-04-15 18:32:34,026 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@738a815c
2023-04-15 18:32:34,032 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@21c75084
2023-04-15 18:32:34,032 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@21c75084
2023-04-15 18:32:34,034 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@2f86f9cf
2023-04-15 18:32:34,034 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@2f86f9cf
2023-04-15 18:32:34,035 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@15c16f19
2023-04-15 18:32:34,035 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1a17dd6f
2023-04-15 18:32:34,036 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@be6d228
2023-04-15 18:32:34,036 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@60c96eb4
2023-04-15 18:32:34,036 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@7eee6c13
2023-04-15 18:32:34,036 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@5ab63a04
2023-04-15 18:32:34,036 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@677cc4e8
2023-04-15 18:32:34,036 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@4c6bba7d
2023-04-15 18:32:34,036 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@41e8d917
2023-04-15 18:32:34,070 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 18:32:34,380 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@ccd000e
2023-04-15 18:32:34,383 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 18:32:34,402 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 18:32:34,403 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 18:32:34,426 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@25216999) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@77e6761f)
2023-04-15 18:32:34,426 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5c997de8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@45bf93bb)
2023-04-15 18:32:34,426 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6b7c4734) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2f6e92ca)
2023-04-15 18:32:34,426 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@380fdcf2) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@114b203)
2023-04-15 18:32:34,426 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@8d810f2) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@537b3be1)
2023-04-15 18:32:34,426 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@15d58530) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@31f5b923)
2023-04-15 18:32:34,426 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@79e2606f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@734cf881)
2023-04-15 18:32:34,427 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4a890fdd) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@56299b0e)
2023-04-15 18:32:34,427 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3ca278bc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@283e1759)
2023-04-15 18:32:34,428 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 18:32:34,428 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 18:32:34,428 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 18:32:34,429 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:32:34,430 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:32:34,432 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@73dbe25
2023-04-15 18:32:34,432 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@15c16f19`
2023-04-15 18:32:34,435 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:32:34,435 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:32:34,435 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:32:34,435 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:32:34,435 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:32:34,435 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:32:34,436 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7ee2423] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@343d1d25]
2023-04-15 18:32:34,812 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7ee2423] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@27210a3b]
2023-04-15 18:32:35,339 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 18:32:35,348 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@27210a3b] for TypeConfiguration
2023-04-15 18:32:35,350 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:32:35,404 INFO org.springframework.batch.core.repository.support.JobRepositoryFactoryBean [main] No database type set, using meta data indicating: MYSQL
2023-04-15 18:32:35,419 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] No TaskExecutor has been set, defaulting to synchronous executor.
2023-04-15 18:32:35,476 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:32:35,486 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:32:35,526 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 18:32:35,956 INFO org.apache.coyote.http11.Http11NioProtocol [main] Starting ProtocolHandler ["http-nio-8080"]
2023-04-15 18:32:35,979 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat started on port(s): 8080 (http) with context path ''
2023-04-15 18:32:35,988 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Started BatchType0AApplication in 3.964 seconds (process running for 5.058)
2023-04-15 18:32:41,065 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [http-nio-8080-exec-2] Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-04-15 18:32:41,066 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-2] Initializing Servlet 'dispatcherServlet'
2023-04-15 18:32:41,066 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-2] Completed initialization in 0 ms
2023-04-15 18:32:41,192 ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] [http-nio-8080-exec-2] Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.batch.core.repository.JobExecutionAlreadyRunningException: A job execution for this job is already running: JobExecution: id=38, version=1, startTime=2023-04-15T18:32:18.192779, endTime=null, lastUpdated=2023-04-15T18:32:18.193772, status=STARTED, exitStatus=exitCode=UNKNOWN;exitDescription=, job=[JobInstance: id=31, version=0, Job=[importUserJob]], jobParameters=[{'filePattern':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}]] with root cause
org.springframework.batch.core.repository.JobExecutionAlreadyRunningException: A job execution for this job is already running: JobExecution: id=38, version=1, startTime=2023-04-15T18:32:18.192779, endTime=null, lastUpdated=2023-04-15T18:32:18.193772, status=STARTED, exitStatus=exitCode=UNKNOWN;exitDescription=, job=[JobInstance: id=31, version=0, Job=[importUserJob]], jobParameters=[{'filePattern':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}]
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:123)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at com.yuripe.batchType0A.Controller.BatchController.importFileAndRun(BatchController.java:49)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:563)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-04-15 18:33:08,874 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Starting BatchType0AApplication using Java 17.0.2 with PID 16400 (C:\Users\yurip\git\batch0A\batchType0A\target\classes started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 18:33:08,877 INFO com.yuripe.batchType0A.BatchType0AApplication [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 18:33:09,305 INFO org.springframework.batch.core.configuration.annotation.BatchRegistrar [main] Finished Spring Batch infrastructure beans configuration in 3 ms.
2023-04-15 18:33:09,654 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:33:09,656 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 18:33:09,674 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 14 ms. Found 0 JDBC repository interfaces.
2023-04-15 18:33:09,681 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:33:09,682 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 18:33:09,687 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 18:33:10,067 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8080 (http)
2023-04-15 18:33:10,086 INFO org.apache.coyote.http11.Http11NioProtocol [main] Initializing ProtocolHandler ["http-nio-8080"]
2023-04-15 18:33:10,087 INFO org.apache.catalina.core.StandardService [main] Starting service [Tomcat]
2023-04-15 18:33:10,087 INFO org.apache.catalina.core.StandardEngine [main] Starting Servlet engine: [Apache Tomcat/10.1.7]
2023-04-15 18:33:10,160 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [main] Initializing Spring embedded WebApplicationContext
2023-04-15 18:33:10,160 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 1228 ms
2023-04-15 18:33:10,346 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 18:33:10,418 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 18:33:10,665 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 18:33:10,679 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@8b670c0
2023-04-15 18:33:10,680 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@8b670c0
2023-04-15 18:33:10,680 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@8b670c0
2023-04-15 18:33:10,680 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@4c2ab536
2023-04-15 18:33:10,680 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@4c2ab536
2023-04-15 18:33:10,680 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@22fb9a2c
2023-04-15 18:33:10,681 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@22fb9a2c
2023-04-15 18:33:10,681 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@2084e65a
2023-04-15 18:33:10,681 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@2084e65a
2023-04-15 18:33:10,681 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@1b8fa2fa
2023-04-15 18:33:10,681 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@1b8fa2fa
2023-04-15 18:33:10,681 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@1b8fa2fa
2023-04-15 18:33:10,682 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@21527b8
2023-04-15 18:33:10,682 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@21527b8
2023-04-15 18:33:10,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@21527b8
2023-04-15 18:33:10,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@1d8e9d3e
2023-04-15 18:33:10,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@1d8e9d3e
2023-04-15 18:33:10,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@1d8e9d3e
2023-04-15 18:33:10,683 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@1d8e9d3e
2023-04-15 18:33:10,684 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@360d41d0
2023-04-15 18:33:10,684 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@4586a8aa
2023-04-15 18:33:10,684 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@4586a8aa
2023-04-15 18:33:10,684 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@3dc82e6a
2023-04-15 18:33:10,684 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@54463380
2023-04-15 18:33:10,685 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@819fb19
2023-04-15 18:33:10,685 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@819fb19
2023-04-15 18:33:10,685 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@819fb19
2023-04-15 18:33:10,685 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@782ac148
2023-04-15 18:33:10,685 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@782ac148
2023-04-15 18:33:10,686 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@782ac148
2023-04-15 18:33:10,686 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:33:10,686 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:33:10,686 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:33:10,686 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:33:10,686 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:33:10,687 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:33:10,687 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:33:10,687 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:33:10,687 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:33:10,687 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:33:10,687 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:33:10,688 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:33:10,688 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:33:10,688 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:33:10,688 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:33:10,688 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:33:10,688 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:33:10,689 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@49cb5030
2023-04-15 18:33:10,689 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@49cb5030
2023-04-15 18:33:10,689 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@23c7cb18
2023-04-15 18:33:10,689 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:33:10,690 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:33:10,690 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:33:10,690 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:33:10,690 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:33:10,690 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:33:10,690 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@3e2d44f3
2023-04-15 18:33:10,690 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@23afc725
2023-04-15 18:33:10,691 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 18:33:10,691 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 18:33:10,691 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:33:10,691 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:33:10,691 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:33:10,691 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:33:10,691 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:33:10,691 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:33:10,692 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:33:10,692 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:33:10,692 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:33:10,693 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:33:10,693 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:33:10,694 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:33:10,694 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@3eac2e8a
2023-04-15 18:33:10,694 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@3eac2e8a
2023-04-15 18:33:10,694 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:33:10,695 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:33:10,695 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:33:10,695 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:33:10,695 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:33:10,695 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@4fd80300
2023-04-15 18:33:10,695 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@1805383
2023-04-15 18:33:10,695 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@1805383
2023-04-15 18:33:10,695 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:33:10,696 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:33:10,696 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:33:10,696 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@63f2e0b
2023-04-15 18:33:10,696 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@5a06904
2023-04-15 18:33:10,696 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@5a06904
2023-04-15 18:33:10,696 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@fabef2e
2023-04-15 18:33:10,696 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@fabef2e
2023-04-15 18:33:10,696 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@1b4a3a1
2023-04-15 18:33:10,696 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@1b4a3a1
2023-04-15 18:33:10,697 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@1b4a3a1
2023-04-15 18:33:10,697 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@7e848aea
2023-04-15 18:33:10,697 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@7e848aea
2023-04-15 18:33:10,697 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@7e848aea
2023-04-15 18:33:10,697 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@786a3477
2023-04-15 18:33:10,697 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@286866cb
2023-04-15 18:33:10,697 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@ce561cc
2023-04-15 18:33:10,698 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@ce561cc
2023-04-15 18:33:10,698 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:33:10,698 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:33:10,698 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:33:10,699 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:33:10,699 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@14b95942
2023-04-15 18:33:10,700 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@3375b118
2023-04-15 18:33:10,700 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@3375b118
2023-04-15 18:33:10,700 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@667797f
2023-04-15 18:33:10,700 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@667797f
2023-04-15 18:33:10,701 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@667797f
2023-04-15 18:33:10,701 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@184751f3
2023-04-15 18:33:10,701 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@184751f3
2023-04-15 18:33:10,702 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@46ea78f0
2023-04-15 18:33:10,702 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@46ea78f0
2023-04-15 18:33:10,702 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@5889fc44
2023-04-15 18:33:10,702 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@5889fc44
2023-04-15 18:33:10,703 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@6598caab
2023-04-15 18:33:10,703 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@6598caab
2023-04-15 18:33:10,703 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@47f2c722
2023-04-15 18:33:10,703 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@47f2c722
2023-04-15 18:33:10,703 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:33:10,709 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@98637a2
2023-04-15 18:33:10,709 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@98637a2
2023-04-15 18:33:10,710 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@75527e36
2023-04-15 18:33:10,710 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@75527e36
2023-04-15 18:33:10,712 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@506aa618
2023-04-15 18:33:10,713 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@4b6b5352
2023-04-15 18:33:10,713 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@1d6713dd
2023-04-15 18:33:10,713 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@3b39e79b
2023-04-15 18:33:10,713 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@3ee6dc82
2023-04-15 18:33:10,713 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@2f86f9cf
2023-04-15 18:33:10,713 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@adafe19
2023-04-15 18:33:10,713 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@7e2bd5e6
2023-04-15 18:33:10,713 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@76a1146d
2023-04-15 18:33:10,748 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 18:33:11,060 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4b360972
2023-04-15 18:33:11,063 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 18:33:11,083 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 18:33:11,084 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 18:33:11,109 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@338a4c61) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@839755f)
2023-04-15 18:33:11,109 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@71d99732) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2328ec73)
2023-04-15 18:33:11,109 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@42a05533) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@17053b5)
2023-04-15 18:33:11,109 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3cad24ae) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@58021c3c)
2023-04-15 18:33:11,110 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@18cbc3c2) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1b25d695)
2023-04-15 18:33:11,110 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4ef8090b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6d31f14)
2023-04-15 18:33:11,110 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@404009df) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@75e4fe3c)
2023-04-15 18:33:11,110 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7bda01da) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@65ef9a0a)
2023-04-15 18:33:11,110 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@25216999) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@77e6761f)
2023-04-15 18:33:11,111 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 18:33:11,112 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 18:33:11,112 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 18:33:11,114 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:33:11,114 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:33:11,116 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@eb91027
2023-04-15 18:33:11,116 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@506aa618`
2023-04-15 18:33:11,120 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:33:11,121 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:33:11,121 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:33:11,121 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:33:11,121 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:33:11,121 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:33:11,122 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@533e2f4] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@436a563f]
2023-04-15 18:33:11,475 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@533e2f4] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@f08f8a9]
2023-04-15 18:33:11,904 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 18:33:11,912 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@f08f8a9] for TypeConfiguration
2023-04-15 18:33:11,914 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:33:11,957 INFO org.springframework.batch.core.repository.support.JobRepositoryFactoryBean [main] No database type set, using meta data indicating: MYSQL
2023-04-15 18:33:11,986 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] No TaskExecutor has been set, defaulting to synchronous executor.
2023-04-15 18:33:12,044 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:33:12,054 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:33:12,092 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 18:33:12,450 INFO org.apache.coyote.http11.Http11NioProtocol [main] Starting ProtocolHandler ["http-nio-8080"]
2023-04-15 18:33:12,476 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat started on port(s): 8080 (http) with context path ''
2023-04-15 18:33:12,484 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Started BatchType0AApplication in 3.965 seconds (process running for 4.985)
2023-04-15 18:33:16,013 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [http-nio-8080-exec-3] Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-04-15 18:33:16,013 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-3] Initializing Servlet 'dispatcherServlet'
2023-04-15 18:33:16,014 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-3] Completed initialization in 0 ms
2023-04-15 18:33:16,207 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [http-nio-8080-exec-3] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'filePattern':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}]
2023-04-15 18:33:16,263 INFO org.springframework.batch.core.job.SimpleStepHandler [http-nio-8080-exec-3] Executing step: [step1]
2023-04-15 18:33:25,360 ERROR org.springframework.batch.core.step.AbstractStep [http-nio-8080-exec-3] Encountered an error executing step step1 in job importUserJob
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.reader' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Failed to instantiate [org.springframework.batch.item.file.FlatFileItemReader]: Factory method 'reader' threw exception with message: Path must not be null
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:657)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:645)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:365)
	at org.springframework.batch.core.scope.StepScope.get(StepScope.java:111)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:362)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:686)
	at org.springframework.batch.item.file.FlatFileItemReader$$SpringCGLIB$$0.open(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.open(CompositeItemStream.java:124)
	at org.springframework.batch.core.step.tasklet.TaskletStep.open(TaskletStep.java:293)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:224)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at com.yuripe.batchType0A.Controller.BatchController.importFileAndRun(BatchController.java:49)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:563)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.item.file.FlatFileItemReader]: Factory method 'reader' threw exception with message: Path must not be null
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:171)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	... 77 common frames omitted
Caused by: java.lang.IllegalArgumentException: Path must not be null
	at org.springframework.util.Assert.notNull(Assert.java:204)
	at org.springframework.core.io.ClassPathResource.<init>(ClassPathResource.java:86)
	at org.springframework.core.io.ClassPathResource.<init>(ClassPathResource.java:72)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration.reader(BatchConfiguration.java:73)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.CGLIB$reader$0(<generated>)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:258)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.reader(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:139)
	... 78 common frames omitted
2023-04-15 18:33:25,368 INFO org.springframework.batch.core.step.AbstractStep [http-nio-8080-exec-3] Step: [step1] executed in 9s105ms
2023-04-15 18:33:25,385 ERROR org.springframework.batch.core.step.AbstractStep [http-nio-8080-exec-3] Exception while closing step execution resources in step step1 in job importUserJob
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.reader' defined in class path resource [com/yuripe/batchType0A/batchprocessing/Configuration/BatchConfiguration.class]: Failed to instantiate [org.springframework.batch.item.file.FlatFileItemReader]: Factory method 'reader' threw exception with message: Path must not be null
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:657)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:645)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:365)
	at org.springframework.batch.core.scope.StepScope.get(StepScope.java:111)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:362)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:686)
	at org.springframework.batch.item.file.FlatFileItemReader$$SpringCGLIB$$0.close(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.close(CompositeItemStream.java:111)
	at org.springframework.batch.core.step.tasklet.TaskletStep.close(TaskletStep.java:288)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:310)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at com.yuripe.batchType0A.Controller.BatchController.importFileAndRun(BatchController.java:49)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:563)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.item.file.FlatFileItemReader]: Factory method 'reader' threw exception with message: Path must not be null
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:171)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	... 77 common frames omitted
Caused by: java.lang.IllegalArgumentException: Path must not be null
	at org.springframework.util.Assert.notNull(Assert.java:204)
	at org.springframework.core.io.ClassPathResource.<init>(ClassPathResource.java:86)
	at org.springframework.core.io.ClassPathResource.<init>(ClassPathResource.java:72)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration.reader(BatchConfiguration.java:73)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.CGLIB$reader$0(<generated>)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:258)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration$$SpringCGLIB$$0.reader(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:139)
	... 78 common frames omitted
2023-04-15 18:33:25,391 INFO com.yuripe.batchType0A.Listener.JobFailureNotificationListener [http-nio-8080-exec-3] !!! JOB FAILED! Time to verify the results
2023-04-15 18:33:25,405 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [http-nio-8080-exec-3] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'filePattern':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}] and the following status: [FAILED] in 9s170ms
2023-04-15 18:38:00,591 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Starting BatchType0AApplication using Java 17.0.2 with PID 5240 (C:\Users\yurip\git\batch0A\batchType0A\target\classes started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 18:38:00,595 INFO com.yuripe.batchType0A.BatchType0AApplication [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 18:38:01,059 INFO org.springframework.batch.core.configuration.annotation.BatchRegistrar [main] Finished Spring Batch infrastructure beans configuration in 5 ms.
2023-04-15 18:38:01,478 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:38:01,479 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 18:38:01,498 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 14 ms. Found 0 JDBC repository interfaces.
2023-04-15 18:38:01,508 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:38:01,509 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 18:38:01,514 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 18:38:01,888 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8080 (http)
2023-04-15 18:38:01,898 INFO org.apache.coyote.http11.Http11NioProtocol [main] Initializing ProtocolHandler ["http-nio-8080"]
2023-04-15 18:38:01,899 INFO org.apache.catalina.core.StandardService [main] Starting service [Tomcat]
2023-04-15 18:38:01,900 INFO org.apache.catalina.core.StandardEngine [main] Starting Servlet engine: [Apache Tomcat/10.1.7]
2023-04-15 18:38:02,007 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [main] Initializing Spring embedded WebApplicationContext
2023-04-15 18:38:02,008 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 1356 ms
2023-04-15 18:38:02,144 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 18:38:02,197 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 18:38:02,459 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 18:38:02,470 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@2b682e9
2023-04-15 18:38:02,471 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@2b682e9
2023-04-15 18:38:02,471 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@2b682e9
2023-04-15 18:38:02,471 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@15586843
2023-04-15 18:38:02,471 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@15586843
2023-04-15 18:38:02,471 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@4fbb1144
2023-04-15 18:38:02,471 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@4fbb1144
2023-04-15 18:38:02,471 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@e2b3026
2023-04-15 18:38:02,472 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@e2b3026
2023-04-15 18:38:02,472 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@38bc5ac0
2023-04-15 18:38:02,472 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@38bc5ac0
2023-04-15 18:38:02,472 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@38bc5ac0
2023-04-15 18:38:02,472 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@6ef037e4
2023-04-15 18:38:02,473 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@6ef037e4
2023-04-15 18:38:02,473 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@6ef037e4
2023-04-15 18:38:02,473 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@749baa0c
2023-04-15 18:38:02,473 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@749baa0c
2023-04-15 18:38:02,473 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@749baa0c
2023-04-15 18:38:02,473 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@749baa0c
2023-04-15 18:38:02,473 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@1b3bec6c
2023-04-15 18:38:02,473 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@53f7a906
2023-04-15 18:38:02,474 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@53f7a906
2023-04-15 18:38:02,474 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@2154652c
2023-04-15 18:38:02,474 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@8b670c0
2023-04-15 18:38:02,474 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@4c2ab536
2023-04-15 18:38:02,474 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@4c2ab536
2023-04-15 18:38:02,474 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@4c2ab536
2023-04-15 18:38:02,474 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@22fb9a2c
2023-04-15 18:38:02,474 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@22fb9a2c
2023-04-15 18:38:02,475 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@22fb9a2c
2023-04-15 18:38:02,475 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2084e65a
2023-04-15 18:38:02,475 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2084e65a
2023-04-15 18:38:02,475 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@2084e65a
2023-04-15 18:38:02,475 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@1b8fa2fa
2023-04-15 18:38:02,476 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@1b8fa2fa
2023-04-15 18:38:02,476 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@1b8fa2fa
2023-04-15 18:38:02,476 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@21527b8
2023-04-15 18:38:02,476 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@21527b8
2023-04-15 18:38:02,476 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@21527b8
2023-04-15 18:38:02,476 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@7cc1f72c
2023-04-15 18:38:02,476 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@7cc1f72c
2023-04-15 18:38:02,477 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7b7068d8
2023-04-15 18:38:02,477 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7b7068d8
2023-04-15 18:38:02,477 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@1d8e9d3e
2023-04-15 18:38:02,477 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@1d8e9d3e
2023-04-15 18:38:02,477 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@1d8e9d3e
2023-04-15 18:38:02,477 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@360d41d0
2023-04-15 18:38:02,477 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@4586a8aa
2023-04-15 18:38:02,478 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@4586a8aa
2023-04-15 18:38:02,478 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@3dc82e6a
2023-04-15 18:38:02,478 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@54463380
2023-04-15 18:38:02,478 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@54463380
2023-04-15 18:38:02,478 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@54463380
2023-04-15 18:38:02,478 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@819fb19
2023-04-15 18:38:02,478 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@819fb19
2023-04-15 18:38:02,478 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@819fb19
2023-04-15 18:38:02,479 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@782ac148
2023-04-15 18:38:02,479 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:38:02,479 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:38:02,479 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:38:02,479 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:38:02,479 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:38:02,479 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:38:02,479 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:38:02,479 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:38:02,480 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:38:02,480 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@49cb5030
2023-04-15 18:38:02,480 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@23c7cb18
2023-04-15 18:38:02,480 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:38:02,481 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:38:02,481 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:38:02,481 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:38:02,481 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@3e2d44f3
2023-04-15 18:38:02,481 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@3e2d44f3
2023-04-15 18:38:02,482 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@23afc725
2023-04-15 18:38:02,482 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@23afc725
2023-04-15 18:38:02,483 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 18:38:02,483 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 18:38:02,483 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:38:02,483 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:38:02,483 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:38:02,483 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:38:02,483 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:38:02,484 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:38:02,484 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:38:02,484 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:38:02,484 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:38:02,484 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:38:02,484 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:38:02,484 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:38:02,484 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:38:02,484 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:38:02,484 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:38:02,484 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@3eac2e8a
2023-04-15 18:38:02,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@3eac2e8a
2023-04-15 18:38:02,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@3eac2e8a
2023-04-15 18:38:02,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:38:02,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:38:02,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:38:02,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:38:02,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@4fd80300
2023-04-15 18:38:02,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@4fd80300
2023-04-15 18:38:02,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@4fd80300
2023-04-15 18:38:02,485 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@1805383
2023-04-15 18:38:02,486 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:38:02,486 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:38:02,486 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:38:02,486 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@63f2e0b
2023-04-15 18:38:02,486 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@63f2e0b
2023-04-15 18:38:02,486 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@63f2e0b
2023-04-15 18:38:02,487 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@5a06904
2023-04-15 18:38:02,488 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@5a06904
2023-04-15 18:38:02,488 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@fabef2e
2023-04-15 18:38:02,489 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@fabef2e
2023-04-15 18:38:02,490 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@1b4a3a1
2023-04-15 18:38:02,490 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@1b4a3a1
2023-04-15 18:38:02,490 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7e848aea
2023-04-15 18:38:02,490 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7e848aea
2023-04-15 18:38:02,490 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@786a3477
2023-04-15 18:38:02,490 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@786a3477
2023-04-15 18:38:02,490 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@286866cb
2023-04-15 18:38:02,497 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@4300e240
2023-04-15 18:38:02,497 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@4300e240
2023-04-15 18:38:02,498 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@6b2ef50e
2023-04-15 18:38:02,498 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@6b2ef50e
2023-04-15 18:38:02,499 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@d16209e
2023-04-15 18:38:02,499 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@75527e36
2023-04-15 18:38:02,499 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@76596288
2023-04-15 18:38:02,499 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@6d815fb7
2023-04-15 18:38:02,500 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@51af8049
2023-04-15 18:38:02,500 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@376af784
2023-04-15 18:38:02,500 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@a9a8ec3
2023-04-15 18:38:02,500 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@6d0114c0
2023-04-15 18:38:02,500 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@40016ce1
2023-04-15 18:38:02,532 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 18:38:02,888 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@72a34537
2023-04-15 18:38:02,891 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 18:38:02,910 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 18:38:02,913 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 18:38:02,938 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1e8bccfb) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@77eb607e)
2023-04-15 18:38:02,939 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1f1fbc9f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@10d4b573)
2023-04-15 18:38:02,939 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@50785f86) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7c3c3d67)
2023-04-15 18:38:02,939 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1e258d3b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2b6fcca1)
2023-04-15 18:38:02,939 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@39f93225) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@24b3f778)
2023-04-15 18:38:02,939 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@164dea80) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4392362c)
2023-04-15 18:38:02,939 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@338a4c61) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@839755f)
2023-04-15 18:38:02,939 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@71d99732) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2328ec73)
2023-04-15 18:38:02,939 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@42a05533) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@17053b5)
2023-04-15 18:38:02,940 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 18:38:02,941 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 18:38:02,945 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 18:38:02,946 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:38:02,946 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:38:02,948 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@6dc9a56e
2023-04-15 18:38:02,948 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@d16209e`
2023-04-15 18:38:02,951 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:38:02,952 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:38:02,952 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:38:02,952 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:38:02,952 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:38:02,952 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:38:02,954 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@45e639ee] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@77f03916]
2023-04-15 18:38:03,339 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@45e639ee] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@7b7cf475]
2023-04-15 18:38:03,842 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 18:38:03,852 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@7b7cf475] for TypeConfiguration
2023-04-15 18:38:03,854 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:38:03,882 WARN org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext [main] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'batchConfiguration': Unsatisfied dependency expressed through field 'stepExecution': No qualifying bean of type 'org.springframework.batch.core.StepExecution' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2023-04-15 18:38:03,882 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:38:03,883 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@7b7cf475] for TypeConfiguration
2023-04-15 18:38:03,883 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@7187078a] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@7b7cf475]
2023-04-15 18:38:03,887 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown initiated...
2023-04-15 18:38:03,898 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown completed.
2023-04-15 18:38:03,900 INFO org.apache.catalina.core.StandardService [main] Stopping service [Tomcat]
2023-04-15 18:38:03,914 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLogger [main] 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2023-04-15 18:38:03,942 ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter [main] 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field stepExecution in com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration required a bean of type 'org.springframework.batch.core.StepExecution' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'org.springframework.batch.core.StepExecution' in your configuration.

2023-04-15 18:40:55,412 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Starting BatchType0AApplication using Java 17.0.2 with PID 17836 (C:\Users\yurip\git\batch0A\batchType0A\target\classes started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 18:40:55,414 INFO com.yuripe.batchType0A.BatchType0AApplication [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 18:40:55,862 INFO org.springframework.batch.core.configuration.annotation.BatchRegistrar [main] Finished Spring Batch infrastructure beans configuration in 3 ms.
2023-04-15 18:40:56,204 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:40:56,206 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 18:40:56,223 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 13 ms. Found 0 JDBC repository interfaces.
2023-04-15 18:40:56,233 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:40:56,234 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 18:40:56,239 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 18:40:56,630 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8080 (http)
2023-04-15 18:40:56,639 INFO org.apache.coyote.http11.Http11NioProtocol [main] Initializing ProtocolHandler ["http-nio-8080"]
2023-04-15 18:40:56,640 INFO org.apache.catalina.core.StandardService [main] Starting service [Tomcat]
2023-04-15 18:40:56,640 INFO org.apache.catalina.core.StandardEngine [main] Starting Servlet engine: [Apache Tomcat/10.1.7]
2023-04-15 18:40:56,739 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [main] Initializing Spring embedded WebApplicationContext
2023-04-15 18:40:56,740 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 1274 ms
2023-04-15 18:40:56,926 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 18:40:56,985 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 18:40:57,224 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 18:40:57,240 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:40:57,241 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:40:57,241 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:40:57,241 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:40:57,241 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:40:57,242 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:40:57,242 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:40:57,242 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:40:57,242 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:40:57,243 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:40:57,243 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:40:57,243 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:40:57,245 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:40:57,245 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:40:57,245 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:40:57,245 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:40:57,246 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:40:57,246 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:40:57,246 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:40:57,246 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:40:57,246 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@3e2d44f3
2023-04-15 18:40:57,246 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@3e2d44f3
2023-04-15 18:40:57,247 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@23afc725
2023-04-15 18:40:57,247 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 18:40:57,247 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:40:57,247 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:40:57,247 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:40:57,247 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:40:57,248 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:40:57,248 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:40:57,248 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:40:57,248 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:40:57,248 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:40:57,248 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:40:57,248 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:40:57,249 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:40:57,249 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:40:57,249 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:40:57,249 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:40:57,249 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:40:57,249 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:40:57,249 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:40:57,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:40:57,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:40:57,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:40:57,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:40:57,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:40:57,250 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@3eac2e8a
2023-04-15 18:40:57,251 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@3eac2e8a
2023-04-15 18:40:57,251 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:40:57,251 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:40:57,251 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:40:57,251 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:40:57,251 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:40:57,252 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:40:57,252 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:40:57,252 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@4fd80300
2023-04-15 18:40:57,252 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@1805383
2023-04-15 18:40:57,252 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:40:57,252 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:40:57,252 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:40:57,253 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:40:57,253 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@63f2e0b
2023-04-15 18:40:57,253 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@5a06904
2023-04-15 18:40:57,253 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@fabef2e
2023-04-15 18:40:57,253 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@1b4a3a1
2023-04-15 18:40:57,253 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@7e848aea
2023-04-15 18:40:57,253 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@786a3477
2023-04-15 18:40:57,254 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@286866cb
2023-04-15 18:40:57,255 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@286866cb
2023-04-15 18:40:57,255 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@ce561cc
2023-04-15 18:40:57,255 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@ce561cc
2023-04-15 18:40:57,255 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:40:57,255 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:40:57,255 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:40:57,255 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:40:57,256 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@14b95942
2023-04-15 18:40:57,256 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@14b95942
2023-04-15 18:40:57,256 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3375b118
2023-04-15 18:40:57,256 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@667797f
2023-04-15 18:40:57,256 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@184751f3
2023-04-15 18:40:57,256 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@184751f3
2023-04-15 18:40:57,256 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@46ea78f0
2023-04-15 18:40:57,257 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@46ea78f0
2023-04-15 18:40:57,257 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5889fc44
2023-04-15 18:40:57,257 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6598caab
2023-04-15 18:40:57,257 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@47f2c722
2023-04-15 18:40:57,257 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@47f2c722
2023-04-15 18:40:57,257 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:40:57,257 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@52ca0ad4
2023-04-15 18:40:57,257 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:40:57,257 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:40:57,257 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@4536a715
2023-04-15 18:40:57,257 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@6658f08a
2023-04-15 18:40:57,257 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@6658f08a
2023-04-15 18:40:57,258 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@6658f08a
2023-04-15 18:40:57,258 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@37c2f0b4
2023-04-15 18:40:57,258 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@35dcd032
2023-04-15 18:40:57,258 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@4522d793
2023-04-15 18:40:57,258 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@4522d793
2023-04-15 18:40:57,258 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@64dfb31d
2023-04-15 18:40:57,258 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@64dfb31d
2023-04-15 18:40:57,258 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@64dfb31d
2023-04-15 18:40:57,258 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@4438b862
2023-04-15 18:40:57,259 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@17b6ad97
2023-04-15 18:40:57,259 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@44fb6ebd
2023-04-15 18:40:57,259 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@44fb6ebd
2023-04-15 18:40:57,259 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@5da57a64
2023-04-15 18:40:57,260 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@5da57a64
2023-04-15 18:40:57,260 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@5da57a64
2023-04-15 18:40:57,261 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@5cdf221a
2023-04-15 18:40:57,262 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@5cdf221a
2023-04-15 18:40:57,262 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@7e27f603
2023-04-15 18:40:57,263 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@7e27f603
2023-04-15 18:40:57,263 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@6136e1fc
2023-04-15 18:40:57,263 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@6136e1fc
2023-04-15 18:40:57,263 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@1736c1e4
2023-04-15 18:40:57,263 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@1736c1e4
2023-04-15 18:40:57,263 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@32dcfeea
2023-04-15 18:40:57,263 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@32dcfeea
2023-04-15 18:40:57,264 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@738a815c
2023-04-15 18:40:57,270 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@21c75084
2023-04-15 18:40:57,270 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@21c75084
2023-04-15 18:40:57,271 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@2f86f9cf
2023-04-15 18:40:57,271 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@2f86f9cf
2023-04-15 18:40:57,272 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@15c16f19
2023-04-15 18:40:57,272 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1a17dd6f
2023-04-15 18:40:57,273 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@be6d228
2023-04-15 18:40:57,273 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@60c96eb4
2023-04-15 18:40:57,273 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@7eee6c13
2023-04-15 18:40:57,273 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@5ab63a04
2023-04-15 18:40:57,273 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@677cc4e8
2023-04-15 18:40:57,273 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@4c6bba7d
2023-04-15 18:40:57,273 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@41e8d917
2023-04-15 18:40:57,306 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 18:40:57,650 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@ccd000e
2023-04-15 18:40:57,653 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 18:40:57,672 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 18:40:57,674 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 18:40:57,704 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@65ef9a0a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@25216999)
2023-04-15 18:40:57,704 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@77e6761f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5c997de8)
2023-04-15 18:40:57,705 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@45bf93bb) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6b7c4734)
2023-04-15 18:40:57,705 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2f6e92ca) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@380fdcf2)
2023-04-15 18:40:57,705 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@114b203) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@8d810f2)
2023-04-15 18:40:57,705 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@537b3be1) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@15d58530)
2023-04-15 18:40:57,705 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@31f5b923) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@79e2606f)
2023-04-15 18:40:57,705 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@734cf881) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4a890fdd)
2023-04-15 18:40:57,705 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@56299b0e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3ca278bc)
2023-04-15 18:40:57,706 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 18:40:57,707 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 18:40:57,707 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 18:40:57,708 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:40:57,709 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:40:57,711 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@1b28cff
2023-04-15 18:40:57,711 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@15c16f19`
2023-04-15 18:40:57,715 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:40:57,715 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:40:57,715 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:40:57,715 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:40:57,715 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:40:57,715 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:40:57,716 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@76e00bdb] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@7ee2423]
2023-04-15 18:40:58,118 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@76e00bdb] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@2bf4fa1]
2023-04-15 18:40:58,603 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 18:40:58,612 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@2bf4fa1] for TypeConfiguration
2023-04-15 18:40:58,614 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:40:58,629 WARN org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext [main] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'batchConfiguration': Unsatisfied dependency expressed through field 'jobExecution': No qualifying bean of type 'org.springframework.batch.core.JobExecution' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2023-04-15 18:40:58,629 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:40:58,630 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@2bf4fa1] for TypeConfiguration
2023-04-15 18:40:58,630 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@662d3e85] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@2bf4fa1]
2023-04-15 18:40:58,635 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown initiated...
2023-04-15 18:40:58,652 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown completed.
2023-04-15 18:40:58,654 INFO org.apache.catalina.core.StandardService [main] Stopping service [Tomcat]
2023-04-15 18:40:58,669 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLogger [main] 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2023-04-15 18:40:58,700 ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter [main] 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field jobExecution in com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration required a bean of type 'org.springframework.batch.core.JobExecution' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'org.springframework.batch.core.JobExecution' in your configuration.

2023-04-15 18:41:56,460 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Starting BatchType0AApplication using Java 17.0.2 with PID 12148 (C:\Users\yurip\git\batch0A\batchType0A\target\classes started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 18:41:56,463 INFO com.yuripe.batchType0A.BatchType0AApplication [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 18:41:57,029 INFO org.springframework.batch.core.configuration.annotation.BatchRegistrar [main] Finished Spring Batch infrastructure beans configuration in 7 ms.
2023-04-15 18:41:57,532 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:41:57,534 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 18:41:57,551 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 13 ms. Found 0 JDBC repository interfaces.
2023-04-15 18:41:57,559 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:41:57,560 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 18:41:57,567 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 18:41:57,973 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8080 (http)
2023-04-15 18:41:57,990 INFO org.apache.coyote.http11.Http11NioProtocol [main] Initializing ProtocolHandler ["http-nio-8080"]
2023-04-15 18:41:57,991 INFO org.apache.catalina.core.StandardService [main] Starting service [Tomcat]
2023-04-15 18:41:57,992 INFO org.apache.catalina.core.StandardEngine [main] Starting Servlet engine: [Apache Tomcat/10.1.7]
2023-04-15 18:41:58,087 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [main] Initializing Spring embedded WebApplicationContext
2023-04-15 18:41:58,087 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 1571 ms
2023-04-15 18:41:58,236 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 18:41:58,296 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 18:41:58,506 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 18:41:58,518 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@2b682e9
2023-04-15 18:41:58,519 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@2b682e9
2023-04-15 18:41:58,519 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@2b682e9
2023-04-15 18:41:58,519 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@15586843
2023-04-15 18:41:58,520 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@15586843
2023-04-15 18:41:58,520 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@4fbb1144
2023-04-15 18:41:58,520 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@4fbb1144
2023-04-15 18:41:58,520 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@e2b3026
2023-04-15 18:41:58,520 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@e2b3026
2023-04-15 18:41:58,521 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@38bc5ac0
2023-04-15 18:41:58,521 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@38bc5ac0
2023-04-15 18:41:58,521 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@38bc5ac0
2023-04-15 18:41:58,521 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@6ef037e4
2023-04-15 18:41:58,522 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@6ef037e4
2023-04-15 18:41:58,522 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@6ef037e4
2023-04-15 18:41:58,522 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@749baa0c
2023-04-15 18:41:58,522 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@749baa0c
2023-04-15 18:41:58,522 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@749baa0c
2023-04-15 18:41:58,522 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@749baa0c
2023-04-15 18:41:58,523 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@1b3bec6c
2023-04-15 18:41:58,523 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@53f7a906
2023-04-15 18:41:58,523 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@53f7a906
2023-04-15 18:41:58,523 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@2154652c
2023-04-15 18:41:58,523 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@8b670c0
2023-04-15 18:41:58,523 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@4c2ab536
2023-04-15 18:41:58,523 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@4c2ab536
2023-04-15 18:41:58,524 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@4c2ab536
2023-04-15 18:41:58,524 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@22fb9a2c
2023-04-15 18:41:58,524 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@22fb9a2c
2023-04-15 18:41:58,524 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@22fb9a2c
2023-04-15 18:41:58,524 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2084e65a
2023-04-15 18:41:58,524 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@2084e65a
2023-04-15 18:41:58,524 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@2084e65a
2023-04-15 18:41:58,524 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@1b8fa2fa
2023-04-15 18:41:58,525 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@1b8fa2fa
2023-04-15 18:41:58,525 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@1b8fa2fa
2023-04-15 18:41:58,525 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@21527b8
2023-04-15 18:41:58,525 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@21527b8
2023-04-15 18:41:58,525 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@21527b8
2023-04-15 18:41:58,525 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@7cc1f72c
2023-04-15 18:41:58,525 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@7cc1f72c
2023-04-15 18:41:58,525 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7b7068d8
2023-04-15 18:41:58,526 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7b7068d8
2023-04-15 18:41:58,526 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@1d8e9d3e
2023-04-15 18:41:58,526 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@1d8e9d3e
2023-04-15 18:41:58,527 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@1d8e9d3e
2023-04-15 18:41:58,527 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@360d41d0
2023-04-15 18:41:58,527 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@4586a8aa
2023-04-15 18:41:58,528 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@4586a8aa
2023-04-15 18:41:58,528 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@3dc82e6a
2023-04-15 18:41:58,528 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@54463380
2023-04-15 18:41:58,529 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@54463380
2023-04-15 18:41:58,529 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@54463380
2023-04-15 18:41:58,529 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@819fb19
2023-04-15 18:41:58,529 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@819fb19
2023-04-15 18:41:58,529 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@819fb19
2023-04-15 18:41:58,529 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@782ac148
2023-04-15 18:41:58,529 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:41:58,529 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:41:58,529 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:41:58,529 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:41:58,530 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:41:58,530 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:41:58,530 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:41:58,530 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:41:58,530 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:41:58,530 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@49cb5030
2023-04-15 18:41:58,530 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@23c7cb18
2023-04-15 18:41:58,531 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:41:58,531 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:41:58,531 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:41:58,532 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:41:58,532 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@3e2d44f3
2023-04-15 18:41:58,532 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@3e2d44f3
2023-04-15 18:41:58,532 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@23afc725
2023-04-15 18:41:58,532 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@23afc725
2023-04-15 18:41:58,532 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 18:41:58,532 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 18:41:58,532 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:41:58,532 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:41:58,532 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:41:58,533 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:41:58,533 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:41:58,533 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:41:58,533 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:41:58,533 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:41:58,533 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:41:58,533 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:41:58,534 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:41:58,534 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:41:58,534 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:41:58,534 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:41:58,534 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:41:58,534 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@3eac2e8a
2023-04-15 18:41:58,534 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@3eac2e8a
2023-04-15 18:41:58,534 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@3eac2e8a
2023-04-15 18:41:58,534 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:41:58,534 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:41:58,535 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:41:58,535 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:41:58,535 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@4fd80300
2023-04-15 18:41:58,535 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@4fd80300
2023-04-15 18:41:58,535 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@4fd80300
2023-04-15 18:41:58,535 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@1805383
2023-04-15 18:41:58,535 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:41:58,536 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:41:58,536 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:41:58,536 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@63f2e0b
2023-04-15 18:41:58,536 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@63f2e0b
2023-04-15 18:41:58,537 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@63f2e0b
2023-04-15 18:41:58,537 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@5a06904
2023-04-15 18:41:58,537 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@5a06904
2023-04-15 18:41:58,537 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@fabef2e
2023-04-15 18:41:58,537 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@fabef2e
2023-04-15 18:41:58,538 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@1b4a3a1
2023-04-15 18:41:58,538 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@1b4a3a1
2023-04-15 18:41:58,538 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7e848aea
2023-04-15 18:41:58,539 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7e848aea
2023-04-15 18:41:58,539 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@786a3477
2023-04-15 18:41:58,539 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@786a3477
2023-04-15 18:41:58,539 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@286866cb
2023-04-15 18:41:58,546 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@4300e240
2023-04-15 18:41:58,547 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@4300e240
2023-04-15 18:41:58,548 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@6b2ef50e
2023-04-15 18:41:58,548 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@6b2ef50e
2023-04-15 18:41:58,549 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@d16209e
2023-04-15 18:41:58,550 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@75527e36
2023-04-15 18:41:58,550 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@76596288
2023-04-15 18:41:58,550 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@6d815fb7
2023-04-15 18:41:58,550 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@51af8049
2023-04-15 18:41:58,550 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@376af784
2023-04-15 18:41:58,550 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@a9a8ec3
2023-04-15 18:41:58,550 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@6d0114c0
2023-04-15 18:41:58,550 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@40016ce1
2023-04-15 18:41:58,582 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 18:41:58,947 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@72a34537
2023-04-15 18:41:58,951 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 18:41:58,981 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 18:41:58,984 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 18:41:59,023 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1e8bccfb) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@77eb607e)
2023-04-15 18:41:59,024 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1f1fbc9f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@10d4b573)
2023-04-15 18:41:59,024 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@50785f86) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7c3c3d67)
2023-04-15 18:41:59,024 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1e258d3b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2b6fcca1)
2023-04-15 18:41:59,024 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@39f93225) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@24b3f778)
2023-04-15 18:41:59,025 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@164dea80) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4392362c)
2023-04-15 18:41:59,025 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@338a4c61) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@839755f)
2023-04-15 18:41:59,025 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@71d99732) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2328ec73)
2023-04-15 18:41:59,025 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@42a05533) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@17053b5)
2023-04-15 18:41:59,026 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 18:41:59,026 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 18:41:59,027 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 18:41:59,032 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:41:59,032 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:41:59,034 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@6dc9a56e
2023-04-15 18:41:59,035 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@d16209e`
2023-04-15 18:41:59,040 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:41:59,040 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:41:59,040 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:41:59,040 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:41:59,040 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:41:59,040 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:41:59,044 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@45e639ee] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@77f03916]
2023-04-15 18:41:59,490 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@45e639ee] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@7b7cf475]
2023-04-15 18:41:59,952 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 18:41:59,959 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@7b7cf475] for TypeConfiguration
2023-04-15 18:41:59,961 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:41:59,975 WARN org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext [main] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'batchConfiguration': Unsatisfied dependency expressed through field 'stepExecution': No qualifying bean of type 'org.springframework.batch.core.StepExecution' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2023-04-15 18:41:59,976 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Closing JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:41:59,976 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@7b7cf475] for TypeConfiguration
2023-04-15 18:41:59,976 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@7187078a] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@7b7cf475]
2023-04-15 18:41:59,980 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown initiated...
2023-04-15 18:41:59,990 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Shutdown completed.
2023-04-15 18:41:59,992 INFO org.apache.catalina.core.StandardService [main] Stopping service [Tomcat]
2023-04-15 18:42:00,004 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLogger [main] 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2023-04-15 18:42:00,034 ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter [main] 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field stepExecution in com.yuripe.batchType0A.batchprocessing.Configuration.BatchConfiguration required a bean of type 'org.springframework.batch.core.StepExecution' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'org.springframework.batch.core.StepExecution' in your configuration.

2023-04-15 18:46:07,043 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Starting BatchType0AApplication using Java 17.0.2 with PID 16336 (C:\Users\yurip\git\batch0A\batchType0A\target\classes started by yurip in C:\Users\yurip\git\batch0A\batchType0A)
2023-04-15 18:46:07,046 INFO com.yuripe.batchType0A.BatchType0AApplication [main] No active profile set, falling back to 1 default profile: "default"
2023-04-15 18:46:07,477 INFO org.springframework.batch.core.configuration.annotation.BatchRegistrar [main] Finished Spring Batch infrastructure beans configuration in 4 ms.
2023-04-15 18:46:07,853 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:46:07,855 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-04-15 18:46:07,876 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 16 ms. Found 0 JDBC repository interfaces.
2023-04-15 18:46:07,886 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode
2023-04-15 18:46:07,887 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-04-15 18:46:07,892 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 2 ms. Found 0 JPA repository interfaces.
2023-04-15 18:46:08,311 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat initialized with port(s): 8080 (http)
2023-04-15 18:46:08,320 INFO org.apache.coyote.http11.Http11NioProtocol [main] Initializing ProtocolHandler ["http-nio-8080"]
2023-04-15 18:46:08,321 INFO org.apache.catalina.core.StandardService [main] Starting service [Tomcat]
2023-04-15 18:46:08,322 INFO org.apache.catalina.core.StandardEngine [main] Starting Servlet engine: [Apache Tomcat/10.1.7]
2023-04-15 18:46:08,426 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [main] Initializing Spring embedded WebApplicationContext
2023-04-15 18:46:08,426 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [main] Root WebApplicationContext: initialization completed in 1323 ms
2023-04-15 18:46:08,587 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [name: default]
2023-04-15 18:46:08,637 INFO org.hibernate.Version [main] HHH000412: Hibernate ORM core version 6.1.7.Final
2023-04-15 18:46:08,942 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(FloatTypeDescriptor) replaced previous registration(DoubleTypeDescriptor)
2023-04-15 18:46:08,957 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@749baa0c
2023-04-15 18:46:08,958 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@749baa0c
2023-04-15 18:46:08,958 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@749baa0c
2023-04-15 18:46:08,958 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@1b3bec6c
2023-04-15 18:46:08,958 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@1b3bec6c
2023-04-15 18:46:08,959 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@53f7a906
2023-04-15 18:46:08,959 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@53f7a906
2023-04-15 18:46:08,959 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@2154652c
2023-04-15 18:46:08,959 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@2154652c
2023-04-15 18:46:08,960 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@8b670c0
2023-04-15 18:46:08,960 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte -> org.hibernate.type.BasicTypeReference@8b670c0
2023-04-15 18:46:08,960 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@8b670c0
2023-04-15 18:46:08,960 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary -> org.hibernate.type.BasicTypeReference@4c2ab536
2023-04-15 18:46:08,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@4c2ab536
2023-04-15 18:46:08,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [B -> org.hibernate.type.BasicTypeReference@4c2ab536
2023-04-15 18:46:08,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@1b8fa2fa
2023-04-15 18:46:08,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@1b8fa2fa
2023-04-15 18:46:08,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Byte[] -> org.hibernate.type.BasicTypeReference@1b8fa2fa
2023-04-15 18:46:08,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.BasicTypeReference@1b8fa2fa
2023-04-15 18:46:08,961 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration image -> org.hibernate.type.BasicTypeReference@21527b8
2023-04-15 18:46:08,962 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration blob -> org.hibernate.type.BasicTypeReference@7cc1f72c
2023-04-15 18:46:08,962 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@7cc1f72c
2023-04-15 18:46:08,962 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@7b7068d8
2023-04-15 18:46:08,962 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@1d8e9d3e
2023-04-15 18:46:08,962 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@360d41d0
2023-04-15 18:46:08,962 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration short -> org.hibernate.type.BasicTypeReference@360d41d0
2023-04-15 18:46:08,962 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@360d41d0
2023-04-15 18:46:08,962 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration integer -> org.hibernate.type.BasicTypeReference@4586a8aa
2023-04-15 18:46:08,963 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration int -> org.hibernate.type.BasicTypeReference@4586a8aa
2023-04-15 18:46:08,963 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@4586a8aa
2023-04-15 18:46:08,963 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@3dc82e6a
2023-04-15 18:46:08,963 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration long -> org.hibernate.type.BasicTypeReference@3dc82e6a
2023-04-15 18:46:08,963 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@3dc82e6a
2023-04-15 18:46:08,963 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@54463380
2023-04-15 18:46:08,963 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration float -> org.hibernate.type.BasicTypeReference@54463380
2023-04-15 18:46:08,963 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@54463380
2023-04-15 18:46:08,964 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@819fb19
2023-04-15 18:46:08,964 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration double -> org.hibernate.type.BasicTypeReference@819fb19
2023-04-15 18:46:08,964 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@819fb19
2023-04-15 18:46:08,964 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@782ac148
2023-04-15 18:46:08,965 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@782ac148
2023-04-15 18:46:08,965 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:46:08,965 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@46d1b59
2023-04-15 18:46:08,965 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:46:08,965 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:46:08,965 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@61d2f267
2023-04-15 18:46:08,966 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@26d40c77
2023-04-15 18:46:08,966 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration string -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:46:08,966 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@85ab964
2023-04-15 18:46:08,966 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@6481dce5
2023-04-15 18:46:08,967 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration characters -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:46:08,967 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:46:08,968 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [C -> org.hibernate.type.BasicTypeReference@12365bd8
2023-04-15 18:46:08,968 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:46:08,968 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration [Ljava.lang.Character; -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:46:08,968 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Character[] -> org.hibernate.type.BasicTypeReference@14874a5d
2023-04-15 18:46:08,968 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration text -> org.hibernate.type.BasicTypeReference@49cb5030
2023-04-15 18:46:08,968 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@23c7cb18
2023-04-15 18:46:08,969 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration clob -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:46:08,969 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@30fbc23
2023-04-15 18:46:08,969 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:46:08,969 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@2d74cbbd
2023-04-15 18:46:08,969 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@3e2d44f3
2023-04-15 18:46:08,969 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@23afc725
2023-04-15 18:46:08,970 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@5d3f99d7
2023-04-15 18:46:08,971 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@561d88ee
2023-04-15 18:46:08,971 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@2c34402
2023-04-15 18:46:08,971 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@5f883d90
2023-04-15 18:46:08,972 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:46:08,972 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@7e58f697
2023-04-15 18:46:08,972 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:46:08,973 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@44384b4a
2023-04-15 18:46:08,973 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:46:08,973 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@5cc3e49b
2023-04-15 18:46:08,973 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:46:08,973 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@4239262e
2023-04-15 18:46:08,973 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:46:08,973 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@7bec8cb0
2023-04-15 18:46:08,973 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7d88fa9c
2023-04-15 18:46:08,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@3eac2e8a
2023-04-15 18:46:08,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:46:08,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@352f6727
2023-04-15 18:46:08,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:46:08,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@2ab9e43e
2023-04-15 18:46:08,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@10dfa7ef
2023-04-15 18:46:08,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@4fd80300
2023-04-15 18:46:08,974 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration date -> org.hibernate.type.BasicTypeReference@1805383
2023-04-15 18:46:08,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@1805383
2023-04-15 18:46:08,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration time -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:46:08,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@64fdcf99
2023-04-15 18:46:08,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:46:08,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:46:08,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@9f0fc36
2023-04-15 18:46:08,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@63f2e0b
2023-04-15 18:46:08,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@63f2e0b
2023-04-15 18:46:08,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@63f2e0b
2023-04-15 18:46:08,975 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@5a06904
2023-04-15 18:46:08,976 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@fabef2e
2023-04-15 18:46:08,976 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration instant -> org.hibernate.type.BasicTypeReference@1b4a3a1
2023-04-15 18:46:08,976 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@1b4a3a1
2023-04-15 18:46:08,976 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@7e848aea
2023-04-15 18:46:08,976 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@7e848aea
2023-04-15 18:46:08,976 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@7e848aea
2023-04-15 18:46:08,976 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@786a3477
2023-04-15 18:46:08,976 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@286866cb
2023-04-15 18:46:08,977 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration class -> org.hibernate.type.BasicTypeReference@ce561cc
2023-04-15 18:46:08,977 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@ce561cc
2023-04-15 18:46:08,977 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration currency -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:46:08,978 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:46:08,978 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@56ec6960
2023-04-15 18:46:08,979 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration locale -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:46:08,979 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@7f8c3646
2023-04-15 18:46:08,979 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@14b95942
2023-04-15 18:46:08,979 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@14b95942
2023-04-15 18:46:08,979 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@3375b118
2023-04-15 18:46:08,980 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@3375b118
2023-04-15 18:46:08,980 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@667797f
2023-04-15 18:46:08,980 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@667797f
2023-04-15 18:46:08,980 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration url -> org.hibernate.type.BasicTypeReference@184751f3
2023-04-15 18:46:08,980 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@184751f3
2023-04-15 18:46:08,980 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@46ea78f0
2023-04-15 18:46:08,988 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@2a6fb62f
2023-04-15 18:46:08,988 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@2a6fb62f
2023-04-15 18:46:08,989 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration object -> org.hibernate.type.JavaObjectType@45e7bb79
2023-04-15 18:46:08,990 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@45e7bb79
2023-04-15 18:46:08,991 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@40016ce1
2023-04-15 18:46:08,991 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@203765b2
2023-04-15 18:46:08,991 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@7e050be1
2023-04-15 18:46:08,991 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@1b47b7f5
2023-04-15 18:46:08,991 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@506aa618
2023-04-15 18:46:08,991 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@4b6b5352
2023-04-15 18:46:08,991 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@1d6713dd
2023-04-15 18:46:08,991 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@3b39e79b
2023-04-15 18:46:08,991 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@3ee6dc82
2023-04-15 18:46:09,025 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2023-04-15 18:46:09,371 INFO com.zaxxer.hikari.pool.HikariPool [main] HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@67a6a2d0
2023-04-15 18:46:09,374 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2023-04-15 18:46:09,398 INFO SQL dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-04-15 18:46:09,401 WARN org.hibernate.orm.deprecation [main] HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2023-04-15 18:46:09,429 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@39f93225) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@24b3f778)
2023-04-15 18:46:09,430 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@164dea80) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4392362c)
2023-04-15 18:46:09,430 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@338a4c61) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@839755f)
2023-04-15 18:46:09,430 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@71d99732) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2328ec73)
2023-04-15 18:46:09,430 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@42a05533) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@17053b5)
2023-04-15 18:46:09,431 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3cad24ae) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@58021c3c)
2023-04-15 18:46:09,431 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@18cbc3c2) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1b25d695)
2023-04-15 18:46:09,431 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4ef8090b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6d31f14)
2023-04-15 18:46:09,431 DEBUG org.hibernate.type.descriptor.sql.spi.DdlTypeRegistry [main] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@404009df) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@75e4fe3c)
2023-04-15 18:46:09,432 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-04-15 18:46:09,432 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-04-15 18:46:09,433 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-04-15 18:46:09,434 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:46:09,434 DEBUG org.hibernate.type.descriptor.jdbc.spi.JdbcTypeRegistry [main] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-04-15 18:46:09,438 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration null -> org.hibernate.type.NullType@4ef31221
2023-04-15 18:46:09,438 DEBUG org.hibernate.type.BasicTypeRegistry [main] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@40016ce1`
2023-04-15 18:46:09,442 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:46:09,442 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:46:09,443 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,93)
2023-04-15 18:46:09,443 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:46:09,443 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:46:09,444 DEBUG org.hibernate.type.BasicTypeRegistry [main] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,93)
2023-04-15 18:46:09,445 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@6d9428f3] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@4ac19bc6]
2023-04-15 18:46:09,785 DEBUG org.hibernate.type.spi.TypeConfiguration$Scope [main] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@6d9428f3] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@621a387f]
2023-04-15 18:46:10,233 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator [main] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-04-15 18:46:10,244 TRACE org.hibernate.type.spi.TypeConfiguration$Scope [main] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@621a387f] for TypeConfiguration
2023-04-15 18:46:10,247 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-04-15 18:46:10,308 INFO org.springframework.batch.core.repository.support.JobRepositoryFactoryBean [main] No database type set, using meta data indicating: MYSQL
2023-04-15 18:46:10,325 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [main] No TaskExecutor has been set, defaulting to synchronous executor.
2023-04-15 18:46:10,386 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:46:10,399 INFO org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor [main] No Micrometer observation registry found, defaulting to ObservationRegistry.NOOP
2023-04-15 18:46:10,442 WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration [main] spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-04-15 18:46:10,871 INFO org.apache.coyote.http11.Http11NioProtocol [main] Starting ProtocolHandler ["http-nio-8080"]
2023-04-15 18:46:10,895 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [main] Tomcat started on port(s): 8080 (http) with context path ''
2023-04-15 18:46:10,905 INFO com.yuripe.batchType0A.BatchType0AApplication [main] Started BatchType0AApplication in 4.311 seconds (process running for 5.547)
2023-04-15 18:46:14,660 INFO org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [http-nio-8080-exec-2] Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-04-15 18:46:14,661 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-2] Initializing Servlet 'dispatcherServlet'
2023-04-15 18:46:14,662 INFO org.springframework.web.servlet.DispatcherServlet [http-nio-8080-exec-2] Completed initialization in 1 ms
2023-04-15 18:46:14,871 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [http-nio-8080-exec-2] Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{'filePattern':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}]
2023-04-15 18:46:14,929 INFO org.springframework.batch.core.job.SimpleStepHandler [http-nio-8080-exec-2] Executing step: [step1]
2023-04-15 18:46:38,990 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [http-nio-8080-exec-2] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Tue Jul 01 00:00:00 CEST 2025"
	  }]
})
2023-04-15 18:46:38,991 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [http-nio-8080-exec-2] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Wed Jul 02 00:00:00 CEST 2025"
	  }]
})
2023-04-15 18:46:38,992 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [http-nio-8080-exec-2] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Thu Jul 03 00:00:00 CEST 2025"
	  }]
})
2023-04-15 18:46:38,992 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [http-nio-8080-exec-2] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Fri Jul 04 00:00:00 CEST 2025"
	  }]
})
2023-04-15 18:46:38,992 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [http-nio-8080-exec-2] Converting ({
	  "data": [{
	    "expireDate": "Sun Dec 31 00:00:00 CET 2023","effectiveDate": "Sat Jul 05 00:00:00 CEST 2025"
	  }]
})
2023-04-15 18:46:38,992 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [http-nio-8080-exec-2] Converting ({
	  "data": [{
	    "expireDate": "Mon Jan 01 00:00:00 CET 2024","effectiveDate": "Sun Jul 06 00:00:00 CEST 2025"
	  }]
})
2023-04-15 18:46:38,992 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [http-nio-8080-exec-2] Converting ({
	  "data": [{
	    "expireDate": "Tue Jan 02 00:00:00 CET 2024","effectiveDate": "Mon Jul 07 00:00:00 CEST 2025"
	  }]
})
2023-04-15 18:46:38,993 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [http-nio-8080-exec-2] Converting ({
	  "data": [{
	    "expireDate": "Wed Jan 03 00:00:00 CET 2024","effectiveDate": "Tue Jul 08 00:00:00 CEST 2025"
	  }]
})
2023-04-15 18:46:38,993 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [http-nio-8080-exec-2] Converting ({
	  "data": [{
	    "expireDate": "Thu Jan 04 00:00:00 CET 2024","effectiveDate": "Wed Jul 09 00:00:00 CEST 2025"
	  }]
})
2023-04-15 18:46:38,993 INFO com.yuripe.batchType0A.batchprocessing.Processor.PolicyItemProcessor [http-nio-8080-exec-2] Converting ({
	  "data": [{
	    "expireDate": "Fri Jan 05 00:00:00 CET 2024","effectiveDate": "Thu Jul 10 00:00:00 CEST 2025"
	  }]
})
2023-04-15 18:46:39,042 ERROR org.springframework.batch.core.step.AbstractStep [http-nio-8080-exec-2] Encountered an error executing step step1 in job importUserJob
org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [INSERT INTO BATCH.policy (contractor_customer_code, effective_date, expire_date, insured_customer_code, policy_number, state) VALUES (?, ?, ?, ?, ?, ?)]; Duplicate entry 'P000856' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:103)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1538)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:667)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:691)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1034)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:373)
	at org.springframework.batch.item.database.JdbcBatchItemWriter.write(JdbcBatchItemWriter.java:190)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.writeItems(SimpleChunkProcessor.java:203)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.doWrite(SimpleChunkProcessor.java:170)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.write(SimpleChunkProcessor.java:297)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.process(SimpleChunkProcessor.java:227)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:75)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:389)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:313)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:256)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:362)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:206)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:139)
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:241)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:227)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:153)
	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:68)
	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:68)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:167)
	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:142)
	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:137)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:316)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:157)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:148)
	at org.springframework.batch.core.launch.support.TaskExecutorJobLauncher.run(TaskExecutorJobLauncher.java:70)
	at com.yuripe.batchType0A.Controller.BatchController.importFileAndRun(BatchController.java:49)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:563)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.sql.BatchUpdateException: Duplicate entry 'P000856' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at com.mysql.cj.util.Util.handleNewInstance(Util.java:192)
	at com.mysql.cj.util.Util.getInstance(Util.java:167)
	at com.mysql.cj.util.Util.getInstance(Util.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLError.createBatchUpdateException(SQLError.java:224)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:816)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchInternal(ClientPreparedStatement.java:418)
	at com.mysql.cj.jdbc.StatementImpl.executeBatch(StatementImpl.java:795)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1047)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:651)
	... 81 common frames omitted
Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'P000856' for key 'policy.UKpwdbfish9akv2pufab9vybg19'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:795)
	... 87 common frames omitted
2023-04-15 18:46:39,050 INFO org.springframework.batch.core.step.AbstractStep [http-nio-8080-exec-2] Step: [step1] executed in 24s120ms
2023-04-15 18:46:39,064 INFO com.yuripe.batchType0A.Listener.JobFailureNotificationListener [http-nio-8080-exec-2] !!! JOB FAILED! Time to verify the results
2023-04-15 18:46:39,072 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [http-nio-8080-exec-2] Job: [FlowJob: [name=importUserJob]] completed with the following parameters: [{'filePattern':'{value=sample-data2.TXT, type=class java.lang.String, identifying=true}'}] and the following status: [FAILED] in 24s178ms
